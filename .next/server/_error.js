/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "/_error";
exports.ids = ["/_error"];
exports.modules = {

/***/ "./components/tracking/context/EnhancedMapContext.tsx":
/*!************************************************************!*\
  !*** ./components/tracking/context/EnhancedMapContext.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnhancedMapProvider: () => (/* binding */ EnhancedMapProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useEnhancedMapContext: () => (/* binding */ useEnhancedMapContext)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types/base */ \"./types/base.ts\");\n/* harmony import */ var _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/services/openSkyTrackingService */ \"./lib/services/openSkyTrackingService.ts\");\n/* harmony import */ var _persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../persistence/AircraftDataPersistence */ \"./components/tracking/persistence/AircraftDataPersistence.ts\");\n/* harmony import */ var _config_map__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../config/map */ \"./config/map.ts\");\n// components/tracking/context/EnhancedMapContext.tsx\n\n\n\n\n\n\n// Create context with default values\nconst EnhancedMapContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    mapInstance: null,\n    setMapInstance: ()=>{},\n    zoomLevel: 6,\n    setZoomLevel: ()=>{},\n    displayedAircraft: [],\n    selectedAircraft: null,\n    selectAircraft: ()=>{},\n    // Data persistence defaults\n    cachedAircraftData: {},\n    updateAircraftData: ()=>{},\n    lastPersistenceUpdate: null,\n    selectedManufacturer: null,\n    selectedModel: null,\n    activeModels: [],\n    totalActive: 0,\n    isLoading: false,\n    isRefreshing: false,\n    trackingStatus: '',\n    lastRefreshed: null,\n    selectManufacturer: async ()=>{},\n    selectModel: ()=>{},\n    reset: async ()=>{},\n    refreshPositions: async ()=>{},\n    fullRefresh: async ()=>{},\n    clearCache: ()=>{},\n    clearGeofenceData: ()=>{},\n    // Add default for new function\n    updateGeofenceAircraft: ()=>{},\n    filterMode: 'manufacturer',\n    setFilterMode: ()=>{},\n    blockManufacturerApiCalls: false,\n    setBlockManufacturerApiCalls: ()=>{},\n    isManufacturerApiBlocked: false,\n    setIsManufacturerApiBlocked: ()=>{},\n    // Geofencing properties\n    geofenceCenter: null,\n    geofenceRadius: 25,\n    isGeofenceActive: false,\n    setGeofenceCenter: ()=>{},\n    setGeofenceRadius: ()=>{},\n    geofenceCoordinates: null,\n    toggleGeofence: ()=>{},\n    clearGeofence: ()=>({}),\n    filteredAircraft: [],\n    selectedRegion: _types_base__WEBPACK_IMPORTED_MODULE_2__.RegionCode.GLOBAL,\n    setSelectedRegion: (region)=>{},\n    getBoundsByRegion: (region)=>(0,_config_map__WEBPACK_IMPORTED_MODULE_5__.getBoundsByRegion)('GLOBAL'),\n    isGeofencePlacementMode: false,\n    setIsGeofencePlacementMode: ()=>{}\n});\n// Enhanced Map Provider component\nconst EnhancedMapProvider = ({ children, manufacturers, onError })=>{\n    // Map state\n    const [mapInstance, setMapInstance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [zoomLevel, setZoomLevel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(6);\n    // Aircraft state\n    const [displayedAircraft, setDisplayedAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedAircraft, setSelectedAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Data persistence state\n    const [cachedAircraftData, setCachedAircraftData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [lastPersistenceUpdate, setLastPersistenceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [geofenceCenter, setGeofenceCenter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [selectedRegion, setSelectedRegion] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_types_base__WEBPACK_IMPORTED_MODULE_2__.RegionCode.GLOBAL);\n    // Derived state for geofence coordinates\n    const geofenceCoordinates = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"EnhancedMapProvider.useMemo[geofenceCoordinates]\": ()=>geofenceCenter\n    }[\"EnhancedMapProvider.useMemo[geofenceCoordinates]\"], [\n        geofenceCenter\n    ]);\n    const [geofenceRadius, setGeofenceRadius] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(25); // Default 25km radius\n    const [isGeofenceActive, setIsGeofenceActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isGeofencePlacementMode, setIsGeofencePlacementMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Add this to your state declarations\n    const [aircraftPositions, setAircraftPositions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Toggle geofence activation\n    const toggleGeofence = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[toggleGeofence]\": ()=>{\n            setIsGeofenceActive({\n                \"EnhancedMapProvider.useCallback[toggleGeofence]\": (prev)=>!prev\n            }[\"EnhancedMapProvider.useCallback[toggleGeofence]\"]);\n        }\n    }[\"EnhancedMapProvider.useCallback[toggleGeofence]\"], []);\n    // Clear geofence\n    const clearGeofence = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[clearGeofence]\": ()=>{\n            setGeofenceCenter(null);\n            setIsGeofenceActive(false);\n            return {}; // Return an empty object to match the expected type\n        }\n    }[\"EnhancedMapProvider.useCallback[clearGeofence]\"], []);\n    // Selection state\n    const [selectedManufacturer, setSelectedManufacturer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [selectedModel, setSelectedModel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [activeModels, setActiveModels] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [totalActive, setTotalActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Loading state\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isRefreshing, setIsRefreshing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [trackingStatus, setTrackingStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [lastRefreshed, setLastRefreshed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Add this with your other state variables\n    const [lastFullRefreshTime, setLastFullRefreshTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isManufacturerApiBlocked, setIsManufacturerApiBlocked] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [filterMode, setFilterMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('manufacturer');\n    const [blockManufacturerApiCalls, setBlockManufacturerApiCalls] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Flag to track if we're in geofence mode\n    const [isGeofenceMode, setIsGeofenceMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Define the filter function correctly\n    const filterAircraftByGeofence = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\": ()=>{\n            if (!geofenceCenter || !isGeofenceActive) {\n                return displayedAircraft;\n            }\n            // Helper function to calculate distance between two points\n            const calculateDistance = {\n                \"EnhancedMapProvider.useCallback[filterAircraftByGeofence].calculateDistance\": (lat1, lon1, lat2, lon2)=>{\n                    const R = 6371; // Radius of the earth in km\n                    const dLat = deg2rad(lat2 - lat1);\n                    const dLon = deg2rad(lon2 - lon1);\n                    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n                    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n                    const distance = R * c; // Distance in km\n                    return distance;\n                }\n            }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence].calculateDistance\"];\n            const deg2rad = {\n                \"EnhancedMapProvider.useCallback[filterAircraftByGeofence].deg2rad\": (deg)=>{\n                    return deg * (Math.PI / 180);\n                }\n            }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence].deg2rad\"];\n            // Filter aircraft within the radius\n            return displayedAircraft.filter({\n                \"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\": (aircraft)=>{\n                    if (!aircraft.latitude || !aircraft.longitude) return false;\n                    // Calculate distance between aircraft and geofence center\n                    const distance = calculateDistance(geofenceCenter.lat, geofenceCenter.lng, aircraft.latitude, aircraft.longitude);\n                    // Return true if aircraft is within radius\n                    return geofenceRadius !== null && distance <= geofenceRadius;\n                }\n            }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\"]);\n        }\n    }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\"], [\n        displayedAircraft,\n        geofenceCenter,\n        geofenceRadius,\n        isGeofenceActive\n    ]);\n    // Then separately, define filteredAircraft - don't try to do both in the same function\n    const filteredAircraft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"EnhancedMapProvider.useMemo[filteredAircraft]\": ()=>{\n            return isGeofenceActive && geofenceCenter ? filterAircraftByGeofence() : displayedAircraft;\n        }\n    }[\"EnhancedMapProvider.useMemo[filteredAircraft]\"], [\n        isGeofenceActive,\n        geofenceCenter,\n        filterAircraftByGeofence,\n        displayedAircraft\n    ]);\n    // Refs for tracking subscriptions\n    const unsubscribeAircraftRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const unsubscribeStatusRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Load persisted aircraft data on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            const savedData = (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.loadAircraftData)();\n            if (savedData) {\n                console.log(`[EnhancedMapContext] Loaded ${Object.keys(savedData).length} aircraft from persistence`);\n                setCachedAircraftData(savedData);\n                setLastPersistenceUpdate(Date.now());\n            }\n        }\n    }[\"EnhancedMapProvider.useEffect\"], []);\n    // Save aircraft data when cachedAircraftData changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            if (Object.keys(cachedAircraftData).length > 0) {\n                console.log(`[EnhancedMapContext] Saving ${Object.keys(cachedAircraftData).length} aircraft to persistence`);\n                (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.saveAircraftData)(cachedAircraftData);\n            }\n        }\n    }[\"EnhancedMapProvider.useEffect\"], [\n        cachedAircraftData\n    ]);\n    // Initialize tracking service and subscriptions\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            // Subscribe to tracking updates that include trail data\n            const handleTrackingUpdate = {\n                \"EnhancedMapProvider.useEffect.handleTrackingUpdate\": (data)=>{\n                    // Only update displayed aircraft if we're not in geofence mode\n                    if (!isGeofenceMode) {\n                        updateAircraftDisplay();\n                    }\n                }\n            }[\"EnhancedMapProvider.useEffect.handleTrackingUpdate\"];\n            // Subscribe to aircraft updates\n            unsubscribeAircraftRef.current = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].subscribe(handleTrackingUpdate);\n            // Subscribe to status updates\n            unsubscribeStatusRef.current = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].subscribeToStatus({\n                \"EnhancedMapProvider.useEffect\": (status)=>{\n                    setTrackingStatus(status);\n                    setIsLoading(_lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isLoading());\n                }\n            }[\"EnhancedMapProvider.useEffect\"]);\n            // IMPORTANT: Clear any existing tracking when component mounts\n            _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].stopTracking();\n            // Cleanup on unmount\n            return ({\n                \"EnhancedMapProvider.useEffect\": ()=>{\n                    if (unsubscribeAircraftRef.current) {\n                        unsubscribeAircraftRef.current();\n                    }\n                    if (unsubscribeStatusRef.current) {\n                        unsubscribeStatusRef.current();\n                    }\n                }\n            })[\"EnhancedMapProvider.useEffect\"];\n        }\n    }[\"EnhancedMapProvider.useEffect\"], [\n        isGeofenceMode\n    ]);\n    // Update aircraft data with persistence\n    const updateAircraftData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[updateAircraftData]\": (newAircraftArray)=>{\n            // Convert to a map for easier processing\n            const newAircraftMap = {};\n            newAircraftArray.forEach({\n                \"EnhancedMapProvider.useCallback[updateAircraftData]\": (aircraft)=>{\n                    if (aircraft.ICAO24) {\n                        newAircraftMap[aircraft.ICAO24] = {\n                            ...aircraft,\n                            // Ensure required fields for CachedAircraftData are present\n                            ICAO24: aircraft.ICAO24,\n                            latitude: aircraft.latitude || 0,\n                            longitude: aircraft.longitude || 0,\n                            altitude: aircraft.altitude || 0,\n                            velocity: aircraft.velocity || 0,\n                            heading: aircraft.heading || 0,\n                            on_ground: aircraft.on_ground || false,\n                            last_contact: aircraft.last_contact || Date.now(),\n                            lastSeen: Date.now(),\n                            lastUpdated: Date.now()\n                        };\n                    }\n                }\n            }[\"EnhancedMapProvider.useCallback[updateAircraftData]\"]);\n            // Merge with existing cached data to preserve fields\n            setCachedAircraftData({\n                \"EnhancedMapProvider.useCallback[updateAircraftData]\": (currentCache)=>(0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.mergeAircraftData)(currentCache, newAircraftMap)\n            }[\"EnhancedMapProvider.useCallback[updateAircraftData]\"]);\n            setLastPersistenceUpdate(Date.now());\n            // If the selected aircraft is updated, update the selection\n            if (selectedAircraft && newAircraftMap[selectedAircraft.ICAO24]) {\n                const updatedAircraft = {\n                    ...selectedAircraft,\n                    ...newAircraftMap[selectedAircraft.ICAO24]\n                };\n                setSelectedAircraft(updatedAircraft);\n            }\n        }\n    }[\"EnhancedMapProvider.useCallback[updateAircraftData]\"], [\n        selectedAircraft\n    ]);\n    // Clear persistence cache\n    const clearCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[clearCache]\": ()=>{\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.clearAircraftData)();\n            setCachedAircraftData({});\n            setLastPersistenceUpdate(null);\n            setTrackingStatus('Cache cleared');\n        }\n    }[\"EnhancedMapProvider.useCallback[clearCache]\"], []);\n    // Update aircraft display based on selected MODEL\n    const updateAircraftDisplay = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[updateAircraftDisplay]\": ()=>{\n            // Get extended aircraft based on selected MODEL\n            const extendedAircraft = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getExtendedAircraft(selectedModel || undefined);\n            // Get MODEL stats from the service\n            const { models, totalActive: total } = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getModelStats();\n            // Enhance aircraft data with persistence\n            updateAircraftData(extendedAircraft);\n            // Only update displayed aircraft if we're not in geofence mode\n            if (!isGeofenceMode) {\n                setDisplayedAircraft(extendedAircraft);\n                setActiveModels(models);\n                setTotalActive(total);\n            }\n            setIsLoading(_lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isLoading());\n        }\n    }[\"EnhancedMapProvider.useCallback[updateAircraftDisplay]\"], [\n        selectedModel,\n        updateAircraftData,\n        isGeofenceMode\n    ]);\n    // Update display when MODEL selection changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            updateAircraftDisplay();\n        }\n    }[\"EnhancedMapProvider.useEffect\"], [\n        selectedModel,\n        updateAircraftDisplay\n    ]);\n    // New function to handle geofence aircraft updates\n    const updateGeofenceAircraft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[updateGeofenceAircraft]\": (geofenceAircraft)=>{\n            // Mark that we're in geofence mode\n            setIsGeofenceMode(true);\n            console.log(`[EnhancedMapContext] Updating ${geofenceAircraft.length} aircraft from geofence`);\n            // Update the cached data (same as regular updates)\n            updateAircraftData(geofenceAircraft);\n            // Also directly update the displayed aircraft\n            setDisplayedAircraft(geofenceAircraft);\n            // Update stats\n            setTotalActive(geofenceAircraft.length);\n            // Extract MODEL stats for the sidebar\n            const modelCounts = geofenceAircraft.reduce({\n                \"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelCounts\": (acc, aircraft)=>{\n                    const MODEL = aircraft.MODEL || aircraft.TYPE_AIRCRAFT || 'Unknown';\n                    if (!acc[MODEL]) {\n                        acc[MODEL] = {\n                            MODEL,\n                            count: 0,\n                            MANUFACTURER: aircraft.MANUFACTURER || 'Unknown',\n                            // Add required properties for AircraftModel\n                            label: MODEL,\n                            activeCount: 0,\n                            totalCount: 0\n                        };\n                    }\n                    acc[MODEL].count++;\n                    acc[MODEL].activeCount++;\n                    acc[MODEL].totalCount++;\n                    return acc;\n                }\n            }[\"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelCounts\"], {});\n            // Convert to array for the activeModels state\n            const modelArray = Object.values(modelCounts).map({\n                \"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelArray\": (MODEL)=>({\n                        MODEL: MODEL.MODEL,\n                        count: MODEL.count,\n                        MANUFACTURER: MODEL.MANUFACTURER,\n                        // Add required properties for AircraftModel type\n                        label: MODEL.MODEL,\n                        activeCount: MODEL.count,\n                        totalCount: MODEL.count\n                    })\n            }[\"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelArray\"]);\n            setActiveModels(modelArray);\n            // Update the last refreshed timestamp\n            setLastRefreshed(new Date().toLocaleTimeString());\n        }\n    }[\"EnhancedMapProvider.useCallback[updateGeofenceAircraft]\"], [\n        updateAircraftData\n    ]);\n    // Handle MANUFACTURER selection\n    // In your EnhancedMapContext.tsx - modify the selectManufacturer function\n    const selectManufacturer = async (MANUFACTURER)=>{\n        // Exit geofence mode when selecting a MANUFACTURER\n        setIsGeofenceMode(false);\n        setSelectedManufacturer(MANUFACTURER);\n        setSelectedModel(null);\n        setIsLoading(true);\n        setLastRefreshed(null);\n        // Clear previous data\n        setDisplayedAircraft([]);\n        setActiveModels([]);\n        setTotalActive(0);\n        // If null, just exit\n        if (MANUFACTURER === null) {\n            setIsLoading(false);\n            return;\n        }\n        // If we're blocking API calls, exit early\n        if (isManufacturerApiBlocked) {\n            console.log(`[EnhancedMapContext] API calls blocked for manufacturer: ${MANUFACTURER}`);\n            setIsLoading(false);\n            return;\n        }\n        try {\n            // Start tracking with a progress handler\n            setTrackingStatus(`Loading aircraft for ${MANUFACTURER}...`);\n            // Use the existing service but with a progress callback\n            // In EnhancedMapContext.tsx, modify your callback to handle both types:\n            await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].trackManufacturerWithProgress(MANUFACTURER, (progress)=>{\n                // Update the tracking status message\n                if (progress.message) {\n                    setTrackingStatus(progress.message);\n                }\n                // Update displayed aircraft as they're loaded\n                if (progress.aircraft) {\n                    // Cast the aircraft array to ExtendedAircraft[] since our context uses that type\n                    setDisplayedAircraft(progress.aircraft);\n                }\n                // Update model stats\n                if (progress.models) {\n                    setActiveModels(progress.models);\n                }\n                // Update total count\n                if (progress.total !== undefined) {\n                    setTotalActive(progress.total);\n                }\n            });\n            setLastRefreshed(new Date().toLocaleTimeString());\n        } catch (error) {\n            onError(`Error tracking manufacturer: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            setTrackingStatus('Error loading aircraft data');\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    // Handle MODEL selection\n    const selectModel = (MODEL)=>{\n        setSelectedModel(MODEL);\n    };\n    // Handle aircraft selection\n    const selectAircraft = (aircraft)=>{\n        setSelectedAircraft(aircraft);\n        // If selecting an aircraft, check if we have cached data to enhance it\n        if (aircraft && aircraft.ICAO24 && cachedAircraftData[aircraft.ICAO24]) {\n            const enhancedAircraft = {\n                ...aircraft,\n                ...cachedAircraftData[aircraft.ICAO24]\n            };\n            setSelectedAircraft(enhancedAircraft);\n        }\n    };\n    // If you don't already have it, add this function to expose the map's getBoundsByRegion function\n    // Create a wrapped function that calls your map config function\n    const handleGetBoundsByRegion = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[handleGetBoundsByRegion]\": (region)=>{\n            return (0,_config_map__WEBPACK_IMPORTED_MODULE_5__.getBoundsByRegion)(region);\n        }\n    }[\"EnhancedMapProvider.useCallback[handleGetBoundsByRegion]\"], []);\n    // Reset all selections\n    const reset = async ()=>{\n        await selectManufacturer(null);\n    };\n    // Method to refresh only the positions of active aircraft\n    const refreshPositions = async ()=>{\n        if (isRefreshing || !selectedManufacturer && !isGeofenceMode) return;\n        setIsRefreshing(true);\n        setTrackingStatus('Updating aircraft positions...');\n        try {\n            // Call the service\n            await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshPositionsOnly();\n            setLastRefreshed(new Date().toLocaleTimeString());\n            setTrackingStatus(`Positions updated for ${displayedAircraft.length} aircraft`);\n        } catch (error) {\n            onError(`Error refreshing positions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        } finally{\n            setTimeout(()=>{\n                setIsRefreshing(false);\n            }, 500);\n        }\n    };\n    // Method for full tracking refresh\n    const fullRefresh = async ()=>{\n        if (!selectedManufacturer && !isGeofenceMode || isRefreshing) return;\n        // Set a timeout to force exit from loading state after 10 seconds\n        // This is a safety mechanism\n        const safetyTimeout = setTimeout(()=>{\n            setIsRefreshing(false);\n            setTrackingStatus('Refresh timed out');\n        }, 10000);\n        setIsRefreshing(true);\n        try {\n            // Get currently tracked aircraft\n            const allTrackedAircraft = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTrackedAircraft();\n            // Get active aircraft (those with position data)\n            const activeAircraft = allTrackedAircraft.filter((aircraft)=>aircraft.ICAO24 && aircraft.latitude && aircraft.longitude);\n            const needsFullRefresh = !lastFullRefreshTime || Date.now() - lastFullRefreshTime > 3600000;\n            let success = false;\n            if (activeAircraft.length === 0 || needsFullRefresh) {\n                // Do a full refresh\n                setTrackingStatus('Performing full refresh...');\n                try {\n                    await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshNow();\n                    setLastFullRefreshTime(Date.now());\n                    success = true;\n                } catch (error) {\n                    // Silently handle this error\n                    console.warn('Full refresh failed');\n                }\n            } else {\n                // Do an optimized refresh\n                const activeIcaos = activeAircraft.map((aircraft)=>aircraft.ICAO24).filter(Boolean);\n                if (activeIcaos.length > 0) {\n                    setTrackingStatus(`Refreshing ${activeIcaos.length} active aircraft...`);\n                    try {\n                        await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshSpecificAircraft(activeIcaos);\n                        success = true;\n                    } catch (error) {\n                        // Try falling back to a full refresh\n                        console.warn('Optimized refresh failed, trying full refresh');\n                        try {\n                            await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshNow();\n                            setLastFullRefreshTime(Date.now());\n                            success = true;\n                        } catch (fallbackError) {\n                            // Silently handle this error\n                            console.warn('Fallback refresh failed');\n                        }\n                    }\n                }\n            }\n            clearTimeout(safetyTimeout);\n            // Only update if the refresh was successful\n            if (success) {\n                const currentCount = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTrackedAircraft().length;\n                setTrackingStatus(`Refresh completed with ${currentCount} aircraft`);\n                setLastRefreshed(new Date().toLocaleTimeString());\n            } else {\n                setTrackingStatus('Refresh failed');\n            }\n        } catch (error) {\n            clearTimeout(safetyTimeout);\n            // Only show errors to the user if they appear to be significant\n            if (error instanceof Error && error.message !== 'aborted') {\n                onError(`Error during refresh: ${error.message || 'Unknown error'}`);\n            }\n            setTrackingStatus('Error during refresh');\n        } finally{\n            clearTimeout(safetyTimeout);\n            setIsRefreshing(false);\n        }\n    };\n    const clearGeofenceData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[clearGeofenceData]\": ()=>{\n            // Reset geofence mode flag\n            setIsGeofenceMode(false);\n            // Clear displayed aircraft\n            setDisplayedAircraft([]);\n            setActiveModels([]);\n            setTotalActive(0);\n            // If there was a previously selected MANUFACTURER, we can restore it\n            if (selectedManufacturer) {\n                // Small delay to ensure state updates properly\n                setTimeout({\n                    \"EnhancedMapProvider.useCallback[clearGeofenceData]\": ()=>{\n                        _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].trackManufacturer(selectedManufacturer);\n                    }\n                }[\"EnhancedMapProvider.useCallback[clearGeofenceData]\"], 100);\n            }\n        }\n    }[\"EnhancedMapProvider.useCallback[clearGeofenceData]\"], [\n        selectedManufacturer\n    ]);\n    // Create context value\n    const contextValue = {\n        mapInstance,\n        setMapInstance,\n        zoomLevel,\n        setZoomLevel,\n        displayedAircraft,\n        selectedAircraft,\n        selectAircraft,\n        // Data persistence\n        cachedAircraftData,\n        updateAircraftData,\n        lastPersistenceUpdate,\n        selectedManufacturer,\n        selectedModel,\n        activeModels,\n        totalActive,\n        isLoading,\n        isRefreshing,\n        trackingStatus,\n        lastRefreshed,\n        selectManufacturer,\n        selectModel,\n        reset,\n        refreshPositions,\n        fullRefresh,\n        clearCache,\n        clearGeofenceData,\n        updateGeofenceAircraft,\n        filteredAircraft,\n        filterMode,\n        setFilterMode,\n        blockManufacturerApiCalls,\n        setBlockManufacturerApiCalls,\n        isManufacturerApiBlocked,\n        setIsManufacturerApiBlocked,\n        // Geofencing properties\n        geofenceCenter,\n        geofenceRadius,\n        isGeofenceActive,\n        geofenceCoordinates,\n        setGeofenceCenter,\n        setGeofenceRadius,\n        toggleGeofence,\n        clearGeofence,\n        isGeofencePlacementMode,\n        setIsGeofencePlacementMode,\n        // Region selection\n        selectedRegion,\n        setSelectedRegion,\n        getBoundsByRegion: handleGetBoundsByRegion\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(EnhancedMapContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\components\\\\tracking\\\\context\\\\EnhancedMapContext.tsx\",\n        lineNumber: 824,\n        columnNumber: 5\n    }, undefined);\n};\n// Custom hook to use the context\nconst useEnhancedMapContext = ()=>(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EnhancedMapContext);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EnhancedMapContext);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3RyYWNraW5nL2NvbnRleHQvRW5oYW5jZWRNYXBDb250ZXh0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLHFEQUFxRDs7QUFTdEM7QUFPTztBQUdxRDtBQU0zQjtBQUtuQjtBQXVFN0IscUNBQXFDO0FBQ3JDLE1BQU1nQixtQ0FBcUJmLG9EQUFhQSxDQUF5QjtJQUMvRGdCLGFBQWE7SUFDYkMsZ0JBQWdCLEtBQU87SUFDdkJDLFdBQVc7SUFDWEMsY0FBYyxLQUFPO0lBQ3JCQyxtQkFBbUIsRUFBRTtJQUNyQkMsa0JBQWtCO0lBQ2xCQyxnQkFBZ0IsS0FBTztJQUV2Qiw0QkFBNEI7SUFDNUJDLG9CQUFvQixDQUFDO0lBQ3JCQyxvQkFBb0IsS0FBTztJQUMzQkMsdUJBQXVCO0lBRXZCQyxzQkFBc0I7SUFDdEJDLGVBQWU7SUFDZkMsY0FBYyxFQUFFO0lBQ2hCQyxhQUFhO0lBRWJDLFdBQVc7SUFDWEMsY0FBYztJQUNkQyxnQkFBZ0I7SUFDaEJDLGVBQWU7SUFFZkMsb0JBQW9CLFdBQWE7SUFDakNDLGFBQWEsS0FBTztJQUNwQkMsT0FBTyxXQUFhO0lBQ3BCQyxrQkFBa0IsV0FBYTtJQUMvQkMsYUFBYSxXQUFhO0lBQzFCQyxZQUFZLEtBQU87SUFDbkJDLG1CQUFtQixLQUFPO0lBQzFCLCtCQUErQjtJQUMvQkMsd0JBQXdCLEtBQU87SUFFL0JDLFlBQVk7SUFDWkMsZUFBZSxLQUFPO0lBQ3RCQywyQkFBMkI7SUFDM0JDLDhCQUE4QixLQUFPO0lBQ3JDQywwQkFBMEI7SUFDMUJDLDZCQUE2QixLQUFPO0lBRXBDLHdCQUF3QjtJQUN4QkMsZ0JBQWdCO0lBQ2hCQyxnQkFBZ0I7SUFDaEJDLGtCQUFrQjtJQUNsQkMsbUJBQW1CLEtBQU87SUFDMUJDLG1CQUFtQixLQUFPO0lBQzFCQyxxQkFBcUI7SUFDckJDLGdCQUFnQixLQUFPO0lBQ3ZCQyxlQUFlLElBQU8sRUFBQztJQUN2QkMsa0JBQWtCLEVBQUU7SUFDcEJDLGdCQUFnQmxE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cmFja2luZ1xcY29tcG9uZW50c1xcdHJhY2tpbmdcXGNvbnRleHRcXEVuaGFuY2VkTWFwQ29udGV4dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29tcG9uZW50cy90cmFja2luZy9jb250ZXh0L0VuaGFuY2VkTWFwQ29udGV4dC50c3hcclxuaW1wb3J0IFJlYWN0LCB7XHJcbiAgY3JlYXRlQ29udGV4dCxcclxuICB1c2VDb250ZXh0LFxyXG4gIHVzZVN0YXRlLFxyXG4gIHVzZUVmZmVjdCxcclxuICB1c2VDYWxsYmFjayxcclxuICB1c2VSZWYsXHJcbiAgdXNlTWVtbyxcclxufSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBMIGZyb20gJ2xlYWZsZXQnO1xyXG5pbXBvcnQge1xyXG4gIFNlbGVjdE9wdGlvbixcclxuICBFeHRlbmRlZEFpcmNyYWZ0LFxyXG4gIEFpcmNyYWZ0UG9zaXRpb24sXHJcbiAgUmVnaW9uQ29kZSxcclxufSBmcm9tICdAL3R5cGVzL2Jhc2UnO1xyXG5pbXBvcnQgdHlwZSB7IENhY2hlZEFpcmNyYWZ0RGF0YSB9IGZyb20gJ0AvdHlwZXMvYmFzZSc7IC8vIEltcG9ydCB5b3VyIG5ldyB0eXBlXHJcbmltcG9ydCB0eXBlIHsgQWlyY3JhZnRNb2RlbCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2FpcmNyYWZ0LW1vZGVscyc7XHJcbmltcG9ydCBvcGVuU2t5VHJhY2tpbmdTZXJ2aWNlIGZyb20gJ0AvbGliL3NlcnZpY2VzL29wZW5Ta3lUcmFja2luZ1NlcnZpY2UnO1xyXG5pbXBvcnQge1xyXG4gIHNhdmVBaXJjcmFmdERhdGEsXHJcbiAgbG9hZEFpcmNyYWZ0RGF0YSxcclxuICBtZXJnZUFpcmNyYWZ0RGF0YSxcclxuICBjbGVhckFpcmNyYWZ0RGF0YSxcclxufSBmcm9tICcuLi9wZXJzaXN0ZW5jZS9BaXJjcmFmdERhdGFQZXJzaXN0ZW5jZSc7XHJcbmltcG9ydCB0eXBlIHsgTGF0TG5nQm91bmRzRXhwcmVzc2lvbiB9IGZyb20gJ2xlYWZsZXQnO1xyXG5pbXBvcnQge1xyXG4gIE1BUF9DT05GSUcsXHJcbiAgZ2V0Qm91bmRzQnlSZWdpb24gYXMgY29uZmlnR2V0Qm91bmRzQnlSZWdpb24sXHJcbn0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL21hcCc7XHJcblxyXG4vLyBEZWZpbmUgY29udGV4dCBpbnRlcmZhY2VcclxuaW50ZXJmYWNlIEVuaGFuY2VkTWFwQ29udGV4dFR5cGUge1xyXG4gIC8vIE1hcCBzdGF0ZVxyXG4gIG1hcEluc3RhbmNlOiBMLk1hcCB8IG51bGw7XHJcbiAgc2V0TWFwSW5zdGFuY2U6IChtYXA6IEwuTWFwIHwgbnVsbCkgPT4gdm9pZDtcclxuICB6b29tTGV2ZWw6IG51bWJlcjtcclxuICBzZXRab29tTGV2ZWw6ICh6b29tOiBudW1iZXIpID0+IHZvaWQ7XHJcblxyXG4gIC8vIEFpcmNyYWZ0IGRhdGFcclxuICBkaXNwbGF5ZWRBaXJjcmFmdDogRXh0ZW5kZWRBaXJjcmFmdFtdO1xyXG4gIHNlbGVjdGVkQWlyY3JhZnQ6IEV4dGVuZGVkQWlyY3JhZnQgfCBudWxsO1xyXG4gIHNlbGVjdEFpcmNyYWZ0OiAoYWlyY3JhZnQ6IEV4dGVuZGVkQWlyY3JhZnQgfCBudWxsKSA9PiB2b2lkO1xyXG5cclxuICAvLyBEYXRhIHBlcnNpc3RlbmNlXHJcbiAgY2FjaGVkQWlyY3JhZnREYXRhOiBSZWNvcmQ8c3RyaW5nLCBDYWNoZWRBaXJjcmFmdERhdGE+O1xyXG4gIHVwZGF0ZUFpcmNyYWZ0RGF0YTogKG5ld0FpcmNyYWZ0OiBFeHRlbmRlZEFpcmNyYWZ0W10pID0+IHZvaWQ7XHJcbiAgbGFzdFBlcnNpc3RlbmNlVXBkYXRlOiBudW1iZXIgfCBudWxsO1xyXG5cclxuICAvLyBTZWxlY3Rpb24gc3RhdGVcclxuICBzZWxlY3RlZE1hbnVmYWN0dXJlcjogc3RyaW5nIHwgbnVsbDtcclxuICBzZWxlY3RlZE1vZGVsOiBzdHJpbmcgfCBudWxsO1xyXG4gIGFjdGl2ZU1vZGVsczogQWlyY3JhZnRNb2RlbFtdO1xyXG4gIHRvdGFsQWN0aXZlOiBudW1iZXI7XHJcblxyXG4gIC8vIExvYWRpbmcgc3RhdGVcclxuICBpc0xvYWRpbmc6IGJvb2xlYW47XHJcbiAgaXNSZWZyZXNoaW5nOiBib29sZWFuO1xyXG4gIHRyYWNraW5nU3RhdHVzOiBzdHJpbmc7XHJcbiAgbGFzdFJlZnJlc2hlZDogc3RyaW5nIHwgbnVsbDtcclxuXHJcbiAgLy8gQWN0aW9uc1xyXG4gIHNlbGVjdE1hbnVmYWN0dXJlcjogKE1BTlVGQUNUVVJFUjogc3RyaW5nIHwgbnVsbCkgPT4gUHJvbWlzZTx2b2lkPjtcclxuICBzZWxlY3RNb2RlbDogKE1PREVMOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkO1xyXG4gIHJlc2V0OiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG4gIHJlZnJlc2hQb3NpdGlvbnM6ICgpID0+IFByb21pc2U8dm9pZD47XHJcbiAgZnVsbFJlZnJlc2g6ICgpID0+IFByb21pc2U8dm9pZD47XHJcbiAgY2xlYXJDYWNoZTogKCkgPT4gdm9pZDtcclxuICBjbGVhckdlb2ZlbmNlRGF0YTogKCkgPT4gdm9pZDtcclxuICAvLyBBZGQgbmV3IGZ1bmN0aW9uIGZvciB1cGRhdGluZyBhaXJjcmFmdCBmcm9tIGdlb2ZlbmNlXHJcbiAgdXBkYXRlR2VvZmVuY2VBaXJjcmFmdDogKGdlb2ZlbmNlQWlyY3JhZnQ6IEV4dGVuZGVkQWlyY3JhZnRbXSkgPT4gdm9pZDtcclxuXHJcbiAgZmlsdGVyTW9kZTogJ21hbnVmYWN0dXJlcicgfCAnZ2VvZmVuY2UnIHwgJ2JvdGgnIHwgJ3JlZ2lvbicgfCAnb3duZXInO1xyXG4gIHNldEZpbHRlck1vZGU6IChcclxuICAgIG1vZGU6ICdtYW51ZmFjdHVyZXInIHwgJ2dlb2ZlbmNlJyB8ICdib3RoJyB8ICdyZWdpb24nIHwgJ293bmVyJ1xyXG4gICkgPT4gdm9pZDtcclxuICBibG9ja01hbnVmYWN0dXJlckFwaUNhbGxzOiBib29sZWFuO1xyXG4gIHNldEJsb2NrTWFudWZhY3R1cmVyQXBpQ2FsbHM6IChibG9jazogYm9vbGVhbikgPT4gdm9pZDtcclxuICBpc01hbnVmYWN0dXJlckFwaUJsb2NrZWQ6IGJvb2xlYW47XHJcbiAgc2V0SXNNYW51ZmFjdHVyZXJBcGlCbG9ja2VkOiAoYmxvY2tlZDogYm9vbGVhbikgPT4gdm9pZDtcclxuICBmaWx0ZXJlZEFpcmNyYWZ0OiBFeHRlbmRlZEFpcmNyYWZ0W107XHJcblxyXG4gIC8vIEdlb2ZlbmNpbmcgcHJvcGVydGllc1xyXG4gIGdlb2ZlbmNlQ2VudGVyOiB7IGxhdDogbnVtYmVyOyBsbmc6IG51bWJlciB9IHwgbnVsbDsgLy8gQ29ycmVjdGx5IHR5cGVkIGFzIHsgbGF0OiBudW1iZXI7IGxuZzogbnVtYmVyIH0gfCBudWxsXHJcbiAgZ2VvZmVuY2VSYWRpdXM6IG51bWJlciB8IG51bGw7IC8vIGluIGtpbG9tZXRlcnNcclxuICBpc0dlb2ZlbmNlQWN0aXZlOiBib29sZWFuO1xyXG4gIHNldEdlb2ZlbmNlQ2VudGVyOiAoY2VudGVyOiB7IGxhdDogbnVtYmVyOyBsbmc6IG51bWJlciB9IHwgbnVsbCkgPT4gdm9pZDtcclxuICBzZXRHZW9mZW5jZVJhZGl1czogKHJhZGl1czogbnVtYmVyIHwgbnVsbCkgPT4gdm9pZDtcclxuICB0b2dnbGVHZW9mZW5jZTogKCkgPT4gdm9pZDtcclxuICBjbGVhckdlb2ZlbmNlOiAoKSA9PiB7fTtcclxuICBnZW9mZW5jZUNvb3JkaW5hdGVzOiB7IGxhdDogbnVtYmVyOyBsbmc6IG51bWJlciB9IHwgbnVsbDtcclxuICBpc0dlb2ZlbmNlUGxhY2VtZW50TW9kZTogYm9vbGVhbjtcclxuICBzZXRJc0dlb2ZlbmNlUGxhY2VtZW50TW9kZTogKGlzUGxhY2VtZW50TW9kZTogYm9vbGVhbikgPT4gdm9pZDtcclxuXHJcbiAgLy8gUmVnaW9uIHNlbGVjdGlvbiBwcm9wZXJ0aWVzXHJcbiAgc2VsZWN0ZWRSZWdpb246IFJlZ2lvbkNvZGUgfCBzdHJpbmc7IC8vIEFsbG93IGJvdGggZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcclxuICBzZXRTZWxlY3RlZFJlZ2lvbjogKHJlZ2lvbjogUmVnaW9uQ29kZSB8IHN0cmluZykgPT4gdm9pZDtcclxuICBnZXRCb3VuZHNCeVJlZ2lvbjogKHJlZ2lvbjogc3RyaW5nKSA9PiBMYXRMbmdCb3VuZHNFeHByZXNzaW9uO1xyXG59XHJcblxyXG4vLyBDcmVhdGUgY29udGV4dCB3aXRoIGRlZmF1bHQgdmFsdWVzXHJcbmNvbnN0IEVuaGFuY2VkTWFwQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8RW5oYW5jZWRNYXBDb250ZXh0VHlwZT4oe1xyXG4gIG1hcEluc3RhbmNlOiBudWxsLFxyXG4gIHNldE1hcEluc3RhbmNlOiAoKSA9PiB7fSxcclxuICB6b29tTGV2ZWw6IDYsXHJcbiAgc2V0Wm9vbUxldmVsOiAoKSA9PiB7fSxcclxuICBkaXNwbGF5ZWRBaXJjcmFmdDogW10sXHJcbiAgc2VsZWN0ZWRBaXJjcmFmdDogbnVsbCxcclxuICBzZWxlY3RBaXJjcmFmdDogKCkgPT4ge30sXHJcblxyXG4gIC8vIERhdGEgcGVyc2lzdGVuY2UgZGVmYXVsdHNcclxuICBjYWNoZWRBaXJjcmFmdERhdGE6IHt9LFxyXG4gIHVwZGF0ZUFpcmNyYWZ0RGF0YTogKCkgPT4ge30sXHJcbiAgbGFzdFBlcnNpc3RlbmNlVXBkYXRlOiBudWxsLFxyXG5cclxuICBzZWxlY3RlZE1hbnVmYWN0dXJlcjogbnVsbCxcclxuICBzZWxlY3RlZE1vZGVsOiBudWxsLFxyXG4gIGFjdGl2ZU1vZGVsczogW10sXHJcbiAgdG90YWxBY3RpdmU6IDAsXHJcblxyXG4gIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgaXNSZWZyZXNoaW5nOiBmYWxzZSxcclxuICB0cmFja2luZ1N0YXR1czogJycsXHJcbiAgbGFzdFJlZnJlc2hlZDogbnVsbCxcclxuXHJcbiAgc2VsZWN0TWFudWZhY3R1cmVyOiBhc3luYyAoKSA9PiB7fSxcclxuICBzZWxlY3RNb2RlbDogKCkgPT4ge30sXHJcbiAgcmVzZXQ6IGFzeW5jICgpID0+IHt9LFxyXG4gIHJlZnJlc2hQb3NpdGlvbnM6IGFzeW5jICgpID0+IHt9LFxyXG4gIGZ1bGxSZWZyZXNoOiBhc3luYyAoKSA9PiB7fSxcclxuICBjbGVhckNhY2hlOiAoKSA9PiB7fSxcclxuICBjbGVhckdlb2ZlbmNlRGF0YTogKCkgPT4ge30sXHJcbiAgLy8gQWRkIGRlZmF1bHQgZm9yIG5ldyBmdW5jdGlvblxyXG4gIHVwZGF0ZUdlb2ZlbmNlQWlyY3JhZnQ6ICgpID0+IHt9LFxyXG5cclxuICBmaWx0ZXJNb2RlOiAnbWFudWZhY3R1cmVyJyxcclxuICBzZXRGaWx0ZXJNb2RlOiAoKSA9PiB7fSxcclxuICBibG9ja01hbnVmYWN0dXJlckFwaUNhbGxzOiBmYWxzZSxcclxuICBzZXRCbG9ja01hbnVmYWN0dXJlckFwaUNhbGxzOiAoKSA9PiB7fSxcclxuICBpc01hbnVmYWN0dXJlckFwaUJsb2NrZWQ6IGZhbHNlLFxyXG4gIHNldElzTWFudWZhY3R1cmVyQXBpQmxvY2tlZDogKCkgPT4ge30sXHJcblxyXG4gIC8vIEdlb2ZlbmNpbmcgcHJvcGVydGllc1xyXG4gIGdlb2ZlbmNlQ2VudGVyOiBudWxsLFxyXG4gIGdlb2ZlbmNlUmFkaXVzOiAyNSwgLy8gRGVmYXVsdCB0byAyNWttLCBub3QgbnVsbFxyXG4gIGlzR2VvZmVuY2VBY3RpdmU6IGZhbHNlLFxyXG4gIHNldEdlb2ZlbmNlQ2VudGVyOiAoKSA9PiB7fSxcclxuICBzZXRHZW9mZW5jZVJhZGl1czogKCkgPT4ge30sXHJcbiAgZ2VvZmVuY2VDb29yZGluYXRlczogbnVsbCxcclxuICB0b2dnbGVHZW9mZW5jZTogKCkgPT4ge30sXHJcbiAgY2xlYXJHZW9mZW5jZTogKCkgPT4gKHt9KSxcclxuICBmaWx0ZXJlZEFpcmNyYWZ0OiBbXSxcclxuICBzZWxlY3RlZFJlZ2lvbjogUmVnaW9uQ29kZS5HTE9CQUwsXHJcbiAgc2V0U2VsZWN0ZWRSZWdpb246IChyZWdpb246IFJlZ2lvbkNvZGUgfCBzdHJpbmcpID0+IHt9LFxyXG4gIGdldEJvdW5kc0J5UmVnaW9uOiAocmVnaW9uOiBzdHJpbmcpID0+XHJcbiAgICBjb25maWdHZXRCb3VuZHNCeVJlZ2lvbignR0xPQkFMJykgYXMgTGF0TG5nQm91bmRzRXhwcmVzc2lvbixcclxuICBpc0dlb2ZlbmNlUGxhY2VtZW50TW9kZTogZmFsc2UsXHJcbiAgc2V0SXNHZW9mZW5jZVBsYWNlbWVudE1vZGU6ICgpID0+IHt9LFxyXG59KTtcclxuXHJcbi8vIFByb3BzIGZvciB0aGUgY29udGV4dCBwcm92aWRlclxyXG5pbnRlcmZhY2UgRW5oYW5jZWRNYXBQcm92aWRlclByb3BzIHtcclxuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xyXG4gIG1hbnVmYWN0dXJlcnM6IFNlbGVjdE9wdGlvbltdO1xyXG4gIG9uRXJyb3I6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQ7XHJcbn1cclxuXHJcbi8vIEVuaGFuY2VkIE1hcCBQcm92aWRlciBjb21wb25lbnRcclxuZXhwb3J0IGNvbnN0IEVuaGFuY2VkTWFwUHJvdmlkZXI6IFJlYWN0LkZDPEVuaGFuY2VkTWFwUHJvdmlkZXJQcm9wcz4gPSAoe1xyXG4gIGNoaWxkcmVuLFxyXG4gIG1hbnVmYWN0dXJlcnMsXHJcbiAgb25FcnJvcixcclxufSkgPT4ge1xyXG4gIC8vIE1hcCBzdGF0ZVxyXG4gIGNvbnN0IFttYXBJbnN0YW5jZSwgc2V0TWFwSW5zdGFuY2VdID0gdXNlU3RhdGU8TC5NYXAgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBbem9vbUxldmVsLCBzZXRab29tTGV2ZWxdID0gdXNlU3RhdGU8bnVtYmVyPig2KTtcclxuXHJcbiAgLy8gQWlyY3JhZnQgc3RhdGVcclxuICBjb25zdCBbZGlzcGxheWVkQWlyY3JhZnQsIHNldERpc3BsYXllZEFpcmNyYWZ0XSA9IHVzZVN0YXRlPFxyXG4gICAgRXh0ZW5kZWRBaXJjcmFmdFtdXHJcbiAgPihbXSk7XHJcbiAgY29uc3QgW3NlbGVjdGVkQWlyY3JhZnQsIHNldFNlbGVjdGVkQWlyY3JhZnRdID1cclxuICAgIHVzZVN0YXRlPEV4dGVuZGVkQWlyY3JhZnQgfCBudWxsPihudWxsKTtcclxuXHJcbiAgLy8gRGF0YSBwZXJzaXN0ZW5jZSBzdGF0ZVxyXG4gIGNvbnN0IFtjYWNoZWRBaXJjcmFmdERhdGEsIHNldENhY2hlZEFpcmNyYWZ0RGF0YV0gPSB1c2VTdGF0ZTxcclxuICAgIFJlY29yZDxzdHJpbmcsIENhY2hlZEFpcmNyYWZ0RGF0YT5cclxuICA+KHt9KTtcclxuICBjb25zdCBbbGFzdFBlcnNpc3RlbmNlVXBkYXRlLCBzZXRMYXN0UGVyc2lzdGVuY2VVcGRhdGVdID0gdXNlU3RhdGU8XHJcbiAgICBudW1iZXIgfCBudWxsXHJcbiAgPihudWxsKTtcclxuXHJcbiAgY29uc3QgW2dlb2ZlbmNlQ2VudGVyLCBzZXRHZW9mZW5jZUNlbnRlcl0gPSB1c2VTdGF0ZTx7XHJcbiAgICBsYXQ6IG51bWJlcjtcclxuICAgIGxuZzogbnVtYmVyO1xyXG4gIH0gfCBudWxsPihudWxsKTtcclxuXHJcbiAgY29uc3QgW3NlbGVjdGVkUmVnaW9uLCBzZXRTZWxlY3RlZFJlZ2lvbl0gPSB1c2VTdGF0ZTxSZWdpb25Db2RlIHwgc3RyaW5nPihcclxuICAgIFJlZ2lvbkNvZGUuR0xPQkFMXHJcbiAgKTtcclxuXHJcbiAgLy8gRGVyaXZlZCBzdGF0ZSBmb3IgZ2VvZmVuY2UgY29vcmRpbmF0ZXNcclxuICBjb25zdCBnZW9mZW5jZUNvb3JkaW5hdGVzID0gdXNlTWVtbygoKSA9PiBnZW9mZW5jZUNlbnRlciwgW2dlb2ZlbmNlQ2VudGVyXSk7XHJcbiAgY29uc3QgW2dlb2ZlbmNlUmFkaXVzLCBzZXRHZW9mZW5jZVJhZGl1c10gPSB1c2VTdGF0ZTxudW1iZXIgfCBudWxsPigyNSk7IC8vIERlZmF1bHQgMjVrbSByYWRpdXNcclxuICBjb25zdCBbaXNHZW9mZW5jZUFjdGl2ZSwgc2V0SXNHZW9mZW5jZUFjdGl2ZV0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgY29uc3QgW2lzR2VvZmVuY2VQbGFjZW1lbnRNb2RlLCBzZXRJc0dlb2ZlbmNlUGxhY2VtZW50TW9kZV0gPVxyXG4gICAgdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG5cclxuICAvLyBBZGQgdGhpcyB0byB5b3VyIHN0YXRlIGRlY2xhcmF0aW9uc1xyXG4gIGNvbnN0IFthaXJjcmFmdFBvc2l0aW9ucywgc2V0QWlyY3JhZnRQb3NpdGlvbnNdID0gdXNlU3RhdGU8XHJcbiAgICBBaXJjcmFmdFBvc2l0aW9uW11cclxuICA+KFtdKTtcclxuICAvLyBUb2dnbGUgZ2VvZmVuY2UgYWN0aXZhdGlvblxyXG4gIGNvbnN0IHRvZ2dsZUdlb2ZlbmNlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgc2V0SXNHZW9mZW5jZUFjdGl2ZSgocHJldikgPT4gIXByZXYpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gQ2xlYXIgZ2VvZmVuY2VcclxuICBjb25zdCBjbGVhckdlb2ZlbmNlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgc2V0R2VvZmVuY2VDZW50ZXIobnVsbCk7XHJcbiAgICBzZXRJc0dlb2ZlbmNlQWN0aXZlKGZhbHNlKTtcclxuICAgIHJldHVybiB7fTsgLy8gUmV0dXJuIGFuIGVtcHR5IG9iamVjdCB0byBtYXRjaCB0aGUgZXhwZWN0ZWQgdHlwZVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gU2VsZWN0aW9uIHN0YXRlXHJcbiAgY29uc3QgW3NlbGVjdGVkTWFudWZhY3R1cmVyLCBzZXRTZWxlY3RlZE1hbnVmYWN0dXJlcl0gPSB1c2VTdGF0ZTxcclxuICAgIHN0cmluZyB8IG51bGxcclxuICA+KG51bGwpO1xyXG4gIGNvbnN0IFtzZWxlY3RlZE1vZGVsLCBzZXRTZWxlY3RlZE1vZGVsXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IFthY3RpdmVNb2RlbHMsIHNldEFjdGl2ZU1vZGVsc10gPSB1c2VTdGF0ZTxBaXJjcmFmdE1vZGVsW10+KFtdKTtcclxuICBjb25zdCBbdG90YWxBY3RpdmUsIHNldFRvdGFsQWN0aXZlXSA9IHVzZVN0YXRlPG51bWJlcj4oMCk7XHJcblxyXG4gIC8vIExvYWRpbmcgc3RhdGVcclxuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gIGNvbnN0IFtpc1JlZnJlc2hpbmcsIHNldElzUmVmcmVzaGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgY29uc3QgW3RyYWNraW5nU3RhdHVzLCBzZXRUcmFja2luZ1N0YXR1c10gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcclxuICBjb25zdCBbbGFzdFJlZnJlc2hlZCwgc2V0TGFzdFJlZnJlc2hlZF0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcclxuICAvLyBBZGQgdGhpcyB3aXRoIHlvdXIgb3RoZXIgc3RhdGUgdmFyaWFibGVzXHJcbiAgY29uc3QgW2xhc3RGdWxsUmVmcmVzaFRpbWUsIHNldExhc3RGdWxsUmVmcmVzaFRpbWVdID0gdXNlU3RhdGU8bnVtYmVyIHwgbnVsbD4oXHJcbiAgICBudWxsXHJcbiAgKTtcclxuICBjb25zdCBbaXNNYW51ZmFjdHVyZXJBcGlCbG9ja2VkLCBzZXRJc01hbnVmYWN0dXJlckFwaUJsb2NrZWRdID1cclxuICAgIHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuXHJcbiAgY29uc3QgW2ZpbHRlck1vZGUsIHNldEZpbHRlck1vZGVdID0gdXNlU3RhdGU8XHJcbiAgICAnbWFudWZhY3R1cmVyJyB8ICdnZW9mZW5jZScgfCAnYm90aCcgfCAncmVnaW9uJyB8ICdvd25lcidcclxuICA+KCdtYW51ZmFjdHVyZXInKTtcclxuICBjb25zdCBbYmxvY2tNYW51ZmFjdHVyZXJBcGlDYWxscywgc2V0QmxvY2tNYW51ZmFjdHVyZXJBcGlDYWxsc10gPVxyXG4gICAgdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG5cclxuICAvLyBGbGFnIHRvIHRyYWNrIGlmIHdlJ3JlIGluIGdlb2ZlbmNlIG1vZGVcclxuICBjb25zdCBbaXNHZW9mZW5jZU1vZGUsIHNldElzR2VvZmVuY2VNb2RlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuXHJcbiAgLy8gRGVmaW5lIHRoZSBmaWx0ZXIgZnVuY3Rpb24gY29ycmVjdGx5XHJcbiAgY29uc3QgZmlsdGVyQWlyY3JhZnRCeUdlb2ZlbmNlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgaWYgKCFnZW9mZW5jZUNlbnRlciB8fCAhaXNHZW9mZW5jZUFjdGl2ZSkge1xyXG4gICAgICByZXR1cm4gZGlzcGxheWVkQWlyY3JhZnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHNcclxuICAgIGNvbnN0IGNhbGN1bGF0ZURpc3RhbmNlID0gKFxyXG4gICAgICBsYXQxOiBudW1iZXIsXHJcbiAgICAgIGxvbjE6IG51bWJlcixcclxuICAgICAgbGF0MjogbnVtYmVyLFxyXG4gICAgICBsb24yOiBudW1iZXJcclxuICAgICk6IG51bWJlciA9PiB7XHJcbiAgICAgIGNvbnN0IFIgPSA2MzcxOyAvLyBSYWRpdXMgb2YgdGhlIGVhcnRoIGluIGttXHJcbiAgICAgIGNvbnN0IGRMYXQgPSBkZWcycmFkKGxhdDIgLSBsYXQxKTtcclxuICAgICAgY29uc3QgZExvbiA9IGRlZzJyYWQobG9uMiAtIGxvbjEpO1xyXG4gICAgICBjb25zdCBhID1cclxuICAgICAgICBNYXRoLnNpbihkTGF0IC8gMikgKiBNYXRoLnNpbihkTGF0IC8gMikgK1xyXG4gICAgICAgIE1hdGguY29zKGRlZzJyYWQobGF0MSkpICpcclxuICAgICAgICAgIE1hdGguY29zKGRlZzJyYWQobGF0MikpICpcclxuICAgICAgICAgIE1hdGguc2luKGRMb24gLyAyKSAqXHJcbiAgICAgICAgICBNYXRoLnNpbihkTG9uIC8gMik7XHJcbiAgICAgIGNvbnN0IGMgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxIC0gYSkpO1xyXG4gICAgICBjb25zdCBkaXN0YW5jZSA9IFIgKiBjOyAvLyBEaXN0YW5jZSBpbiBrbVxyXG4gICAgICByZXR1cm4gZGlzdGFuY2U7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGRlZzJyYWQgPSAoZGVnOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG4gICAgICByZXR1cm4gZGVnICogKE1hdGguUEkgLyAxODApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBGaWx0ZXIgYWlyY3JhZnQgd2l0aGluIHRoZSByYWRpdXNcclxuICAgIHJldHVybiBkaXNwbGF5ZWRBaXJjcmFmdC5maWx0ZXIoKGFpcmNyYWZ0KSA9PiB7XHJcbiAgICAgIGlmICghYWlyY3JhZnQubGF0aXR1ZGUgfHwgIWFpcmNyYWZ0LmxvbmdpdHVkZSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgLy8gQ2FsY3VsYXRlIGRpc3RhbmNlIGJldHdlZW4gYWlyY3JhZnQgYW5kIGdlb2ZlbmNlIGNlbnRlclxyXG4gICAgICBjb25zdCBkaXN0YW5jZSA9IGNhbGN1bGF0ZURpc3RhbmNlKFxyXG4gICAgICAgIGdlb2ZlbmNlQ2VudGVyLmxhdCxcclxuICAgICAgICBnZW9mZW5jZUNlbnRlci5sbmcsXHJcbiAgICAgICAgYWlyY3JhZnQubGF0aXR1ZGUsXHJcbiAgICAgICAgYWlyY3JhZnQubG9uZ2l0dWRlXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBSZXR1cm4gdHJ1ZSBpZiBhaXJjcmFmdCBpcyB3aXRoaW4gcmFkaXVzXHJcbiAgICAgIHJldHVybiBnZW9mZW5jZVJhZGl1cyAhPT0gbnVsbCAmJiBkaXN0YW5jZSA8PSBnZW9mZW5jZVJhZGl1cztcclxuICAgIH0pO1xyXG4gIH0sIFtkaXNwbGF5ZWRBaXJjcmFmdCwgZ2VvZmVuY2VDZW50ZXIsIGdlb2ZlbmNlUmFkaXVzLCBpc0dlb2ZlbmNlQWN0aXZlXSk7XHJcblxyXG4gIC8vIFRoZW4gc2VwYXJhdGVseSwgZGVmaW5lIGZpbHRlcmVkQWlyY3JhZnQgLSBkb24ndCB0cnkgdG8gZG8gYm90aCBpbiB0aGUgc2FtZSBmdW5jdGlvblxyXG4gIGNvbnN0IGZpbHRlcmVkQWlyY3JhZnQgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgIHJldHVybiBpc0dlb2ZlbmNlQWN0aXZlICYmIGdlb2ZlbmNlQ2VudGVyXHJcbiAgICAgID8gZmlsdGVyQWlyY3JhZnRCeUdlb2ZlbmNlKClcclxuICAgICAgOiBkaXNwbGF5ZWRBaXJjcmFmdDtcclxuICB9LCBbXHJcbiAgICBpc0dlb2ZlbmNlQWN0aXZlLFxyXG4gICAgZ2VvZmVuY2VDZW50ZXIsXHJcbiAgICBmaWx0ZXJBaXJjcmFmdEJ5R2VvZmVuY2UsXHJcbiAgICBkaXNwbGF5ZWRBaXJjcmFmdCxcclxuICBdKTtcclxuXHJcbiAgLy8gUmVmcyBmb3IgdHJhY2tpbmcgc3Vic2NyaXB0aW9uc1xyXG4gIGNvbnN0IHVuc3Vic2NyaWJlQWlyY3JhZnRSZWYgPSB1c2VSZWY8KCgpID0+IHZvaWQpIHwgbnVsbD4obnVsbCk7XHJcbiAgY29uc3QgdW5zdWJzY3JpYmVTdGF0dXNSZWYgPSB1c2VSZWY8KCgpID0+IHZvaWQpIHwgbnVsbD4obnVsbCk7XHJcbiAgLy8gTG9hZCBwZXJzaXN0ZWQgYWlyY3JhZnQgZGF0YSBvbiBtb3VudFxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBzYXZlZERhdGEgPSBsb2FkQWlyY3JhZnREYXRhKCk7XHJcbiAgICBpZiAoc2F2ZWREYXRhKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGBbRW5oYW5jZWRNYXBDb250ZXh0XSBMb2FkZWQgJHtPYmplY3Qua2V5cyhzYXZlZERhdGEpLmxlbmd0aH0gYWlyY3JhZnQgZnJvbSBwZXJzaXN0ZW5jZWBcclxuICAgICAgKTtcclxuICAgICAgc2V0Q2FjaGVkQWlyY3JhZnREYXRhKHNhdmVkRGF0YSk7XHJcbiAgICAgIHNldExhc3RQZXJzaXN0ZW5jZVVwZGF0ZShEYXRlLm5vdygpKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIFNhdmUgYWlyY3JhZnQgZGF0YSB3aGVuIGNhY2hlZEFpcmNyYWZ0RGF0YSBjaGFuZ2VzXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhjYWNoZWRBaXJjcmFmdERhdGEpLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYFtFbmhhbmNlZE1hcENvbnRleHRdIFNhdmluZyAke09iamVjdC5rZXlzKGNhY2hlZEFpcmNyYWZ0RGF0YSkubGVuZ3RofSBhaXJjcmFmdCB0byBwZXJzaXN0ZW5jZWBcclxuICAgICAgKTtcclxuICAgICAgc2F2ZUFpcmNyYWZ0RGF0YShjYWNoZWRBaXJjcmFmdERhdGEpO1xyXG4gICAgfVxyXG4gIH0sIFtjYWNoZWRBaXJjcmFmdERhdGFdKTtcclxuXHJcbiAgLy8gSW5pdGlhbGl6ZSB0cmFja2luZyBzZXJ2aWNlIGFuZCBzdWJzY3JpcHRpb25zXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIC8vIFN1YnNjcmliZSB0byB0cmFja2luZyB1cGRhdGVzIHRoYXQgaW5jbHVkZSB0cmFpbCBkYXRhXHJcbiAgICBjb25zdCBoYW5kbGVUcmFja2luZ1VwZGF0ZSA9IChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgLy8gT25seSB1cGRhdGUgZGlzcGxheWVkIGFpcmNyYWZ0IGlmIHdlJ3JlIG5vdCBpbiBnZW9mZW5jZSBtb2RlXHJcbiAgICAgIGlmICghaXNHZW9mZW5jZU1vZGUpIHtcclxuICAgICAgICB1cGRhdGVBaXJjcmFmdERpc3BsYXkoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBTdWJzY3JpYmUgdG8gYWlyY3JhZnQgdXBkYXRlc1xyXG4gICAgdW5zdWJzY3JpYmVBaXJjcmFmdFJlZi5jdXJyZW50ID1cclxuICAgICAgb3BlblNreVRyYWNraW5nU2VydmljZS5zdWJzY3JpYmUoaGFuZGxlVHJhY2tpbmdVcGRhdGUpO1xyXG5cclxuICAgIC8vIFN1YnNjcmliZSB0byBzdGF0dXMgdXBkYXRlc1xyXG4gICAgdW5zdWJzY3JpYmVTdGF0dXNSZWYuY3VycmVudCA9IG9wZW5Ta3lUcmFja2luZ1NlcnZpY2Uuc3Vic2NyaWJlVG9TdGF0dXMoXHJcbiAgICAgIChzdGF0dXM6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHNldFRyYWNraW5nU3RhdHVzKHN0YXR1cyk7XHJcbiAgICAgICAgc2V0SXNMb2FkaW5nKG9wZW5Ta3lUcmFja2luZ1NlcnZpY2UuaXNMb2FkaW5nKCkpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8vIElNUE9SVEFOVDogQ2xlYXIgYW55IGV4aXN0aW5nIHRyYWNraW5nIHdoZW4gY29tcG9uZW50IG1vdW50c1xyXG4gICAgb3BlblNreVRyYWNraW5nU2VydmljZS5zdG9wVHJhY2tpbmcoKTtcclxuXHJcbiAgICAvLyBDbGVhbnVwIG9uIHVubW91bnRcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGlmICh1bnN1YnNjcmliZUFpcmNyYWZ0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgICB1bnN1YnNjcmliZUFpcmNyYWZ0UmVmLmN1cnJlbnQoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodW5zdWJzY3JpYmVTdGF0dXNSZWYuY3VycmVudCkge1xyXG4gICAgICAgIHVuc3Vic2NyaWJlU3RhdHVzUmVmLmN1cnJlbnQoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9LCBbaXNHZW9mZW5jZU1vZGVdKTtcclxuXHJcbiAgLy8gVXBkYXRlIGFpcmNyYWZ0IGRhdGEgd2l0aCBwZXJzaXN0ZW5jZVxyXG4gIGNvbnN0IHVwZGF0ZUFpcmNyYWZ0RGF0YSA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKG5ld0FpcmNyYWZ0QXJyYXk6IEV4dGVuZGVkQWlyY3JhZnRbXSkgPT4ge1xyXG4gICAgICAvLyBDb252ZXJ0IHRvIGEgbWFwIGZvciBlYXNpZXIgcHJvY2Vzc2luZ1xyXG4gICAgICBjb25zdCBuZXdBaXJjcmFmdE1hcDogUmVjb3JkPHN0cmluZywgQ2FjaGVkQWlyY3JhZnREYXRhPiA9IHt9O1xyXG5cclxuICAgICAgbmV3QWlyY3JhZnRBcnJheS5mb3JFYWNoKChhaXJjcmFmdCkgPT4ge1xyXG4gICAgICAgIGlmIChhaXJjcmFmdC5JQ0FPMjQpIHtcclxuICAgICAgICAgIG5ld0FpcmNyYWZ0TWFwW2FpcmNyYWZ0LklDQU8yNF0gPSB7XHJcbiAgICAgICAgICAgIC4uLmFpcmNyYWZ0LFxyXG4gICAgICAgICAgICAvLyBFbnN1cmUgcmVxdWlyZWQgZmllbGRzIGZvciBDYWNoZWRBaXJjcmFmdERhdGEgYXJlIHByZXNlbnRcclxuICAgICAgICAgICAgSUNBTzI0OiBhaXJjcmFmdC5JQ0FPMjQsXHJcbiAgICAgICAgICAgIGxhdGl0dWRlOiBhaXJjcmFmdC5sYXRpdHVkZSB8fCAwLFxyXG4gICAgICAgICAgICBsb25naXR1ZGU6IGFpcmNyYWZ0LmxvbmdpdHVkZSB8fCAwLFxyXG4gICAgICAgICAgICBhbHRpdHVkZTogYWlyY3JhZnQuYWx0aXR1ZGUgfHwgMCxcclxuICAgICAgICAgICAgdmVsb2NpdHk6IGFpcmNyYWZ0LnZlbG9jaXR5IHx8IDAsXHJcbiAgICAgICAgICAgIGhlYWRpbmc6IGFpcmNyYWZ0LmhlYWRpbmcgfHwgMCxcclxuICAgICAgICAgICAgb25fZ3JvdW5kOiBhaXJjcmFmdC5vbl9ncm91bmQgfHwgZmFsc2UsXHJcbiAgICAgICAgICAgIGxhc3RfY29udGFjdDogYWlyY3JhZnQubGFzdF9jb250YWN0IHx8IERhdGUubm93KCksXHJcbiAgICAgICAgICAgIGxhc3RTZWVuOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICBsYXN0VXBkYXRlZDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgIH0gYXMgQ2FjaGVkQWlyY3JhZnREYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBNZXJnZSB3aXRoIGV4aXN0aW5nIGNhY2hlZCBkYXRhIHRvIHByZXNlcnZlIGZpZWxkc1xyXG4gICAgICBzZXRDYWNoZWRBaXJjcmFmdERhdGEoKGN1cnJlbnRDYWNoZSkgPT5cclxuICAgICAgICBtZXJnZUFpcmNyYWZ0RGF0YShjdXJyZW50Q2FjaGUsIG5ld0FpcmNyYWZ0TWFwKVxyXG4gICAgICApO1xyXG4gICAgICBzZXRMYXN0UGVyc2lzdGVuY2VVcGRhdGUoRGF0ZS5ub3coKSk7XHJcblxyXG4gICAgICAvLyBJZiB0aGUgc2VsZWN0ZWQgYWlyY3JhZnQgaXMgdXBkYXRlZCwgdXBkYXRlIHRoZSBzZWxlY3Rpb25cclxuICAgICAgaWYgKHNlbGVjdGVkQWlyY3JhZnQgJiYgbmV3QWlyY3JhZnRNYXBbc2VsZWN0ZWRBaXJjcmFmdC5JQ0FPMjRdKSB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZEFpcmNyYWZ0ID0ge1xyXG4gICAgICAgICAgLi4uc2VsZWN0ZWRBaXJjcmFmdCxcclxuICAgICAgICAgIC4uLm5ld0FpcmNyYWZ0TWFwW3NlbGVjdGVkQWlyY3JhZnQuSUNBTzI0XSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNldFNlbGVjdGVkQWlyY3JhZnQodXBkYXRlZEFpcmNyYWZ0IGFzIEV4dGVuZGVkQWlyY3JhZnQpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgW3NlbGVjdGVkQWlyY3JhZnRdXHJcbiAgKTtcclxuXHJcbiAgLy8gQ2xlYXIgcGVyc2lzdGVuY2UgY2FjaGVcclxuICBjb25zdCBjbGVhckNhY2hlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgY2xlYXJBaXJjcmFmdERhdGEoKTtcclxuICAgIHNldENhY2hlZEFpcmNyYWZ0RGF0YSh7fSk7XHJcbiAgICBzZXRMYXN0UGVyc2lzdGVuY2VVcGRhdGUobnVsbCk7XHJcbiAgICBzZXRUcmFja2luZ1N0YXR1cygnQ2FjaGUgY2xlYXJlZCcpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gVXBkYXRlIGFpcmNyYWZ0IGRpc3BsYXkgYmFzZWQgb24gc2VsZWN0ZWQgTU9ERUxcclxuICBjb25zdCB1cGRhdGVBaXJjcmFmdERpc3BsYXkgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAvLyBHZXQgZXh0ZW5kZWQgYWlyY3JhZnQgYmFzZWQgb24gc2VsZWN0ZWQgTU9ERUxcclxuICAgIGNvbnN0IGV4dGVuZGVkQWlyY3JhZnQgPSBvcGVuU2t5VHJhY2tpbmdTZXJ2aWNlLmdldEV4dGVuZGVkQWlyY3JhZnQoXHJcbiAgICAgIHNlbGVjdGVkTW9kZWwgfHwgdW5kZWZpbmVkXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEdldCBNT0RFTCBzdGF0cyBmcm9tIHRoZSBzZXJ2aWNlXHJcbiAgICBjb25zdCB7IG1vZGVscywgdG90YWxBY3RpdmU6IHRvdGFsIH0gPVxyXG4gICAgICBvcGVuU2t5VHJhY2tpbmdTZXJ2aWNlLmdldE1vZGVsU3RhdHMoKTtcclxuXHJcbiAgICAvLyBFbmhhbmNlIGFpcmNyYWZ0IGRhdGEgd2l0aCBwZXJzaXN0ZW5jZVxyXG4gICAgdXBkYXRlQWlyY3JhZnREYXRhKGV4dGVuZGVkQWlyY3JhZnQgYXMgRXh0ZW5kZWRBaXJjcmFmdFtdKTtcclxuXHJcbiAgICAvLyBPbmx5IHVwZGF0ZSBkaXNwbGF5ZWQgYWlyY3JhZnQgaWYgd2UncmUgbm90IGluIGdlb2ZlbmNlIG1vZGVcclxuICAgIGlmICghaXNHZW9mZW5jZU1vZGUpIHtcclxuICAgICAgc2V0RGlzcGxheWVkQWlyY3JhZnQoZXh0ZW5kZWRBaXJjcmFmdCBhcyBFeHRlbmRlZEFpcmNyYWZ0W10pO1xyXG4gICAgICBzZXRBY3RpdmVNb2RlbHMobW9kZWxzKTtcclxuICAgICAgc2V0VG90YWxBY3RpdmUodG90YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldElzTG9hZGluZyhvcGVuU2t5VHJhY2tpbmdTZXJ2aWNlLmlzTG9hZGluZygpKTtcclxuICB9LCBbc2VsZWN0ZWRNb2RlbCwgdXBkYXRlQWlyY3JhZnREYXRhLCBpc0dlb2ZlbmNlTW9kZV0pO1xyXG5cclxuICAvLyBVcGRhdGUgZGlzcGxheSB3aGVuIE1PREVMIHNlbGVjdGlvbiBjaGFuZ2VzXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHVwZGF0ZUFpcmNyYWZ0RGlzcGxheSgpO1xyXG4gIH0sIFtzZWxlY3RlZE1vZGVsLCB1cGRhdGVBaXJjcmFmdERpc3BsYXldKTtcclxuXHJcbiAgLy8gTmV3IGZ1bmN0aW9uIHRvIGhhbmRsZSBnZW9mZW5jZSBhaXJjcmFmdCB1cGRhdGVzXHJcbiAgY29uc3QgdXBkYXRlR2VvZmVuY2VBaXJjcmFmdCA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKGdlb2ZlbmNlQWlyY3JhZnQ6IEV4dGVuZGVkQWlyY3JhZnRbXSkgPT4ge1xyXG4gICAgICAvLyBNYXJrIHRoYXQgd2UncmUgaW4gZ2VvZmVuY2UgbW9kZVxyXG4gICAgICBzZXRJc0dlb2ZlbmNlTW9kZSh0cnVlKTtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGBbRW5oYW5jZWRNYXBDb250ZXh0XSBVcGRhdGluZyAke2dlb2ZlbmNlQWlyY3JhZnQubGVuZ3RofSBhaXJjcmFmdCBmcm9tIGdlb2ZlbmNlYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIHRoZSBjYWNoZWQgZGF0YSAoc2FtZSBhcyByZWd1bGFyIHVwZGF0ZXMpXHJcbiAgICAgIHVwZGF0ZUFpcmNyYWZ0RGF0YShnZW9mZW5jZUFpcmNyYWZ0KTtcclxuXHJcbiAgICAgIC8vIEFsc28gZGlyZWN0bHkgdXBkYXRlIHRoZSBkaXNwbGF5ZWQgYWlyY3JhZnRcclxuICAgICAgc2V0RGlzcGxheWVkQWlyY3JhZnQoZ2VvZmVuY2VBaXJjcmFmdCk7XHJcblxyXG4gICAgICAvLyBVcGRhdGUgc3RhdHNcclxuICAgICAgc2V0VG90YWxBY3RpdmUoZ2VvZmVuY2VBaXJjcmFmdC5sZW5ndGgpO1xyXG5cclxuICAgICAgLy8gRXh0cmFjdCBNT0RFTCBzdGF0cyBmb3IgdGhlIHNpZGViYXJcclxuICAgICAgY29uc3QgbW9kZWxDb3VudHMgPSBnZW9mZW5jZUFpcmNyYWZ0LnJlZHVjZShcclxuICAgICAgICAoYWNjLCBhaXJjcmFmdCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgTU9ERUwgPSBhaXJjcmFmdC5NT0RFTCB8fCBhaXJjcmFmdC5UWVBFX0FJUkNSQUZUIHx8ICdVbmtub3duJztcclxuICAgICAgICAgIGlmICghYWNjW01PREVMXSkge1xyXG4gICAgICAgICAgICBhY2NbTU9ERUxdID0ge1xyXG4gICAgICAgICAgICAgIE1PREVMLFxyXG4gICAgICAgICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgICAgICAgIE1BTlVGQUNUVVJFUjogYWlyY3JhZnQuTUFOVUZBQ1RVUkVSIHx8ICdVbmtub3duJyxcclxuICAgICAgICAgICAgICAvLyBBZGQgcmVxdWlyZWQgcHJvcGVydGllcyBmb3IgQWlyY3JhZnRNb2RlbFxyXG4gICAgICAgICAgICAgIGxhYmVsOiBNT0RFTCxcclxuICAgICAgICAgICAgICBhY3RpdmVDb3VudDogMCxcclxuICAgICAgICAgICAgICB0b3RhbENvdW50OiAwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYWNjW01PREVMXS5jb3VudCsrO1xyXG4gICAgICAgICAgYWNjW01PREVMXS5hY3RpdmVDb3VudCsrO1xyXG4gICAgICAgICAgYWNjW01PREVMXS50b3RhbENvdW50Kys7XHJcbiAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge30gYXMgUmVjb3JkPHN0cmluZywgQWlyY3JhZnRNb2RlbD5cclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIENvbnZlcnQgdG8gYXJyYXkgZm9yIHRoZSBhY3RpdmVNb2RlbHMgc3RhdGVcclxuICAgICAgY29uc3QgbW9kZWxBcnJheSA9IE9iamVjdC52YWx1ZXMobW9kZWxDb3VudHMpLm1hcCgoTU9ERUwpID0+ICh7XHJcbiAgICAgICAgTU9ERUw6IE1PREVMLk1PREVMLFxyXG4gICAgICAgIGNvdW50OiBNT0RFTC5jb3VudCxcclxuICAgICAgICBNQU5VRkFDVFVSRVI6IE1PREVMLk1BTlVGQUNUVVJFUixcclxuICAgICAgICAvLyBBZGQgcmVxdWlyZWQgcHJvcGVydGllcyBmb3IgQWlyY3JhZnRNb2RlbCB0eXBlXHJcbiAgICAgICAgbGFiZWw6IE1PREVMLk1PREVMLFxyXG4gICAgICAgIGFjdGl2ZUNvdW50OiBNT0RFTC5jb3VudCxcclxuICAgICAgICB0b3RhbENvdW50OiBNT0RFTC5jb3VudCxcclxuICAgICAgfSkpO1xyXG5cclxuICAgICAgc2V0QWN0aXZlTW9kZWxzKG1vZGVsQXJyYXkpO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIHRoZSBsYXN0IHJlZnJlc2hlZCB0aW1lc3RhbXBcclxuICAgICAgc2V0TGFzdFJlZnJlc2hlZChuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZygpKTtcclxuICAgIH0sXHJcbiAgICBbdXBkYXRlQWlyY3JhZnREYXRhXVxyXG4gICk7XHJcblxyXG4gIC8vIEhhbmRsZSBNQU5VRkFDVFVSRVIgc2VsZWN0aW9uXHJcbiAgLy8gSW4geW91ciBFbmhhbmNlZE1hcENvbnRleHQudHN4IC0gbW9kaWZ5IHRoZSBzZWxlY3RNYW51ZmFjdHVyZXIgZnVuY3Rpb25cclxuXHJcbiAgY29uc3Qgc2VsZWN0TWFudWZhY3R1cmVyID0gYXN5bmMgKE1BTlVGQUNUVVJFUjogc3RyaW5nIHwgbnVsbCkgPT4ge1xyXG4gICAgLy8gRXhpdCBnZW9mZW5jZSBtb2RlIHdoZW4gc2VsZWN0aW5nIGEgTUFOVUZBQ1RVUkVSXHJcbiAgICBzZXRJc0dlb2ZlbmNlTW9kZShmYWxzZSk7XHJcbiAgICBzZXRTZWxlY3RlZE1hbnVmYWN0dXJlcihNQU5VRkFDVFVSRVIpO1xyXG4gICAgc2V0U2VsZWN0ZWRNb2RlbChudWxsKTtcclxuICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuICAgIHNldExhc3RSZWZyZXNoZWQobnVsbCk7XHJcblxyXG4gICAgLy8gQ2xlYXIgcHJldmlvdXMgZGF0YVxyXG4gICAgc2V0RGlzcGxheWVkQWlyY3JhZnQoW10pO1xyXG4gICAgc2V0QWN0aXZlTW9kZWxzKFtdKTtcclxuICAgIHNldFRvdGFsQWN0aXZlKDApO1xyXG5cclxuICAgIC8vIElmIG51bGwsIGp1c3QgZXhpdFxyXG4gICAgaWYgKE1BTlVGQUNUVVJFUiA9PT0gbnVsbCkge1xyXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgd2UncmUgYmxvY2tpbmcgQVBJIGNhbGxzLCBleGl0IGVhcmx5XHJcbiAgICBpZiAoaXNNYW51ZmFjdHVyZXJBcGlCbG9ja2VkKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGBbRW5oYW5jZWRNYXBDb250ZXh0XSBBUEkgY2FsbHMgYmxvY2tlZCBmb3IgbWFudWZhY3R1cmVyOiAke01BTlVGQUNUVVJFUn1gXHJcbiAgICAgICk7XHJcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBTdGFydCB0cmFja2luZyB3aXRoIGEgcHJvZ3Jlc3MgaGFuZGxlclxyXG4gICAgICBzZXRUcmFja2luZ1N0YXR1cyhgTG9hZGluZyBhaXJjcmFmdCBmb3IgJHtNQU5VRkFDVFVSRVJ9Li4uYCk7XHJcblxyXG4gICAgICAvLyBVc2UgdGhlIGV4aXN0aW5nIHNlcnZpY2UgYnV0IHdpdGggYSBwcm9ncmVzcyBjYWxsYmFja1xyXG4gICAgICAvLyBJbiBFbmhhbmNlZE1hcENvbnRleHQudHN4LCBtb2RpZnkgeW91ciBjYWxsYmFjayB0byBoYW5kbGUgYm90aCB0eXBlczpcclxuXHJcbiAgICAgIGF3YWl0IG9wZW5Ta3lUcmFja2luZ1NlcnZpY2UudHJhY2tNYW51ZmFjdHVyZXJXaXRoUHJvZ3Jlc3MoXHJcbiAgICAgICAgTUFOVUZBQ1RVUkVSLFxyXG4gICAgICAgIChwcm9ncmVzcykgPT4ge1xyXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSB0cmFja2luZyBzdGF0dXMgbWVzc2FnZVxyXG4gICAgICAgICAgaWYgKHByb2dyZXNzLm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgc2V0VHJhY2tpbmdTdGF0dXMocHJvZ3Jlc3MubWVzc2FnZSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gVXBkYXRlIGRpc3BsYXllZCBhaXJjcmFmdCBhcyB0aGV5J3JlIGxvYWRlZFxyXG4gICAgICAgICAgaWYgKHByb2dyZXNzLmFpcmNyYWZ0KSB7XHJcbiAgICAgICAgICAgIC8vIENhc3QgdGhlIGFpcmNyYWZ0IGFycmF5IHRvIEV4dGVuZGVkQWlyY3JhZnRbXSBzaW5jZSBvdXIgY29udGV4dCB1c2VzIHRoYXQgdHlwZVxyXG4gICAgICAgICAgICBzZXREaXNwbGF5ZWRBaXJjcmFmdChwcm9ncmVzcy5haXJjcmFmdCBhcyBFeHRlbmRlZEFpcmNyYWZ0W10pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFVwZGF0ZSBtb2RlbCBzdGF0c1xyXG4gICAgICAgICAgaWYgKHByb2dyZXNzLm1vZGVscykge1xyXG4gICAgICAgICAgICBzZXRBY3RpdmVNb2RlbHMocHJvZ3Jlc3MubW9kZWxzKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgY291bnRcclxuICAgICAgICAgIGlmIChwcm9ncmVzcy50b3RhbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHNldFRvdGFsQWN0aXZlKHByb2dyZXNzLnRvdGFsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBzZXRMYXN0UmVmcmVzaGVkKG5ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCkpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgb25FcnJvcihcclxuICAgICAgICBgRXJyb3IgdHJhY2tpbmcgbWFudWZhY3R1cmVyOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWBcclxuICAgICAgKTtcclxuICAgICAgc2V0VHJhY2tpbmdTdGF0dXMoJ0Vycm9yIGxvYWRpbmcgYWlyY3JhZnQgZGF0YScpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBIYW5kbGUgTU9ERUwgc2VsZWN0aW9uXHJcbiAgY29uc3Qgc2VsZWN0TW9kZWwgPSAoTU9ERUw6IHN0cmluZyB8IG51bGwpID0+IHtcclxuICAgIHNldFNlbGVjdGVkTW9kZWwoTU9ERUwpO1xyXG4gIH07XHJcblxyXG4gIC8vIEhhbmRsZSBhaXJjcmFmdCBzZWxlY3Rpb25cclxuICBjb25zdCBzZWxlY3RBaXJjcmFmdCA9IChhaXJjcmFmdDogRXh0ZW5kZWRBaXJjcmFmdCB8IG51bGwpID0+IHtcclxuICAgIHNldFNlbGVjdGVkQWlyY3JhZnQoYWlyY3JhZnQpO1xyXG5cclxuICAgIC8vIElmIHNlbGVjdGluZyBhbiBhaXJjcmFmdCwgY2hlY2sgaWYgd2UgaGF2ZSBjYWNoZWQgZGF0YSB0byBlbmhhbmNlIGl0XHJcbiAgICBpZiAoYWlyY3JhZnQgJiYgYWlyY3JhZnQuSUNBTzI0ICYmIGNhY2hlZEFpcmNyYWZ0RGF0YVthaXJjcmFmdC5JQ0FPMjRdKSB7XHJcbiAgICAgIGNvbnN0IGVuaGFuY2VkQWlyY3JhZnQgPSB7XHJcbiAgICAgICAgLi4uYWlyY3JhZnQsXHJcbiAgICAgICAgLi4uY2FjaGVkQWlyY3JhZnREYXRhW2FpcmNyYWZ0LklDQU8yNF0sXHJcbiAgICAgIH07XHJcbiAgICAgIHNldFNlbGVjdGVkQWlyY3JhZnQoZW5oYW5jZWRBaXJjcmFmdCBhcyBFeHRlbmRlZEFpcmNyYWZ0KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBJZiB5b3UgZG9uJ3QgYWxyZWFkeSBoYXZlIGl0LCBhZGQgdGhpcyBmdW5jdGlvbiB0byBleHBvc2UgdGhlIG1hcCdzIGdldEJvdW5kc0J5UmVnaW9uIGZ1bmN0aW9uXHJcbiAgLy8gQ3JlYXRlIGEgd3JhcHBlZCBmdW5jdGlvbiB0aGF0IGNhbGxzIHlvdXIgbWFwIGNvbmZpZyBmdW5jdGlvblxyXG4gIGNvbnN0IGhhbmRsZUdldEJvdW5kc0J5UmVnaW9uID0gdXNlQ2FsbGJhY2soXHJcbiAgICAocmVnaW9uOiBzdHJpbmcpOiBMYXRMbmdCb3VuZHNFeHByZXNzaW9uID0+IHtcclxuICAgICAgcmV0dXJuIGNvbmZpZ0dldEJvdW5kc0J5UmVnaW9uKHJlZ2lvbik7XHJcbiAgICB9LFxyXG4gICAgW11cclxuICApO1xyXG5cclxuICAvLyBSZXNldCBhbGwgc2VsZWN0aW9uc1xyXG4gIGNvbnN0IHJlc2V0ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgc2VsZWN0TWFudWZhY3R1cmVyKG51bGwpO1xyXG4gIH07XHJcblxyXG4gIC8vIE1ldGhvZCB0byByZWZyZXNoIG9ubHkgdGhlIHBvc2l0aW9ucyBvZiBhY3RpdmUgYWlyY3JhZnRcclxuICBjb25zdCByZWZyZXNoUG9zaXRpb25zID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgaWYgKGlzUmVmcmVzaGluZyB8fCAoIXNlbGVjdGVkTWFudWZhY3R1cmVyICYmICFpc0dlb2ZlbmNlTW9kZSkpIHJldHVybjtcclxuXHJcbiAgICBzZXRJc1JlZnJlc2hpbmcodHJ1ZSk7XHJcbiAgICBzZXRUcmFja2luZ1N0YXR1cygnVXBkYXRpbmcgYWlyY3JhZnQgcG9zaXRpb25zLi4uJyk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gQ2FsbCB0aGUgc2VydmljZVxyXG4gICAgICBhd2FpdCBvcGVuU2t5VHJhY2tpbmdTZXJ2aWNlLnJlZnJlc2hQb3NpdGlvbnNPbmx5KCk7XHJcblxyXG4gICAgICBzZXRMYXN0UmVmcmVzaGVkKG5ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCkpO1xyXG4gICAgICBzZXRUcmFja2luZ1N0YXR1cyhcclxuICAgICAgICBgUG9zaXRpb25zIHVwZGF0ZWQgZm9yICR7ZGlzcGxheWVkQWlyY3JhZnQubGVuZ3RofSBhaXJjcmFmdGBcclxuICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIG9uRXJyb3IoXHJcbiAgICAgICAgYEVycm9yIHJlZnJlc2hpbmcgcG9zaXRpb25zOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWBcclxuICAgICAgKTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHNldElzUmVmcmVzaGluZyhmYWxzZSk7XHJcbiAgICAgIH0sIDUwMCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gTWV0aG9kIGZvciBmdWxsIHRyYWNraW5nIHJlZnJlc2hcclxuICBjb25zdCBmdWxsUmVmcmVzaCA9IGFzeW5jICgpID0+IHtcclxuICAgIGlmICgoIXNlbGVjdGVkTWFudWZhY3R1cmVyICYmICFpc0dlb2ZlbmNlTW9kZSkgfHwgaXNSZWZyZXNoaW5nKSByZXR1cm47XHJcblxyXG4gICAgLy8gU2V0IGEgdGltZW91dCB0byBmb3JjZSBleGl0IGZyb20gbG9hZGluZyBzdGF0ZSBhZnRlciAxMCBzZWNvbmRzXHJcbiAgICAvLyBUaGlzIGlzIGEgc2FmZXR5IG1lY2hhbmlzbVxyXG4gICAgY29uc3Qgc2FmZXR5VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBzZXRJc1JlZnJlc2hpbmcoZmFsc2UpO1xyXG4gICAgICBzZXRUcmFja2luZ1N0YXR1cygnUmVmcmVzaCB0aW1lZCBvdXQnKTtcclxuICAgIH0sIDEwMDAwKTtcclxuXHJcbiAgICBzZXRJc1JlZnJlc2hpbmcodHJ1ZSk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gR2V0IGN1cnJlbnRseSB0cmFja2VkIGFpcmNyYWZ0XHJcbiAgICAgIGNvbnN0IGFsbFRyYWNrZWRBaXJjcmFmdCA9IG9wZW5Ta3lUcmFja2luZ1NlcnZpY2UuZ2V0VHJhY2tlZEFpcmNyYWZ0KCk7XHJcblxyXG4gICAgICAvLyBHZXQgYWN0aXZlIGFpcmNyYWZ0ICh0aG9zZSB3aXRoIHBvc2l0aW9uIGRhdGEpXHJcbiAgICAgIGNvbnN0IGFjdGl2ZUFpcmNyYWZ0ID0gYWxsVHJhY2tlZEFpcmNyYWZ0LmZpbHRlcihcclxuICAgICAgICAoYWlyY3JhZnQpID0+IGFpcmNyYWZ0LklDQU8yNCAmJiBhaXJjcmFmdC5sYXRpdHVkZSAmJiBhaXJjcmFmdC5sb25naXR1ZGVcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IG5lZWRzRnVsbFJlZnJlc2ggPVxyXG4gICAgICAgICFsYXN0RnVsbFJlZnJlc2hUaW1lIHx8IERhdGUubm93KCkgLSBsYXN0RnVsbFJlZnJlc2hUaW1lID4gMzYwMDAwMDtcclxuXHJcbiAgICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XHJcblxyXG4gICAgICBpZiAoYWN0aXZlQWlyY3JhZnQubGVuZ3RoID09PSAwIHx8IG5lZWRzRnVsbFJlZnJlc2gpIHtcclxuICAgICAgICAvLyBEbyBhIGZ1bGwgcmVmcmVzaFxyXG4gICAgICAgIHNldFRyYWNraW5nU3RhdHVzKCdQZXJmb3JtaW5nIGZ1bGwgcmVmcmVzaC4uLicpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgYXdhaXQgb3BlblNreVRyYWNraW5nU2VydmljZS5yZWZyZXNoTm93KCk7XHJcbiAgICAgICAgICBzZXRMYXN0RnVsbFJlZnJlc2hUaW1lKERhdGUubm93KCkpO1xyXG4gICAgICAgICAgc3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIC8vIFNpbGVudGx5IGhhbmRsZSB0aGlzIGVycm9yXHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0Z1bGwgcmVmcmVzaCBmYWlsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gRG8gYW4gb3B0aW1pemVkIHJlZnJlc2hcclxuICAgICAgICBjb25zdCBhY3RpdmVJY2FvcyA9IGFjdGl2ZUFpcmNyYWZ0XHJcbiAgICAgICAgICAubWFwKChhaXJjcmFmdCkgPT4gYWlyY3JhZnQuSUNBTzI0KVxyXG4gICAgICAgICAgLmZpbHRlcihCb29sZWFuKSBhcyBzdHJpbmdbXTtcclxuXHJcbiAgICAgICAgaWYgKGFjdGl2ZUljYW9zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHNldFRyYWNraW5nU3RhdHVzKFxyXG4gICAgICAgICAgICBgUmVmcmVzaGluZyAke2FjdGl2ZUljYW9zLmxlbmd0aH0gYWN0aXZlIGFpcmNyYWZ0Li4uYFxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCBvcGVuU2t5VHJhY2tpbmdTZXJ2aWNlLnJlZnJlc2hTcGVjaWZpY0FpcmNyYWZ0KGFjdGl2ZUljYW9zKTtcclxuICAgICAgICAgICAgc3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAvLyBUcnkgZmFsbGluZyBiYWNrIHRvIGEgZnVsbCByZWZyZXNoXHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignT3B0aW1pemVkIHJlZnJlc2ggZmFpbGVkLCB0cnlpbmcgZnVsbCByZWZyZXNoJyk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgYXdhaXQgb3BlblNreVRyYWNraW5nU2VydmljZS5yZWZyZXNoTm93KCk7XHJcbiAgICAgICAgICAgICAgc2V0TGFzdEZ1bGxSZWZyZXNoVGltZShEYXRlLm5vdygpKTtcclxuICAgICAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZmFsbGJhY2tFcnJvcikge1xyXG4gICAgICAgICAgICAgIC8vIFNpbGVudGx5IGhhbmRsZSB0aGlzIGVycm9yXHJcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdGYWxsYmFjayByZWZyZXNoIGZhaWxlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjbGVhclRpbWVvdXQoc2FmZXR5VGltZW91dCk7XHJcblxyXG4gICAgICAvLyBPbmx5IHVwZGF0ZSBpZiB0aGUgcmVmcmVzaCB3YXMgc3VjY2Vzc2Z1bFxyXG4gICAgICBpZiAoc3VjY2Vzcykge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRDb3VudCA9IG9wZW5Ta3lUcmFja2luZ1NlcnZpY2UuZ2V0VHJhY2tlZEFpcmNyYWZ0KCkubGVuZ3RoO1xyXG4gICAgICAgIHNldFRyYWNraW5nU3RhdHVzKGBSZWZyZXNoIGNvbXBsZXRlZCB3aXRoICR7Y3VycmVudENvdW50fSBhaXJjcmFmdGApO1xyXG4gICAgICAgIHNldExhc3RSZWZyZXNoZWQobmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0VHJhY2tpbmdTdGF0dXMoJ1JlZnJlc2ggZmFpbGVkJyk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChzYWZldHlUaW1lb3V0KTtcclxuXHJcbiAgICAgIC8vIE9ubHkgc2hvdyBlcnJvcnMgdG8gdGhlIHVzZXIgaWYgdGhleSBhcHBlYXIgdG8gYmUgc2lnbmlmaWNhbnRcclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZSAhPT0gJ2Fib3J0ZWQnKSB7XHJcbiAgICAgICAgb25FcnJvcihgRXJyb3IgZHVyaW5nIHJlZnJlc2g6ICR7ZXJyb3IubWVzc2FnZSB8fCAnVW5rbm93biBlcnJvcid9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNldFRyYWNraW5nU3RhdHVzKCdFcnJvciBkdXJpbmcgcmVmcmVzaCcpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHNhZmV0eVRpbWVvdXQpO1xyXG4gICAgICBzZXRJc1JlZnJlc2hpbmcoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGNsZWFyR2VvZmVuY2VEYXRhID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgLy8gUmVzZXQgZ2VvZmVuY2UgbW9kZSBmbGFnXHJcbiAgICBzZXRJc0dlb2ZlbmNlTW9kZShmYWxzZSk7XHJcblxyXG4gICAgLy8gQ2xlYXIgZGlzcGxheWVkIGFpcmNyYWZ0XHJcbiAgICBzZXREaXNwbGF5ZWRBaXJjcmFmdChbXSk7XHJcbiAgICBzZXRBY3RpdmVNb2RlbHMoW10pO1xyXG4gICAgc2V0VG90YWxBY3RpdmUoMCk7XHJcblxyXG4gICAgLy8gSWYgdGhlcmUgd2FzIGEgcHJldmlvdXNseSBzZWxlY3RlZCBNQU5VRkFDVFVSRVIsIHdlIGNhbiByZXN0b3JlIGl0XHJcbiAgICBpZiAoc2VsZWN0ZWRNYW51ZmFjdHVyZXIpIHtcclxuICAgICAgLy8gU21hbGwgZGVsYXkgdG8gZW5zdXJlIHN0YXRlIHVwZGF0ZXMgcHJvcGVybHlcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgb3BlblNreVRyYWNraW5nU2VydmljZS50cmFja01hbnVmYWN0dXJlcihzZWxlY3RlZE1hbnVmYWN0dXJlcik7XHJcbiAgICAgIH0sIDEwMCk7XHJcbiAgICB9XHJcbiAgfSwgW3NlbGVjdGVkTWFudWZhY3R1cmVyXSk7XHJcblxyXG4gIC8vIENyZWF0ZSBjb250ZXh0IHZhbHVlXHJcbiAgY29uc3QgY29udGV4dFZhbHVlOiBFbmhhbmNlZE1hcENvbnRleHRUeXBlID0ge1xyXG4gICAgbWFwSW5zdGFuY2UsXHJcbiAgICBzZXRNYXBJbnN0YW5jZSxcclxuICAgIHpvb21MZXZlbCxcclxuICAgIHNldFpvb21MZXZlbCxcclxuXHJcbiAgICBkaXNwbGF5ZWRBaXJjcmFmdCxcclxuICAgIHNlbGVjdGVkQWlyY3JhZnQsXHJcbiAgICBzZWxlY3RBaXJjcmFmdCxcclxuXHJcbiAgICAvLyBEYXRhIHBlcnNpc3RlbmNlXHJcbiAgICBjYWNoZWRBaXJjcmFmdERhdGEsXHJcbiAgICB1cGRhdGVBaXJjcmFmdERhdGEsXHJcbiAgICBsYXN0UGVyc2lzdGVuY2VVcGRhdGUsXHJcblxyXG4gICAgc2VsZWN0ZWRNYW51ZmFjdHVyZXIsXHJcbiAgICBzZWxlY3RlZE1vZGVsLFxyXG4gICAgYWN0aXZlTW9kZWxzLFxyXG4gICAgdG90YWxBY3RpdmUsXHJcblxyXG4gICAgaXNMb2FkaW5nLFxyXG4gICAgaXNSZWZyZXNoaW5nLFxyXG4gICAgdHJhY2tpbmdTdGF0dXMsXHJcbiAgICBsYXN0UmVmcmVzaGVkLFxyXG5cclxuICAgIHNlbGVjdE1hbnVmYWN0dXJlcixcclxuICAgIHNlbGVjdE1vZGVsLFxyXG4gICAgcmVzZXQsXHJcbiAgICByZWZyZXNoUG9zaXRpb25zLFxyXG4gICAgZnVsbFJlZnJlc2gsXHJcbiAgICBjbGVhckNhY2hlLFxyXG4gICAgY2xlYXJHZW9mZW5jZURhdGEsXHJcbiAgICB1cGRhdGVHZW9mZW5jZUFpcmNyYWZ0LFxyXG4gICAgZmlsdGVyZWRBaXJjcmFmdCxcclxuXHJcbiAgICBmaWx0ZXJNb2RlLFxyXG4gICAgc2V0RmlsdGVyTW9kZSxcclxuICAgIGJsb2NrTWFudWZhY3R1cmVyQXBpQ2FsbHMsXHJcbiAgICBzZXRCbG9ja01hbnVmYWN0dXJlckFwaUNhbGxzLFxyXG4gICAgaXNNYW51ZmFjdHVyZXJBcGlCbG9ja2VkLFxyXG4gICAgc2V0SXNNYW51ZmFjdHVyZXJBcGlCbG9ja2VkLFxyXG5cclxuICAgIC8vIEdlb2ZlbmNpbmcgcHJvcGVydGllc1xyXG4gICAgZ2VvZmVuY2VDZW50ZXIsXHJcbiAgICBnZW9mZW5jZVJhZGl1cyxcclxuICAgIGlzR2VvZmVuY2VBY3RpdmUsXHJcbiAgICBnZW9mZW5jZUNvb3JkaW5hdGVzLFxyXG4gICAgc2V0R2VvZmVuY2VDZW50ZXIsXHJcbiAgICBzZXRHZW9mZW5jZVJhZGl1cyxcclxuICAgIHRvZ2dsZUdlb2ZlbmNlLFxyXG4gICAgY2xlYXJHZW9mZW5jZSxcclxuICAgIGlzR2VvZmVuY2VQbGFjZW1lbnRNb2RlLFxyXG4gICAgc2V0SXNHZW9mZW5jZVBsYWNlbWVudE1vZGUsXHJcblxyXG4gICAgLy8gUmVnaW9uIHNlbGVjdGlvblxyXG4gICAgc2VsZWN0ZWRSZWdpb24sXHJcbiAgICBzZXRTZWxlY3RlZFJlZ2lvbixcclxuICAgIGdldEJvdW5kc0J5UmVnaW9uOiBoYW5kbGVHZXRCb3VuZHNCeVJlZ2lvbixcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEVuaGFuY2VkTWFwQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dFZhbHVlfT5cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9FbmhhbmNlZE1hcENvbnRleHQuUHJvdmlkZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbi8vIEN1c3RvbSBob29rIHRvIHVzZSB0aGUgY29udGV4dFxyXG5leHBvcnQgY29uc3QgdXNlRW5oYW5jZWRNYXBDb250ZXh0ID0gKCkgPT4gdXNlQ29udGV4dChFbmhhbmNlZE1hcENvbnRleHQpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRW5oYW5jZWRNYXBDb250ZXh0O1xyXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlQ2FsbGJhY2siLCJ1c2VSZWYiLCJ1c2VNZW1vIiwiUmVnaW9uQ29kZSIsIm9wZW5Ta3lUcmFja2luZ1NlcnZpY2UiLCJzYXZlQWlyY3JhZnREYXRhIiwibG9hZEFpcmNyYWZ0RGF0YSIsIm1lcmdlQWlyY3JhZnREYXRhIiwiY2xlYXJBaXJjcmFmdERhdGEiLCJnZXRCb3VuZHNCeVJlZ2lvbiIsImNvbmZpZ0dldEJvdW5kc0J5UmVnaW9uIiwiRW5oYW5jZWRNYXBDb250ZXh0IiwibWFwSW5zdGFuY2UiLCJzZXRNYXBJbnN0YW5jZSIsInpvb21MZXZlbCIsInNldFpvb21MZXZlbCIsImRpc3BsYXllZEFpcmNyYWZ0Iiwic2VsZWN0ZWRBaXJjcmFmdCIsInNlbGVjdEFpcmNyYWZ0IiwiY2FjaGVkQWlyY3JhZnREYXRhIiwidXBkYXRlQWlyY3JhZnREYXRhIiwibGFzdFBlcnNpc3RlbmNlVXBkYXRlIiwic2VsZWN0ZWRNYW51ZmFjdHVyZXIiLCJzZWxlY3RlZE1vZGVsIiwiYWN0aXZlTW9kZWxzIiwidG90YWxBY3RpdmUiLCJpc0xvYWRpbmciLCJpc1JlZnJlc2hpbmciLCJ0cmFja2luZ1N0YXR1cyIsImxhc3RSZWZyZXNoZWQiLCJzZWxlY3RNYW51ZmFjdHVyZXIiLCJzZWxlY3RNb2RlbCIsInJlc2V0IiwicmVmcmVzaFBvc2l0aW9ucyIsImZ1bGxSZWZyZXNoIiwiY2xlYXJDYWNoZSIsImNsZWFyR2VvZmVuY2VEYXRhIiwidXBkYXRlR2VvZmVuY2VBaXJjcmFmdCIsImZpbHRlck1vZGUiLCJzZXRGaWx0ZXJNb2RlIiwiYmxvY2tNYW51ZmFjdHVyZXJBcGlDYWxscyIsInNldEJsb2NrTWFudWZhY3R1cmVyQXBpQ2FsbHMiLCJpc01hbnVmYWN0dXJlckFwaUJsb2NrZWQiLCJzZXRJc01hbnVmYWN0dXJlckFwaUJsb2NrZWQiLCJnZW9mZW5jZUNlbnRlciIsImdlb2ZlbmNlUmFkaXVzIiwiaXNHZW9mZW5jZUFjdGl2ZSIsInNldEdlb2ZlbmNlQ2VudGVyIiwic2V0R2VvZmVuY2VSYWRpdXMiLCJnZW9mZW5jZUNvb3JkaW5hdGVzIiwidG9nZ2xlR2VvZmVuY2UiLCJjbGVhckdlb2ZlbmNlIiwiZmlsdGVyZWRBaXJjcmFmdCIsInNlbGVjdGVkUmVnaW9uIiwiR0xPQkFMIiwic2V0U2VsZWN0ZWRSZWdpb24iLCJyZWdpb24iLCJpc0dlb2ZlbmNlUGxhY2VtZW50TW9kZSIsInNldElzR2VvZmVuY2VQbGFjZW1lbnRNb2RlIiwiRW5oYW5jZWRNYXBQcm92aWRlciIsImNoaWxkcmVuIiwibWFudWZhY3R1cmVycyIsIm9uRXJyb3IiLCJzZXREaXNwbGF5ZWRBaXJjcmFmdCIsInNldFNlbGVjdGVkQWlyY3JhZnQiLCJzZXRDYWNoZWRBaXJjcmFmdERhdGEiLCJzZXRMYXN0UGVyc2lzdGVuY2VVcGRhdGUiLCJzZXRJc0dlb2ZlbmNlQWN0aXZlIiwiYWlyY3JhZnRQb3NpdGlvbnMiLCJzZXRBaXJjcmFmdFBvc2l0aW9ucyIsInByZXYiLCJzZXRTZWxlY3RlZE1hbnVmYWN0dXJlciIsInNldFNlbGVjdGVkTW9kZWwiLCJzZXRBY3RpdmVNb2RlbHMiLCJzZXRUb3RhbEFjdGl2ZSIsInNldElzTG9hZGluZyIsInNldElzUmVmcmVzaGluZyIsInNldFRyYWNraW5nU3RhdHVzIiwic2V0TGFzdFJlZnJlc2hlZCIsImxhc3RGdWxsUmVmcmVzaFRpbWUiLCJzZXRMYXN0RnVsbFJlZnJlc2hUaW1lIiwiaXNHZW9mZW5jZU1vZGUiLCJzZXRJc0dlb2ZlbmNlTW9kZSIsImZpbHRlckFpcmNyYWZ0QnlHZW9mZW5jZSIsImNhbGN1bGF0ZURpc3RhbmNlIiwibGF0MSIsImxvbjEiLCJsYXQyIiwibG9uMiIsIlIiLCJkTGF0IiwiZGVnMnJhZCIsImRMb24iLCJhIiwiTWF0aCIsInNpbiIsImNvcyIsImMiLCJhdGFuMiIsInNxcnQiLCJkaXN0YW5jZSIsImRlZyIsIlBJIiwiZmlsdGVyIiwiYWlyY3JhZnQiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImxhdCIsImxuZyIsInVuc3Vic2NyaWJlQWlyY3JhZnRSZWYiLCJ1bnN1YnNjcmliZVN0YXR1c1JlZiIsInNhdmVkRGF0YSIsImNvbnNvbGUiLCJsb2ciLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiRGF0ZSIsIm5vdyIsImhhbmRsZVRyYWNraW5nVXBkYXRlIiwiZGF0YSIsInVwZGF0ZUFpcmNyYWZ0RGlzcGxheSIsImN1cnJlbnQiLCJzdWJzY3JpYmUiLCJzdWJzY3JpYmVUb1N0YXR1cyIsInN0YXR1cyIsInN0b3BUcmFja2luZyIsIm5ld0FpcmNyYWZ0QXJyYXkiLCJuZXdBaXJjcmFmdE1hcCIsImZvckVhY2giLCJJQ0FPMjQiLCJhbHRpdHVkZSIsInZlbG9jaXR5IiwiaGVhZGluZyIsIm9uX2dyb3VuZCIsImxhc3RfY29udGFjdCIsImxhc3RTZWVuIiwibGFzdFVwZGF0ZWQiLCJjdXJyZW50Q2FjaGUiLCJ1cGRhdGVkQWlyY3JhZnQiLCJleHRlbmRlZEFpcmNyYWZ0IiwiZ2V0RXh0ZW5kZWRBaXJjcmFmdCIsInVuZGVmaW5lZCIsIm1vZGVscyIsInRvdGFsIiwiZ2V0TW9kZWxTdGF0cyIsImdlb2ZlbmNlQWlyY3JhZnQiLCJtb2RlbENvdW50cyIsInJlZHVjZSIsImFjYyIsIk1PREVMIiwiVFlQRV9BSVJDUkFGVCIsImNvdW50IiwiTUFOVUZBQ1RVUkVSIiwibGFiZWwiLCJhY3RpdmVDb3VudCIsInRvdGFsQ291bnQiLCJtb2RlbEFycmF5IiwidmFsdWVzIiwibWFwIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwidHJhY2tNYW51ZmFjdHVyZXJXaXRoUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsIm1lc3NhZ2UiLCJlcnJvciIsIkVycm9yIiwiZW5oYW5jZWRBaXJjcmFmdCIsImhhbmRsZUdldEJvdW5kc0J5UmVnaW9uIiwicmVmcmVzaFBvc2l0aW9uc09ubHkiLCJzZXRUaW1lb3V0Iiwic2FmZXR5VGltZW91dCIsImFsbFRyYWNrZWRBaXJjcmFmdCIsImdldFRyYWNrZWRBaXJjcmFmdCIsImFjdGl2ZUFpcmNyYWZ0IiwibmVlZHNGdWxsUmVmcmVzaCIsInN1Y2Nlc3MiLCJyZWZyZXNoTm93Iiwid2FybiIsImFjdGl2ZUljYW9zIiwiQm9vbGVhbiIsInJlZnJlc2hTcGVjaWZpY0FpcmNyYWZ0IiwiZmFsbGJhY2tFcnJvciIsImNsZWFyVGltZW91dCIsImN1cnJlbnRDb3VudCIsInRyYWNrTWFudWZhY3R1cmVyIiwiY29udGV4dFZhbHVlIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInVzZUVuaGFuY2VkTWFwQ29udGV4dCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/tracking/context/EnhancedMapContext.tsx\n");

/***/ }),

/***/ "./components/tracking/context/EnhancedUIContext.tsx":
/*!***********************************************************!*\
  !*** ./components/tracking/context/EnhancedUIContext.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnhancedUIProvider: () => (/* binding */ EnhancedUIProvider),\n/* harmony export */   useEnhancedUI: () => (/* binding */ useEnhancedUI)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n// components/shared/context/EnhancedUIContext.tsx\n\n\n// Create the context\nconst EnhancedUIContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    selectAircraft: ()=>{},\n    openPanel: ()=>{},\n    closePanel: ()=>{},\n    panels: {},\n    isLoading: false,\n    setIsLoading: ()=>{}\n});\n// Default panel state\nconst defaultPanelState = {\n    isOpen: false,\n    type: 'custom',\n    position: {\n        x: 0,\n        y: 0\n    },\n    data: null,\n    title: ''\n};\n// Default panel positions with fallback values for server-side rendering\nconst DEFAULT_POSITIONS = {\n    aircraftInfo: {\n        x:  false ? 0 : 700,\n        y: 20\n    },\n    settings: {\n        x: 20,\n        y: 20\n    },\n    filters: {\n        x: 20,\n        y: 20\n    },\n    details: {\n        x:  false ? 0 : 400,\n        y: 50\n    },\n    custom: {\n        x:  false ? 0 : 300,\n        y: 100\n    }\n};\n// Provider component\nconst EnhancedUIProvider = ({ children })=>{\n    // Panels state\n    const [panels, setPanels] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        aircraftInfo: {\n            isOpen: false,\n            type: 'aircraftInfo',\n            position: DEFAULT_POSITIONS.aircraftInfo,\n            data: null\n        },\n        settings: {\n            isOpen: false,\n            type: 'settings',\n            position: DEFAULT_POSITIONS.settings,\n            data: null\n        },\n        filters: {\n            isOpen: false,\n            type: 'filters',\n            position: DEFAULT_POSITIONS.filters,\n            data: null\n        },\n        details: {\n            isOpen: false,\n            type: 'details',\n            position: DEFAULT_POSITIONS.details,\n            data: null\n        },\n        custom: {\n            isOpen: false,\n            type: 'custom',\n            position: DEFAULT_POSITIONS.custom,\n            data: null,\n            customContent: null\n        }\n    });\n    // Selected aircraft state\n    const [selectedAircraft, setSelectedAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Tooltip state\n    const [tooltip, setTooltip] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        content: null,\n        position: null,\n        targetId: null\n    });\n    // Other UI state\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Panel actions\n    const openPanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[openPanel]\": (type, data, position, title)=>{\n            setPanels({\n                \"EnhancedUIProvider.useCallback[openPanel]\": (prev)=>({\n                        ...prev,\n                        [type]: {\n                            ...prev[type],\n                            isOpen: true,\n                            data: data || prev[type].data,\n                            position: position || prev[type].position,\n                            title: title || prev[type].title\n                        }\n                    })\n            }[\"EnhancedUIProvider.useCallback[openPanel]\"]);\n        }\n    }[\"EnhancedUIProvider.useCallback[openPanel]\"], []);\n    const closePanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[closePanel]\": (type)=>{\n            setPanels({\n                \"EnhancedUIProvider.useCallback[closePanel]\": (prev)=>({\n                        ...prev,\n                        [type]: {\n                            ...prev[type],\n                            isOpen: false\n                        }\n                    })\n            }[\"EnhancedUIProvider.useCallback[closePanel]\"]);\n        }\n    }[\"EnhancedUIProvider.useCallback[closePanel]\"], []);\n    const setPanelPosition = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[setPanelPosition]\": (type, position)=>{\n            setPanels({\n                \"EnhancedUIProvider.useCallback[setPanelPosition]\": (prev)=>({\n                        ...prev,\n                        [type]: {\n                            ...prev[type],\n                            position\n                        }\n                    })\n            }[\"EnhancedUIProvider.useCallback[setPanelPosition]\"]);\n        }\n    }[\"EnhancedUIProvider.useCallback[setPanelPosition]\"], []);\n    const setCustomPanelContent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[setCustomPanelContent]\": (content, title, position)=>{\n            setPanels({\n                \"EnhancedUIProvider.useCallback[setCustomPanelContent]\": (prev)=>({\n                        ...prev,\n                        custom: {\n                            ...prev.custom,\n                            isOpen: true,\n                            customContent: content,\n                            title: title || prev.custom.title,\n                            position: position || prev.custom.position\n                        }\n                    })\n            }[\"EnhancedUIProvider.useCallback[setCustomPanelContent]\"]);\n        }\n    }[\"EnhancedUIProvider.useCallback[setCustomPanelContent]\"], []);\n    // Aircraft selection action\n    const selectAircraft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[selectAircraft]\": (aircraft)=>{\n            setSelectedAircraft(aircraft);\n            // Automatically open/close aircraft info panel\n            if (aircraft) {\n                openPanel('aircraftInfo', aircraft);\n            } else {\n                closePanel('aircraftInfo');\n            }\n        }\n    }[\"EnhancedUIProvider.useCallback[selectAircraft]\"], [\n        openPanel,\n        closePanel\n    ]);\n    // Tooltip actions\n    const showTooltip = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[showTooltip]\": (content, targetId, position = null)=>{\n            setTooltip({\n                isOpen: true,\n                content,\n                targetId,\n                position\n            });\n        }\n    }[\"EnhancedUIProvider.useCallback[showTooltip]\"], []);\n    const hideTooltip = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[hideTooltip]\": ()=>{\n            setTooltip({\n                \"EnhancedUIProvider.useCallback[hideTooltip]\": (prev)=>({\n                        ...prev,\n                        isOpen: false\n                    })\n            }[\"EnhancedUIProvider.useCallback[hideTooltip]\"]);\n        }\n    }[\"EnhancedUIProvider.useCallback[hideTooltip]\"], []);\n    const value = {\n        // Providing the correct types to match EnhancedUIContextType\n        selectAircraft,\n        openPanel: openPanel,\n        closePanel,\n        panels: panels,\n        isLoading,\n        setIsLoading\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(EnhancedUIContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\components\\\\tracking\\\\context\\\\EnhancedUIContext.tsx\",\n        lineNumber: 303,\n        columnNumber: 5\n    }, undefined);\n};\n// Custom hook to use the context\nconst useEnhancedUI = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EnhancedUIContext);\n    if (context === undefined) {\n        throw new Error('useEnhancedUI must be used within an EnhancedUIProvider');\n    }\n    return context;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3RyYWNraW5nL2NvbnRleHQvRW5oYW5jZWRVSUNvbnRleHQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLGtEQUFrRDs7QUFRbkM7QUEyRmYscUJBQXFCO0FBQ3JCLE1BQU1LLGtDQUFvQkosb0RBQWFBLENBQXdCO0lBQzdESyxnQkFBZ0IsS0FBTztJQUN2QkMsV0FBVyxLQUFPO0lBQ2xCQyxZQUFZLEtBQU87SUFDbkJDLFFBQVEsQ0FBQztJQUNUQyxXQUFXO0lBQ1hDLGNBQWMsS0FBTztBQUN2QjtBQUVBLHNCQUFzQjtBQUN0QixNQUFNQyxvQkFBZ0M7SUFDcENDLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxVQUFVO1FBQUVDLEdBQUc7UUFBR0MsR0FBRztJQUFFO0lBQ3ZCQyxNQUFNO0lBQ05DLE9BQU87QUFDVDtBQUVBLHlFQUF5RTtBQUN6RSxNQUFNQyxvQkFBb0I7SUFDeEJDLGNBQWM7UUFDWkwsR0FBRyxNQUE2QixHQUFHTSxDQUF1QixHQUFHO1FBQzdETCxHQUFHO0lBQ0w7SUFDQU8sVUFBVTtRQUFFUixHQUFHO1FBQUlDLEdBQUc7SUFBRztJQUN6QlEsU0FBUztRQUFFVCxHQUFHO1FBQUlDLEdBQUc7SUFBRztJQUN4QlMsU0FBUztRQUNQVixHQUFHLE1BQTZCLEdBQUdNLENBQTJCLEdBQUc7UUFDakVMLEdBQUc7SUFDTDtJQUNBVSxRQUFRO1FBQ05YLEdBQUcsTUFBNkIsR0FBR00sQ0FBMkIsR0FBRztRQUNqRUwsR0FBRztJQUNMO0FBQ0Y7QUFFQSxxQkFBcUI7QUFDZCxNQUFNVyxxQkFBd0QsQ0FBQyxFQUNwRUMsUUFBUSxFQUNUO0lBQ0MsZUFBZTtJQUNmLE1BQU0sQ0FBQ3BCLFFBQVFxQixVQUFVLEdBQUc1QiwrQ0FBUUEsQ0FBZ0M7UUFDbEVtQixjQUFjO1lBQ1pSLFFBQVE7WUFDUkMsTUFBTTtZQUNOQyxVQUFVSyxrQkFBa0JDLFlBQVk7WUFDeENILE1BQU07UUFDUjtRQUNBTSxVQUFVO1lBQ1JYLFFBQVE7WUFDUkMs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dEIsV0FBaUMsSUFBSTtZQUVyQ29CLFdBQVc7Z0JBQ1R0QixRQUFRO2dCQUNSdUI7Z0JBQ0FDO2dCQUNBdEI7WUFDRjtRQUNGO3NEQUNBLEVBQUU7SUFHSixNQUFNOEIsY0FBY3pDLGtEQUFXQTt1REFBQztZQUM5QitCOytEQUFXLENBQUNLLE9BQVU7d0JBQ3BCLEdBQUdBLElBQUk7d0JBQ1AzQixRQUFRO29CQUNWOztRQUNGO3NEQUFHLEVBQUU7SUFFTCxNQUFNaUMsUUFBUTtRQUNaLDZEQUE2RDtRQUM3RHhDO1FBQ0FDLFdBQVdBO1FBTVhDO1FBQ0FDLFFBQVFBO1FBQ1JDO1FBQ0FDO0lBQ0Y7SUFFQSxxQkFDRSw4REFBQ04sa0JBQWtCMEMsUUFBUTtRQUFDRCxPQUFPQTtrQkFDaENqQjs7Ozs7O0FBR1AsRUFBRTtBQUVGLGlDQUFpQztBQUMxQixNQUFNbUIsZ0JBQWdCO0lBQzNCLE1BQU1DLFVBQVU5QyxpREFBVUEsQ0FBQ0U7SUFDM0IsSUFBSTRDLFlBQVlDLFdBQVc7UUFDekIsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Y7QUFDVCxFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhdGhvXFxEb2N1bWVudHNcXFByb2plY3RzXFxhaXJjcmFmdC10cmFja2luZ1xcY29tcG9uZW50c1xcdHJhY2tpbmdcXGNvbnRleHRcXEVuaGFuY2VkVUlDb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb21wb25lbnRzL3NoYXJlZC9jb250ZXh0L0VuaGFuY2VkVUlDb250ZXh0LnRzeFxyXG5pbXBvcnQgUmVhY3QsIHtcclxuICBjcmVhdGVDb250ZXh0LFxyXG4gIHVzZVN0YXRlLFxyXG4gIHVzZUNvbnRleHQsXHJcbiAgdXNlQ2FsbGJhY2ssXHJcbiAgUmVhY3ROb2RlLFxyXG4gIHVzZUVmZmVjdCxcclxufSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEV4dGVuZGVkQWlyY3JhZnQgfSBmcm9tICdAL3R5cGVzL2Jhc2UnO1xyXG5cclxuLy8gRGVmaW5lIFVJIGVsZW1lbnQgdHlwZXNcclxuZXhwb3J0IHR5cGUgUGFuZWxUeXBlID1cclxuICB8ICdhaXJjcmFmdEluZm8nXHJcbiAgfCAnc2V0dGluZ3MnXHJcbiAgfCAnZmlsdGVycydcclxuICB8ICdkZXRhaWxzJ1xyXG4gIHwgJ2N1c3RvbSc7XHJcblxyXG4vLyBEZWZpbmUgcG9zaXRpb24gdHlwZVxyXG5leHBvcnQgaW50ZXJmYWNlIFBhbmVsUG9zaXRpb24ge1xyXG4gIHg6IG51bWJlcjtcclxuICB5OiBudW1iZXI7XHJcbn1cclxuXHJcbi8vIEZpeGVkIFBhbmVsU3RhdGUgaW50ZXJmYWNlXHJcbmludGVyZmFjZSBQYW5lbFN0YXRlIHtcclxuICBpc09wZW46IGJvb2xlYW47XHJcbiAgdHlwZTogUGFuZWxUeXBlO1xyXG4gIHBvc2l0aW9uOiBQYW5lbFBvc2l0aW9uO1xyXG4gIGRhdGE/OiBhbnk7XHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgY3VzdG9tQ29udGVudD86IFJlYWN0Tm9kZTtcclxufVxyXG5cclxuLy8gRGVmaW5lIG11bHRpcGxlIHBhbmVscyBzdGF0ZSB0eXBlXHJcbmludGVyZmFjZSBQYW5lbHNTdGF0ZSB7XHJcbiAgW2tleTogc3RyaW5nXTogUGFuZWxTdGF0ZTtcclxufVxyXG5cclxuaW50ZXJmYWNlIFRvb2x0aXBTdGF0ZSB7XHJcbiAgaXNPcGVuOiBib29sZWFuO1xyXG4gIGNvbnRlbnQ6IFJlYWN0Tm9kZSB8IG51bGw7XHJcbiAgcG9zaXRpb246IFBhbmVsUG9zaXRpb24gfCBudWxsO1xyXG4gIHRhcmdldElkOiBzdHJpbmcgfCBudWxsO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRW5oYW5jZWRVSUNvbnRleHRUeXBlIHtcclxuICBzZWxlY3RBaXJjcmFmdDogKGFpcmNyYWZ0OiBFeHRlbmRlZEFpcmNyYWZ0IHwgbnVsbCkgPT4gdm9pZDtcclxuICBvcGVuUGFuZWw6IChcclxuICAgIHBhbmVsSWQ6IFBhbmVsVHlwZSxcclxuICAgIGRhdGE6IGFueSxcclxuICAgIHBvc2l0aW9uOiBQYW5lbFBvc2l0aW9uLFxyXG4gICAgdGl0bGU6IHN0cmluZ1xyXG4gICkgPT4gdm9pZDtcclxuICBjbG9zZVBhbmVsOiAocGFuZWxJZDogUGFuZWxUeXBlKSA9PiB2b2lkO1xyXG4gIHBhbmVsczogUGFuZWxzU3RhdGU7XHJcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xyXG4gIHNldElzTG9hZGluZzogKGxvYWRpbmc6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbn1cclxuXHJcbi8vIERlZmluZSBjb250ZXh0IHN0YXRlXHJcbmludGVyZmFjZSBFbmhhbmNlZFVJQ29udGV4dFN0YXRlIHtcclxuICAvLyBQYW5lbHMgc3RhdGVcclxuICBwYW5lbHM6IFJlY29yZDxQYW5lbFR5cGUsIFBhbmVsU3RhdGU+O1xyXG4gIG9wZW5QYW5lbDogKFxyXG4gICAgdHlwZTogUGFuZWxUeXBlLFxyXG4gICAgZGF0YT86IGFueSxcclxuICAgIHBvc2l0aW9uPzogUGFuZWxQb3NpdGlvbixcclxuICAgIHRpdGxlPzogc3RyaW5nXHJcbiAgKSA9PiB2b2lkO1xyXG4gIGNsb3NlUGFuZWw6ICh0eXBlOiBQYW5lbFR5cGUpID0+IHZvaWQ7XHJcbiAgc2V0UGFuZWxQb3NpdGlvbjogKHR5cGU6IFBhbmVsVHlwZSwgcG9zaXRpb246IFBhbmVsUG9zaXRpb24pID0+IHZvaWQ7XHJcbiAgc2V0Q3VzdG9tUGFuZWxDb250ZW50OiAoXHJcbiAgICBjb250ZW50OiBSZWFjdE5vZGUsXHJcbiAgICB0aXRsZT86IHN0cmluZyxcclxuICAgIHBvc2l0aW9uPzogUGFuZWxQb3NpdGlvblxyXG4gICkgPT4gdm9pZDtcclxuXHJcbiAgLy8gU2VsZWN0ZWQgYWlyY3JhZnQgc3RhdGUgKHByZXZpb3VzbHkgaW4gbWFwIGNvbnRleHQpXHJcbiAgc2VsZWN0ZWRBaXJjcmFmdDogRXh0ZW5kZWRBaXJjcmFmdCB8IG51bGw7XHJcbiAgc2VsZWN0QWlyY3JhZnQ6IChhaXJjcmFmdDogRXh0ZW5kZWRBaXJjcmFmdCB8IG51bGwpID0+IHZvaWQ7XHJcblxyXG4gIC8vIFRvb2x0aXAgc3RhdGVcclxuICB0b29sdGlwOiBUb29sdGlwU3RhdGU7XHJcbiAgc2hvd1Rvb2x0aXA6IChcclxuICAgIGNvbnRlbnQ6IFJlYWN0Tm9kZSxcclxuICAgIHRhcmdldElkOiBzdHJpbmcsXHJcbiAgICBwb3NpdGlvbjogUGFuZWxQb3NpdGlvbiB8IG51bGxcclxuICApID0+IHZvaWQ7XHJcbiAgaGlkZVRvb2x0aXA6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8vIE90aGVyIFVJIHN0YXRlXHJcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xyXG4gIHNldElzTG9hZGluZzogKGxvYWRpbmc6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgZXJyb3JNZXNzYWdlOiBzdHJpbmcgfCBudWxsO1xyXG4gIHNldEVycm9yTWVzc2FnZTogKG1lc3NhZ2U6IHN0cmluZyB8IG51bGwpID0+IHZvaWQ7XHJcbn1cclxuXHJcbi8vIENyZWF0ZSB0aGUgY29udGV4dFxyXG5jb25zdCBFbmhhbmNlZFVJQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8RW5oYW5jZWRVSUNvbnRleHRUeXBlPih7XHJcbiAgc2VsZWN0QWlyY3JhZnQ6ICgpID0+IHt9LFxyXG4gIG9wZW5QYW5lbDogKCkgPT4ge30sXHJcbiAgY2xvc2VQYW5lbDogKCkgPT4ge30sXHJcbiAgcGFuZWxzOiB7fSBhcyBQYW5lbHNTdGF0ZSxcclxuICBpc0xvYWRpbmc6IGZhbHNlLFxyXG4gIHNldElzTG9hZGluZzogKCkgPT4ge30sXHJcbn0pO1xyXG5cclxuLy8gRGVmYXVsdCBwYW5lbCBzdGF0ZVxyXG5jb25zdCBkZWZhdWx0UGFuZWxTdGF0ZTogUGFuZWxTdGF0ZSA9IHtcclxuICBpc09wZW46IGZhbHNlLFxyXG4gIHR5cGU6ICdjdXN0b20nLCAvLyBEZWZhdWx0IHR5cGVcclxuICBwb3NpdGlvbjogeyB4OiAwLCB5OiAwIH0sXHJcbiAgZGF0YTogbnVsbCxcclxuICB0aXRsZTogJycsXHJcbn07XHJcblxyXG4vLyBEZWZhdWx0IHBhbmVsIHBvc2l0aW9ucyB3aXRoIGZhbGxiYWNrIHZhbHVlcyBmb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nXHJcbmNvbnN0IERFRkFVTFRfUE9TSVRJT05TID0ge1xyXG4gIGFpcmNyYWZ0SW5mbzoge1xyXG4gICAgeDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cuaW5uZXJXaWR0aCAtIDMwMCA6IDcwMCxcclxuICAgIHk6IDIwLFxyXG4gIH0sXHJcbiAgc2V0dGluZ3M6IHsgeDogMjAsIHk6IDIwIH0sXHJcbiAgZmlsdGVyczogeyB4OiAyMCwgeTogMjAgfSxcclxuICBkZXRhaWxzOiB7XHJcbiAgICB4OiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5pbm5lcldpZHRoIC8gMiAtIDMwMCA6IDQwMCxcclxuICAgIHk6IDUwLFxyXG4gIH0sXHJcbiAgY3VzdG9tOiB7XHJcbiAgICB4OiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5pbm5lcldpZHRoIC8gMiAtIDIwMCA6IDMwMCxcclxuICAgIHk6IDEwMCxcclxuICB9LFxyXG59O1xyXG5cclxuLy8gUHJvdmlkZXIgY29tcG9uZW50XHJcbmV4cG9ydCBjb25zdCBFbmhhbmNlZFVJUHJvdmlkZXI6IFJlYWN0LkZDPHsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9PiA9ICh7XHJcbiAgY2hpbGRyZW4sXHJcbn0pID0+IHtcclxuICAvLyBQYW5lbHMgc3RhdGVcclxuICBjb25zdCBbcGFuZWxzLCBzZXRQYW5lbHNdID0gdXNlU3RhdGU8UmVjb3JkPFBhbmVsVHlwZSwgUGFuZWxTdGF0ZT4+KHtcclxuICAgIGFpcmNyYWZ0SW5mbzoge1xyXG4gICAgICBpc09wZW46IGZhbHNlLFxyXG4gICAgICB0eXBlOiAnYWlyY3JhZnRJbmZvJyxcclxuICAgICAgcG9zaXRpb246IERFRkFVTFRfUE9TSVRJT05TLmFpcmNyYWZ0SW5mbyxcclxuICAgICAgZGF0YTogbnVsbCxcclxuICAgIH0sXHJcbiAgICBzZXR0aW5nczoge1xyXG4gICAgICBpc09wZW46IGZhbHNlLFxyXG4gICAgICB0eXBlOiAnc2V0dGluZ3MnLFxyXG4gICAgICBwb3NpdGlvbjogREVGQVVMVF9QT1NJVElPTlMuc2V0dGluZ3MsXHJcbiAgICAgIGRhdGE6IG51bGwsXHJcbiAgICB9LFxyXG4gICAgZmlsdGVyczoge1xyXG4gICAgICBpc09wZW46IGZhbHNlLFxyXG4gICAgICB0eXBlOiAnZmlsdGVycycsXHJcbiAgICAgIHBvc2l0aW9uOiBERUZBVUxUX1BPU0lUSU9OUy5maWx0ZXJzLFxyXG4gICAgICBkYXRhOiBudWxsLFxyXG4gICAgfSxcclxuICAgIGRldGFpbHM6IHtcclxuICAgICAgaXNPcGVuOiBmYWxzZSxcclxuICAgICAgdHlwZTogJ2RldGFpbHMnLFxyXG4gICAgICBwb3NpdGlvbjogREVGQVVMVF9QT1NJVElPTlMuZGV0YWlscyxcclxuICAgICAgZGF0YTogbnVsbCxcclxuICAgIH0sXHJcbiAgICBjdXN0b206IHtcclxuICAgICAgaXNPcGVuOiBmYWxzZSxcclxuICAgICAgdHlwZTogJ2N1c3RvbScsXHJcbiAgICAgIHBvc2l0aW9uOiBERUZBVUxUX1BPU0lUSU9OUy5jdXN0b20sXHJcbiAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgIGN1c3RvbUNvbnRlbnQ6IG51bGwsXHJcbiAgICB9LFxyXG4gIH0pO1xyXG5cclxuICAvLyBTZWxlY3RlZCBhaXJjcmFmdCBzdGF0ZVxyXG4gIGNvbnN0IFtzZWxlY3RlZEFpcmNyYWZ0LCBzZXRTZWxlY3RlZEFpcmNyYWZ0XSA9XHJcbiAgICB1c2VTdGF0ZTxFeHRlbmRlZEFpcmNyYWZ0IHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIC8vIFRvb2x0aXAgc3RhdGVcclxuICBjb25zdCBbdG9vbHRpcCwgc2V0VG9vbHRpcF0gPSB1c2VTdGF0ZTxUb29sdGlwU3RhdGU+KHtcclxuICAgIGlzT3BlbjogZmFsc2UsXHJcbiAgICBjb250ZW50OiBudWxsLFxyXG4gICAgcG9zaXRpb246IG51bGwsXHJcbiAgICB0YXJnZXRJZDogbnVsbCxcclxuICB9KTtcclxuXHJcbiAgLy8gT3RoZXIgVUkgc3RhdGVcclxuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFtlcnJvck1lc3NhZ2UsIHNldEVycm9yTWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcclxuXHJcbiAgLy8gUGFuZWwgYWN0aW9uc1xyXG4gIGNvbnN0IG9wZW5QYW5lbCA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKHR5cGU6IFBhbmVsVHlwZSwgZGF0YT86IGFueSwgcG9zaXRpb24/OiBQYW5lbFBvc2l0aW9uLCB0aXRsZT86IHN0cmluZykgPT4ge1xyXG4gICAgICBzZXRQYW5lbHMoKHByZXYpID0+ICh7XHJcbiAgICAgICAgLi4ucHJldixcclxuICAgICAgICBbdHlwZV06IHtcclxuICAgICAgICAgIC4uLnByZXZbdHlwZV0sXHJcbiAgICAgICAgICBpc09wZW46IHRydWUsXHJcbiAgICAgICAgICBkYXRhOiBkYXRhIHx8IHByZXZbdHlwZV0uZGF0YSxcclxuICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbiB8fCBwcmV2W3R5cGVdLnBvc2l0aW9uLFxyXG4gICAgICAgICAgdGl0bGU6IHRpdGxlIHx8IHByZXZbdHlwZV0udGl0bGUsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSkpO1xyXG4gICAgfSxcclxuICAgIFtdXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgY2xvc2VQYW5lbCA9IHVzZUNhbGxiYWNrKCh0eXBlOiBQYW5lbFR5cGUpID0+IHtcclxuICAgIHNldFBhbmVscygocHJldikgPT4gKHtcclxuICAgICAgLi4ucHJldixcclxuICAgICAgW3R5cGVdOiB7XHJcbiAgICAgICAgLi4ucHJldlt0eXBlXSxcclxuICAgICAgICBpc09wZW46IGZhbHNlLFxyXG4gICAgICB9LFxyXG4gICAgfSkpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3Qgc2V0UGFuZWxQb3NpdGlvbiA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKHR5cGU6IFBhbmVsVHlwZSwgcG9zaXRpb246IFBhbmVsUG9zaXRpb24pID0+IHtcclxuICAgICAgc2V0UGFuZWxzKChwcmV2KSA9PiAoe1xyXG4gICAgICAgIC4uLnByZXYsXHJcbiAgICAgICAgW3R5cGVdOiB7XHJcbiAgICAgICAgICAuLi5wcmV2W3R5cGVdLFxyXG4gICAgICAgICAgcG9zaXRpb24sXHJcbiAgICAgICAgfSxcclxuICAgICAgfSkpO1xyXG4gICAgfSxcclxuICAgIFtdXHJcbiAgKTtcclxuXHJcbiAgY29uc3Qgc2V0Q3VzdG9tUGFuZWxDb250ZW50ID0gdXNlQ2FsbGJhY2soXHJcbiAgICAoY29udGVudDogUmVhY3ROb2RlLCB0aXRsZT86IHN0cmluZywgcG9zaXRpb24/OiBQYW5lbFBvc2l0aW9uKSA9PiB7XHJcbiAgICAgIHNldFBhbmVscygocHJldikgPT4gKHtcclxuICAgICAgICAuLi5wcmV2LFxyXG4gICAgICAgIGN1c3RvbToge1xyXG4gICAgICAgICAgLi4ucHJldi5jdXN0b20sXHJcbiAgICAgICAgICBpc09wZW46IHRydWUsXHJcbiAgICAgICAgICBjdXN0b21Db250ZW50OiBjb250ZW50LFxyXG4gICAgICAgICAgdGl0bGU6IHRpdGxlIHx8IHByZXYuY3VzdG9tLnRpdGxlLFxyXG4gICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uIHx8IHByZXYuY3VzdG9tLnBvc2l0aW9uLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pKTtcclxuICAgIH0sXHJcbiAgICBbXVxyXG4gICk7XHJcblxyXG4gIC8vIEFpcmNyYWZ0IHNlbGVjdGlvbiBhY3Rpb25cclxuICBjb25zdCBzZWxlY3RBaXJjcmFmdCA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKGFpcmNyYWZ0OiBFeHRlbmRlZEFpcmNyYWZ0IHwgbnVsbCkgPT4ge1xyXG4gICAgICBzZXRTZWxlY3RlZEFpcmNyYWZ0KGFpcmNyYWZ0KTtcclxuXHJcbiAgICAgIC8vIEF1dG9tYXRpY2FsbHkgb3Blbi9jbG9zZSBhaXJjcmFmdCBpbmZvIHBhbmVsXHJcbiAgICAgIGlmIChhaXJjcmFmdCkge1xyXG4gICAgICAgIG9wZW5QYW5lbCgnYWlyY3JhZnRJbmZvJywgYWlyY3JhZnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNsb3NlUGFuZWwoJ2FpcmNyYWZ0SW5mbycpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgW29wZW5QYW5lbCwgY2xvc2VQYW5lbF1cclxuICApO1xyXG5cclxuICAvLyBUb29sdGlwIGFjdGlvbnNcclxuICBjb25zdCBzaG93VG9vbHRpcCA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKFxyXG4gICAgICBjb250ZW50OiBSZWFjdE5vZGUsXHJcbiAgICAgIHRhcmdldElkOiBzdHJpbmcsXHJcbiAgICAgIHBvc2l0aW9uOiBQYW5lbFBvc2l0aW9uIHwgbnVsbCA9IG51bGxcclxuICAgICkgPT4ge1xyXG4gICAgICBzZXRUb29sdGlwKHtcclxuICAgICAgICBpc09wZW46IHRydWUsXHJcbiAgICAgICAgY29udGVudCxcclxuICAgICAgICB0YXJnZXRJZCxcclxuICAgICAgICBwb3NpdGlvbixcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgW11cclxuICApO1xyXG5cclxuICBjb25zdCBoaWRlVG9vbHRpcCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIHNldFRvb2x0aXAoKHByZXYpID0+ICh7XHJcbiAgICAgIC4uLnByZXYsXHJcbiAgICAgIGlzT3BlbjogZmFsc2UsXHJcbiAgICB9KSk7XHJcbiAgfSwgW10pO1xyXG5cclxuICBjb25zdCB2YWx1ZSA9IHtcclxuICAgIC8vIFByb3ZpZGluZyB0aGUgY29ycmVjdCB0eXBlcyB0byBtYXRjaCBFbmhhbmNlZFVJQ29udGV4dFR5cGVcclxuICAgIHNlbGVjdEFpcmNyYWZ0LFxyXG4gICAgb3BlblBhbmVsOiBvcGVuUGFuZWwgYXMgKFxyXG4gICAgICBwYW5lbElkOiBQYW5lbFR5cGUsXHJcbiAgICAgIGRhdGE6IGFueSxcclxuICAgICAgcG9zaXRpb246IFBhbmVsUG9zaXRpb24sXHJcbiAgICAgIHRpdGxlOiBzdHJpbmdcclxuICAgICkgPT4gdm9pZCxcclxuICAgIGNsb3NlUGFuZWwsXHJcbiAgICBwYW5lbHM6IHBhbmVscyBhcyBQYW5lbHNTdGF0ZSxcclxuICAgIGlzTG9hZGluZyxcclxuICAgIHNldElzTG9hZGluZyxcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEVuaGFuY2VkVUlDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvRW5oYW5jZWRVSUNvbnRleHQuUHJvdmlkZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbi8vIEN1c3RvbSBob29rIHRvIHVzZSB0aGUgY29udGV4dFxyXG5leHBvcnQgY29uc3QgdXNlRW5oYW5jZWRVSSA9ICgpID0+IHtcclxuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChFbmhhbmNlZFVJQ29udGV4dCk7XHJcbiAgaWYgKGNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VFbmhhbmNlZFVJIG11c3QgYmUgdXNlZCB3aXRoaW4gYW4gRW5oYW5jZWRVSVByb3ZpZGVyJyk7XHJcbiAgfVxyXG4gIHJldHVybiBjb250ZXh0O1xyXG59O1xyXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlU3RhdGUiLCJ1c2VDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJFbmhhbmNlZFVJQ29udGV4dCIsInNlbGVjdEFpcmNyYWZ0Iiwib3BlblBhbmVsIiwiY2xvc2VQYW5lbCIsInBhbmVscyIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImRlZmF1bHRQYW5lbFN0YXRlIiwiaXNPcGVuIiwidHlwZSIsInBvc2l0aW9uIiwieCIsInkiLCJkYXRhIiwidGl0bGUiLCJERUZBVUxUX1BPU0lUSU9OUyIsImFpcmNyYWZ0SW5mbyIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJzZXR0aW5ncyIsImZpbHRlcnMiLCJkZXRhaWxzIiwiY3VzdG9tIiwiRW5oYW5jZWRVSVByb3ZpZGVyIiwiY2hpbGRyZW4iLCJzZXRQYW5lbHMiLCJjdXN0b21Db250ZW50Iiwic2VsZWN0ZWRBaXJjcmFmdCIsInNldFNlbGVjdGVkQWlyY3JhZnQiLCJ0b29sdGlwIiwic2V0VG9vbHRpcCIsImNvbnRlbnQiLCJ0YXJnZXRJZCIsImVycm9yTWVzc2FnZSIsInNldEVycm9yTWVzc2FnZSIsInByZXYiLCJzZXRQYW5lbFBvc2l0aW9uIiwic2V0Q3VzdG9tUGFuZWxDb250ZW50IiwiYWlyY3JhZnQiLCJzaG93VG9vbHRpcCIsImhpZGVUb29sdGlwIiwidmFsdWUiLCJQcm92aWRlciIsInVzZUVuaGFuY2VkVUkiLCJjb250ZXh0IiwidW5kZWZpbmVkIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/tracking/context/EnhancedUIContext.tsx\n");

/***/ }),

/***/ "./components/tracking/context/LocationContex.tsx":
/*!********************************************************!*\
  !*** ./components/tracking/context/LocationContex.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocationProvider: () => (/* binding */ LocationProvider),\n/* harmony export */   useLocationUtils: () => (/* binding */ useLocationUtils)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst LocationContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst LocationProvider = ({ children })=>{\n    const formatCityCountry = (locationString)=>{\n        if (!locationString) return '';\n        const parts = locationString.split(',').map((p)=>p.trim());\n        if (parts.length >= 2) {\n            const country = parts[parts.length - 1];\n            let city = parts[0];\n            if (parts.length >= 3 && parts[0] === parts[1]) city = parts[0];\n            return `${city}, ${country}`;\n        }\n        return locationString;\n    };\n    const extractCountryFromFeature = (feature)=>{\n        if (!feature) return '';\n        const countryContext = feature.context?.find((c)=>c.id.startsWith('country.'));\n        if (countryContext) return countryContext.text;\n        if (feature.id.startsWith('country.')) return feature.text;\n        if (feature.place_name) {\n            const parts = feature.place_name.split(',').map((p)=>p.trim());\n            return parts.length ? parts[parts.length - 1] : '';\n        }\n        return '';\n    };\n    const extractCountryFromString = (locationString)=>{\n        if (!locationString) return '';\n        const parts = locationString.split(',').map((p)=>p.trim());\n        return parts.length ? parts[parts.length - 1] : locationString;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LocationContext.Provider, {\n        value: {\n            formatCityCountry,\n            extractCountryFromFeature,\n            extractCountryFromString\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\components\\\\tracking\\\\context\\\\LocationContex.tsx\",\n        lineNumber: 66,\n        columnNumber: 5\n    }, undefined);\n};\nconst useLocationUtils = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(LocationContext);\n    if (!context) {\n        throw new Error('useLocationUtils must be used within a LocationProvider');\n    }\n    return context;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3RyYWNraW5nL2NvbnRleHQvTG9jYXRpb25Db250ZXgudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBb0U7QUFtQnBFLE1BQU1HLGdDQUFrQkYsb0RBQWFBLENBQ25DRztBQU9LLE1BQU1DLG1CQUFtQixDQUFDLEVBQUVDLFFBQVEsRUFBeUI7SUFDbEUsTUFBTUMsb0JBQW9CLENBQUNDO1FBQ3pCLElBQUksQ0FBQ0EsZ0JBQWdCLE9BQU87UUFDNUIsTUFBTUMsUUFBUUQsZUFBZUUsS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxJQUFJO1FBQ3pELElBQUlKLE1BQU1LLE1BQU0sSUFBSSxHQUFHO1lBQ3JCLE1BQU1DLFVBQVVOLEtBQUssQ0FBQ0EsTUFBTUssTUFBTSxHQUFHLEVBQUU7WUFDdkMsSUFBSUUsT0FBT1AsS0FBSyxDQUFDLEVBQUU7WUFDbkIsSUFBSUEsTUFBTUssTUFBTSxJQUFJLEtBQUtMLEtBQUssQ0FBQyxFQUFFLEtBQUtBLEtBQUssQ0FBQyxFQUFFLEVBQUVPLE9BQU9QLEtBQUssQ0FBQyxFQUFFO1lBQy9ELE9BQU8sR0FBR08sS0FBSyxFQUFFLEVBQUVELFNBQVM7UUFDOUI7UUFDQSxPQUFPUDtJQUNUO0lBRUEsTUFBTVMsNEJBQTRCLENBQUNDO1FBQ2pDLElBQUksQ0FBQ0EsU0FBUyxPQUFPO1FBRXJCLE1BQU1DLGlCQUFpQkQsUUFBUUUsT0FBTyxFQUFFQyxLQUFLLENBQUNDLElBQzVDQSxFQUFFQyxFQUFFLENBQUNDLFVBQVUsQ0FBQztRQUVsQixJQUFJTCxnQkFBZ0IsT0FBT0EsZUFBZU0sSUFBSTtRQUU5QyxJQUFJUCxRQUFRSyxFQUFFLENBQUNDLFVBQVUsQ0FBQyxhQUFhLE9BQU9OLFFBQVFPLElBQUk7UUFFMUQsSUFBSVAsUUFBUVEsVUFBVSxFQUFFO1lBQ3RCLE1BQU1qQixRQUFRUyxRQUFRUSxVQUFVLENBQUNoQixLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDLENBQUNDLElBQU1BLEVBQUVDLElBQUk7WUFDN0QsT0FBT0osTUFBTUssTUFBTSxHQUFHTCxLQUFLLENBQUNBLE1BQU1LLE1BQU0sR0FBRyxFQUFFLEdBQUc7UUFDbEQ7UUFFQSxPQUFPO0lBQ1Q7SUFFQSxNQUFNYSwyQkFBMkIsQ0FBQ25CO1FBQ2hDLElBQUksQ0FBQ0EsZ0JBQWdCLE9BQU87UUFDNUIsTUFBTUMsUUFBUUQsZUFBZUUsS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxJQUFJO1FBQ3pELE9BQU9KLE1BQU1LLE1BQU0sR0FBR0wsS0FBSyxDQUFDQSxNQUFNSyxNQUFNLEdBQUcsRUFBRSxHQUFHTjtJQUNsRDtJQUVBLHFCQUNFLDhEQUFDTCxnQkFBZ0J5QixRQUFRO1FBQ3ZCQyxPQUFPO1lBQ0x0QjtZQUNBVTtZQUNBVTtRQUNGO2tCQUVDckI7Ozs7OztBQUdQLEVBQUU7QUFFSyxNQUFNd0IsbUJBQW1CO0lBQzlCLE1BQU1WLFVBQVVsQixpREFBVUEsQ0FBQ0M7SUFDM0IsSUFBSSxDQUFDaUIsU0FBUztRQUNaLE1BQU0sSUFBSVcsTUFBTTtJQUNsQjtJQUNBLE9BQU9YO0FBQ1QsRUFBRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzYXRob1xcRG9jdW1lbnRzXFxQcm9qZWN0c1xcYWlyY3JhZnQtdHJhY2tpbmdcXGNvbXBvbmVudHNcXHRyYWNraW5nXFxjb250ZXh0XFxMb2NhdGlvbkNvbnRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcclxuXHJcbi8vIFlvdSBjYW4gYWRqdXN0IHRoaXMgdHlwZSB0byBtYXRjaCB5b3VyIHNwZWNpZmljIE1hcGJveEZlYXR1cmUgc2hhcGVcclxuZXhwb3J0IGludGVyZmFjZSBNYXBib3hGZWF0dXJlIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRleHQ6IHN0cmluZztcclxuICBwbGFjZV9uYW1lPzogc3RyaW5nO1xyXG4gIGNvbnRleHQ/OiBBcnJheTx7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG4gIH0+O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgTG9jYXRpb25Db250ZXh0VHlwZSB7XHJcbiAgZm9ybWF0Q2l0eUNvdW50cnk6IChsb2NhdGlvblN0cmluZzogc3RyaW5nIHwgbnVsbCkgPT4gc3RyaW5nO1xyXG4gIGV4dHJhY3RDb3VudHJ5RnJvbUZlYXR1cmU6IChmZWF0dXJlOiBNYXBib3hGZWF0dXJlKSA9PiBzdHJpbmc7XHJcbiAgZXh0cmFjdENvdW50cnlGcm9tU3RyaW5nOiAobG9jYXRpb25TdHJpbmc6IHN0cmluZyB8IG51bGwpID0+IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgTG9jYXRpb25Db250ZXh0ID0gY3JlYXRlQ29udGV4dDxMb2NhdGlvbkNvbnRleHRUeXBlIHwgdW5kZWZpbmVkPihcclxuICB1bmRlZmluZWRcclxuKTtcclxuXHJcbmludGVyZmFjZSBMb2NhdGlvblByb3ZpZGVyUHJvcHMge1xyXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBMb2NhdGlvblByb3ZpZGVyID0gKHsgY2hpbGRyZW4gfTogTG9jYXRpb25Qcm92aWRlclByb3BzKSA9PiB7XHJcbiAgY29uc3QgZm9ybWF0Q2l0eUNvdW50cnkgPSAobG9jYXRpb25TdHJpbmc6IHN0cmluZyB8IG51bGwpOiBzdHJpbmcgPT4ge1xyXG4gICAgaWYgKCFsb2NhdGlvblN0cmluZykgcmV0dXJuICcnO1xyXG4gICAgY29uc3QgcGFydHMgPSBsb2NhdGlvblN0cmluZy5zcGxpdCgnLCcpLm1hcCgocCkgPT4gcC50cmltKCkpO1xyXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIGNvbnN0IGNvdW50cnkgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcclxuICAgICAgbGV0IGNpdHkgPSBwYXJ0c1swXTtcclxuICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+PSAzICYmIHBhcnRzWzBdID09PSBwYXJ0c1sxXSkgY2l0eSA9IHBhcnRzWzBdO1xyXG4gICAgICByZXR1cm4gYCR7Y2l0eX0sICR7Y291bnRyeX1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxvY2F0aW9uU3RyaW5nO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGV4dHJhY3RDb3VudHJ5RnJvbUZlYXR1cmUgPSAoZmVhdHVyZTogTWFwYm94RmVhdHVyZSk6IHN0cmluZyA9PiB7XHJcbiAgICBpZiAoIWZlYXR1cmUpIHJldHVybiAnJztcclxuXHJcbiAgICBjb25zdCBjb3VudHJ5Q29udGV4dCA9IGZlYXR1cmUuY29udGV4dD8uZmluZCgoYykgPT5cclxuICAgICAgYy5pZC5zdGFydHNXaXRoKCdjb3VudHJ5LicpXHJcbiAgICApO1xyXG4gICAgaWYgKGNvdW50cnlDb250ZXh0KSByZXR1cm4gY291bnRyeUNvbnRleHQudGV4dDtcclxuXHJcbiAgICBpZiAoZmVhdHVyZS5pZC5zdGFydHNXaXRoKCdjb3VudHJ5LicpKSByZXR1cm4gZmVhdHVyZS50ZXh0O1xyXG5cclxuICAgIGlmIChmZWF0dXJlLnBsYWNlX25hbWUpIHtcclxuICAgICAgY29uc3QgcGFydHMgPSBmZWF0dXJlLnBsYWNlX25hbWUuc3BsaXQoJywnKS5tYXAoKHApID0+IHAudHJpbSgpKTtcclxuICAgICAgcmV0dXJuIHBhcnRzLmxlbmd0aCA/IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdIDogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGV4dHJhY3RDb3VudHJ5RnJvbVN0cmluZyA9IChsb2NhdGlvblN0cmluZzogc3RyaW5nIHwgbnVsbCk6IHN0cmluZyA9PiB7XHJcbiAgICBpZiAoIWxvY2F0aW9uU3RyaW5nKSByZXR1cm4gJyc7XHJcbiAgICBjb25zdCBwYXJ0cyA9IGxvY2F0aW9uU3RyaW5nLnNwbGl0KCcsJykubWFwKChwKSA9PiBwLnRyaW0oKSk7XHJcbiAgICByZXR1cm4gcGFydHMubGVuZ3RoID8gcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gOiBsb2NhdGlvblN0cmluZztcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPExvY2F0aW9uQ29udGV4dC5Qcm92aWRlclxyXG4gICAgICB2YWx1ZT17e1xyXG4gICAgICAgIGZvcm1hdENpdHlDb3VudHJ5LFxyXG4gICAgICAgIGV4dHJhY3RDb3VudHJ5RnJvbUZlYXR1cmUsXHJcbiAgICAgICAgZXh0cmFjdENvdW50cnlGcm9tU3RyaW5nLFxyXG4gICAgICB9fVxyXG4gICAgPlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L0xvY2F0aW9uQ29udGV4dC5Qcm92aWRlcj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUxvY2F0aW9uVXRpbHMgPSAoKTogTG9jYXRpb25Db250ZXh0VHlwZSA9PiB7XHJcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KTtcclxuICBpZiAoIWNvbnRleHQpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcigndXNlTG9jYXRpb25VdGlscyBtdXN0IGJlIHVzZWQgd2l0aGluIGEgTG9jYXRpb25Qcm92aWRlcicpO1xyXG4gIH1cclxuICByZXR1cm4gY29udGV4dDtcclxufTtcclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJMb2NhdGlvbkNvbnRleHQiLCJ1bmRlZmluZWQiLCJMb2NhdGlvblByb3ZpZGVyIiwiY2hpbGRyZW4iLCJmb3JtYXRDaXR5Q291bnRyeSIsImxvY2F0aW9uU3RyaW5nIiwicGFydHMiLCJzcGxpdCIsIm1hcCIsInAiLCJ0cmltIiwibGVuZ3RoIiwiY291bnRyeSIsImNpdHkiLCJleHRyYWN0Q291bnRyeUZyb21GZWF0dXJlIiwiZmVhdHVyZSIsImNvdW50cnlDb250ZXh0IiwiY29udGV4dCIsImZpbmQiLCJjIiwiaWQiLCJzdGFydHNXaXRoIiwidGV4dCIsInBsYWNlX25hbWUiLCJleHRyYWN0Q291bnRyeUZyb21TdHJpbmciLCJQcm92aWRlciIsInZhbHVlIiwidXNlTG9jYXRpb25VdGlscyIsIkVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/tracking/context/LocationContex.tsx\n");

/***/ }),

/***/ "./components/tracking/persistence/AircraftDataPersistence.ts":
/*!********************************************************************!*\
  !*** ./components/tracking/persistence/AircraftDataPersistence.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearAircraftData: () => (/* binding */ clearAircraftData),\n/* harmony export */   getSessionId: () => (/* binding */ getSessionId),\n/* harmony export */   loadAircraftData: () => (/* binding */ loadAircraftData),\n/* harmony export */   loadMapState: () => (/* binding */ loadMapState),\n/* harmony export */   loadSelectedAircraft: () => (/* binding */ loadSelectedAircraft),\n/* harmony export */   loadTrailState: () => (/* binding */ loadTrailState),\n/* harmony export */   mergeAircraftData: () => (/* binding */ mergeAircraftData),\n/* harmony export */   saveAircraftData: () => (/* binding */ saveAircraftData),\n/* harmony export */   saveMapState: () => (/* binding */ saveMapState),\n/* harmony export */   saveSelectedAircraft: () => (/* binding */ saveSelectedAircraft),\n/* harmony export */   saveTrailState: () => (/* binding */ saveTrailState)\n/* harmony export */ });\n// utils/AircraftDataPersistance.ts\n// Storage keys\nconst AIRCRAFT_DATA_KEY = 'aircraft_tracking_data';\nconst MAP_STATE_KEY = 'aircraft_map_state';\nconst SELECTED_AIRCRAFT_KEY = 'selected_aircraft';\nconst TRAIL_STATE_KEY = 'aircraft_trail_state';\n/**\r\n * Save aircraft data to localStorage\r\n */ function saveAircraftData(data) {\n    // Check if we're in a browser environment\n    if (true) {\n        return;\n    }\n    try {\n        localStorage.setItem(AIRCRAFT_DATA_KEY, JSON.stringify(data));\n        console.log(`[Persistence] Saved ${Object.keys(data).length} aircraft to localStorage`);\n    } catch (error) {\n        console.error('[Persistence] Error saving aircraft data:', error);\n        // Handle quota exceeded errors\n        if (error instanceof DOMException && error.name === 'QuotaExceededError') {\n            // Clear older entries to make room\n            pruneOldAircraftData(data);\n        }\n    }\n}\n/**\r\n * Load aircraft data from localStorage\r\n */ function loadAircraftData() {\n    // Check if we're in a browser environment\n    if (true) {\n        return {};\n    }\n    try {\n        const data = localStorage.getItem(AIRCRAFT_DATA_KEY);\n        if (!data) return {};\n        const parsed = JSON.parse(data);\n        console.log(`[Persistence] Loaded ${Object.keys(parsed).length} aircraft from localStorage`);\n        // Filter out stale data (older than 24 hours)\n        return filterStaleData(parsed);\n    } catch (error) {\n        console.error('[Persistence] Error loading aircraft data:', error);\n        return {};\n    }\n}\n/**\r\n * Clear all aircraft data from localStorage\r\n */ function clearAircraftData() {\n    if (true) {\n        return;\n    }\n    try {\n        localStorage.removeItem(AIRCRAFT_DATA_KEY);\n        console.log('[Persistence] Cleared all aircraft data from localStorage');\n    } catch (error) {\n        console.error('[Persistence] Error clearing aircraft data:', error);\n    }\n}\n/**\r\n * Save map state to localStorage\r\n */ function saveMapState(center, zoom) {\n    if (true) {\n        return;\n    }\n    try {\n        const mapState = {\n            center,\n            zoom,\n            lastUpdated: Date.now()\n        };\n        localStorage.setItem(MAP_STATE_KEY, JSON.stringify(mapState));\n    } catch (error) {\n        console.error('[Persistence] Error saving map state:', error);\n    }\n}\n/**\r\n * Load map state from localStorage\r\n */ function loadMapState() {\n    if (true) {\n        return null;\n    }\n    try {\n        const data = localStorage.getItem(MAP_STATE_KEY);\n        if (!data) return null;\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('[Persistence] Error loading map state:', error);\n        return null;\n    }\n}\n/**\r\n * Save selected aircraft ICAO24 to localStorage\r\n */ function saveSelectedAircraft(icao) {\n    if (true) {\n        return;\n    }\n    try {\n        if (icao) {\n            localStorage.setItem(SELECTED_AIRCRAFT_KEY, icao);\n        } else {\n            localStorage.removeItem(SELECTED_AIRCRAFT_KEY);\n        }\n    } catch (error) {\n        console.error('[Persistence] Error saving selected aircraft:', error);\n    }\n}\n/**\r\n * Load selected aircraft ICAO24 from localStorage\r\n */ function loadSelectedAircraft() {\n    if (true) {\n        return null;\n    }\n    try {\n        return localStorage.getItem(SELECTED_AIRCRAFT_KEY);\n    } catch (error) {\n        console.error('[Persistence] Error loading selected aircraft:', error);\n        return null;\n    }\n}\n/**\r\n * Save trail state to localStorage\r\n */ function saveTrailState(state) {\n    if (true) {\n        return;\n    }\n    try {\n        // Limit the number of trails saved to avoid storage limits\n        const limitedTrails = {\n            ...state,\n            trails: {}\n        };\n        // Only save max 20 trails to avoid storage issues\n        const icaos = Object.keys(state.trails).slice(0, 20);\n        // For each saved trail, limit the number of points\n        icaos.forEach((icao)=>{\n            // Limit each trail to 100 points max (about 5-10 minutes of data)\n            const trail = state.trails[icao];\n            limitedTrails.trails[icao] = trail.slice(Math.max(0, trail.length - 100));\n        });\n        localStorage.setItem(TRAIL_STATE_KEY, JSON.stringify(limitedTrails));\n        console.log(`[Persistence] Saved trail state with ${icaos.length} trails`);\n    } catch (error) {\n        console.error('[Persistence] Error saving trail state:', error);\n    }\n}\n/**\r\n * Load trail state from localStorage\r\n */ function loadTrailState() {\n    if (true) {\n        return null;\n    }\n    try {\n        const data = localStorage.getItem(TRAIL_STATE_KEY);\n        if (!data) return null;\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('[Persistence] Error loading trail state:', error);\n        return null;\n    }\n}\n/**\r\n * Filter out stale data (older than 24 hours)\r\n */ function filterStaleData(data) {\n    const cutoff = Date.now() - 24 * 60 * 60 * 1000; // 24 hours ago\n    const filtered = {};\n    for (const [icao, aircraft] of Object.entries(data)){\n        // Skip if lastUpdated is missing or too old\n        if (!aircraft.lastUpdated || aircraft.lastUpdated < cutoff) {\n            continue;\n        }\n        filtered[icao] = aircraft;\n    }\n    const removedCount = Object.keys(data).length - Object.keys(filtered).length;\n    if (removedCount > 0) {\n        console.log(`[Persistence] Filtered out ${removedCount} stale aircraft`);\n    }\n    return filtered;\n}\n/**\r\n * Prune old aircraft data when storage quota is exceeded\r\n */ function pruneOldAircraftData(data) {\n    // Sort by lastUpdated timestamp (oldest first)\n    const sortedEntries = Object.entries(data).sort(([, a], [, b])=>(a.lastUpdated || 0) - (b.lastUpdated || 0));\n    // Remove the oldest 25% of entries\n    const toRemove = Math.ceil(sortedEntries.length * 0.25);\n    const prunedData = {};\n    // Keep only the newer 75%\n    sortedEntries.slice(toRemove).forEach(([icao, aircraft])=>{\n        prunedData[icao] = aircraft;\n    });\n    console.log(`[Persistence] Pruned ${toRemove} aircraft to save storage space`);\n    // Try saving again with reduced data\n    try {\n        localStorage.setItem(AIRCRAFT_DATA_KEY, JSON.stringify(prunedData));\n    } catch (error) {\n        // If still failing, clear everything\n        console.error('[Persistence] Still exceeding quota after pruning, clearing all data');\n        clearAircraftData();\n    }\n}\n/**\r\n * Merge current aircraft data with cached data\r\n * Prioritize dynamic fields from current data, preserve static fields from cache\r\n */ function mergeAircraftData(cachedData, currentData) {\n    const result = {\n        ...cachedData\n    };\n    // Process all current aircraft\n    for (const [icao, currentAircraft] of Object.entries(currentData)){\n        const cachedAircraft = cachedData[icao];\n        if (!cachedAircraft) {\n            // No cached data, just use current data\n            result[icao] = {\n                ...currentAircraft,\n                lastUpdated: Date.now()\n            };\n            continue;\n        }\n        // Merge with prioritization of fields\n        result[icao] = mergeAircraftFields(cachedAircraft, currentAircraft);\n    }\n    return result;\n}\n/**\r\n * Merge fields from two aircraft objects with field-specific priorities\r\n */ function mergeAircraftFields(cached, current) {\n    // Create a new object to avoid mutating the original\n    const result = {\n        ...cached\n    };\n    // Always update these dynamic position fields from current data\n    const dynamicFields = [\n        'latitude',\n        'longitude',\n        'altitude',\n        'velocity',\n        'heading',\n        'on_ground',\n        'last_contact'\n    ];\n    // Update all dynamic fields from current data\n    for (const field of dynamicFields){\n        if (current[field] !== undefined) {\n            result[field] = current[field];\n        }\n    }\n    // Update static fields only if they have values in current data\n    const staticFields = [\n        'registration',\n        'MODEL',\n        'MANUFACTURER',\n        'REGISTRATION',\n        'TYPE_AIRCRAFT',\n        'NAME',\n        'TYPE_REGISTRANT',\n        'CITY',\n        'STATE'\n    ];\n    for (const field of staticFields){\n        const key = field;\n        if (current[key] !== undefined && current[key] !== null && current[key] !== '') {\n            result[field] = current[key];\n        }\n    }\n    // Always update timestamp\n    result.lastUpdated = Date.now();\n    return result;\n}\n/**\r\n * Get a session-persistent unique ID\r\n * This helps with tracking UI state across refreshes\r\n * Safe for server-side rendering\r\n */ function getSessionId() {\n    // Check if we're in a browser environment\n    if (true) {\n        // Return a temporary ID for server-side rendering\n        return `temp_session_${Date.now()}`;\n    }\n    // Browser environment\n    let id = sessionStorage.getItem('aircraft_tracking_session_id');\n    if (!id) {\n        id = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        sessionStorage.setItem('aircraft_tracking_session_id', id);\n    }\n    return id;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/tracking/persistence/AircraftDataPersistence.ts\n");

/***/ }),

/***/ "./components/tracking/persistence/DataPersistenceManager.tsx":
/*!********************************************************************!*\
  !*** ./components/tracking/persistence/DataPersistenceManager.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataPersistenceProvider: () => (/* binding */ DataPersistenceProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useDataPersistence: () => (/* binding */ useDataPersistence)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../persistence/AircraftDataPersistence */ \"./components/tracking/persistence/AircraftDataPersistence.ts\");\n// components/tracking/context/DataPersistenceManager.tsx\n\n\n\n// Create context\nconst DataPersistenceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Provider component\nconst DataPersistenceProvider = ({ children })=>{\n    // State for cached aircraft data\n    const [cachedAircraft, setCachedAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [lastUpdated, setLastUpdated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [cacheSize, setCacheSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [sessionId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.getSessionId)());\n    // Load data on initial mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DataPersistenceProvider.useEffect\": ()=>{\n            // Load cached aircraft data\n            const savedData = (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.loadAircraftData)();\n            if (savedData && Object.keys(savedData).length > 0) {\n                setCachedAircraft(savedData);\n                setCacheSize(Object.keys(savedData).length);\n                setLastUpdated(Date.now());\n                console.log(`[DataPersistence] Loaded ${Object.keys(savedData).length} aircraft from storage`);\n            }\n        }\n    }[\"DataPersistenceProvider.useEffect\"], []);\n    // Update aircraft cache with new data\n    const updateAircraftCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[updateAircraftCache]\": (aircraftList)=>{\n            if (!aircraftList || aircraftList.length === 0) return;\n            setCachedAircraft({\n                \"DataPersistenceProvider.useCallback[updateAircraftCache]\": (prevCache)=>{\n                    // Convert aircraft array to record format\n                    const currentData = {};\n                    aircraftList.forEach({\n                        \"DataPersistenceProvider.useCallback[updateAircraftCache]\": (aircraft)=>{\n                            if (aircraft.ICAO24) {\n                                // Convert to CachedAircraftData format\n                                currentData[aircraft.ICAO24] = {\n                                    ...aircraft,\n                                    ICAO24: aircraft.ICAO24,\n                                    lastUpdated: Date.now(),\n                                    // Ensure required fields are present with default values\n                                    latitude: aircraft.latitude || 0,\n                                    longitude: aircraft.longitude || 0,\n                                    altitude: aircraft.altitude || 0,\n                                    velocity: aircraft.velocity || 0,\n                                    heading: aircraft.heading || 0,\n                                    on_ground: aircraft.on_ground || false,\n                                    last_contact: aircraft.last_contact || Date.now()\n                                };\n                            }\n                        }\n                    }[\"DataPersistenceProvider.useCallback[updateAircraftCache]\"]);\n                    // Merge with existing cached data\n                    const mergedData = (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.mergeAircraftData)(prevCache, currentData);\n                    // Save to localStorage\n                    (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.saveAircraftData)(mergedData);\n                    // Update cache stats\n                    setCacheSize(Object.keys(mergedData).length);\n                    setLastUpdated(Date.now());\n                    return mergedData;\n                }\n            }[\"DataPersistenceProvider.useCallback[updateAircraftCache]\"]);\n        }\n    }[\"DataPersistenceProvider.useCallback[updateAircraftCache]\"], []);\n    // Get enhanced aircraft with cached data\n    const getEnhancedAircraft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[getEnhancedAircraft]\": (aircraft)=>{\n            if (!aircraft.ICAO24 || !cachedAircraft[aircraft.ICAO24]) {\n                return aircraft;\n            }\n            const cached = cachedAircraft[aircraft.ICAO24];\n            // Start with current aircraft data (for latest position)\n            const enhanced = {\n                ...aircraft\n            };\n            // Add missing fields from cache (only if they're empty in current data)\n            const staticFields = [\n                'registration',\n                'MODEL',\n                'MANUFACTURER',\n                'REGISTRATION',\n                'TYPE_AIRCRAFT',\n                'NAME',\n                'TYPE_REGISTRANT',\n                'CITY',\n                'STATE'\n            ];\n            staticFields.forEach({\n                \"DataPersistenceProvider.useCallback[getEnhancedAircraft]\": (field)=>{\n                    if ((!enhanced[field] || enhanced[field] === '') && cached[field]) {\n                        enhanced[field] = cached[field];\n                    }\n                }\n            }[\"DataPersistenceProvider.useCallback[getEnhancedAircraft]\"]);\n            return enhanced;\n        }\n    }[\"DataPersistenceProvider.useCallback[getEnhancedAircraft]\"], [\n        cachedAircraft\n    ]);\n    // Clear the cache\n    const clearCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[clearCache]\": ()=>{\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.clearAircraftData)();\n            setCachedAircraft({});\n            setCacheSize(0);\n            setLastUpdated(null);\n            console.log('[DataPersistence] Cache cleared');\n        }\n    }[\"DataPersistenceProvider.useCallback[clearCache]\"], []);\n    // Save map position\n    const saveMapPosition = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[saveMapPosition]\": (center, zoom)=>{\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.saveMapState)(center, zoom);\n        }\n    }[\"DataPersistenceProvider.useCallback[saveMapPosition]\"], []);\n    // Get initial map state\n    const getInitialMapState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[getInitialMapState]\": ()=>{\n            return (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.loadMapState)();\n        }\n    }[\"DataPersistenceProvider.useCallback[getInitialMapState]\"], []);\n    // Save selected aircraft\n    const saveSelectedAircraftId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[saveSelectedAircraftId]\": (icao)=>{\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.saveSelectedAircraft)(icao);\n        }\n    }[\"DataPersistenceProvider.useCallback[saveSelectedAircraftId]\"], []);\n    // Get selected aircraft\n    const getSelectedAircraftId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[getSelectedAircraftId]\": ()=>{\n            return (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.loadSelectedAircraft)();\n        }\n    }[\"DataPersistenceProvider.useCallback[getSelectedAircraftId]\"], []);\n    // Save trails\n    const saveTrails = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[saveTrails]\": (enabled, maxLength, trails)=>{\n            // Convert Map to Record for storage\n            const trailsRecord = {};\n            trails.forEach({\n                \"DataPersistenceProvider.useCallback[saveTrails]\": (positions, icao)=>{\n                    trailsRecord[icao] = positions;\n                }\n            }[\"DataPersistenceProvider.useCallback[saveTrails]\"]);\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.saveTrailState)({\n                enabled,\n                maxLength,\n                trails: trailsRecord,\n                lastUpdated: Date.now()\n            });\n        }\n    }[\"DataPersistenceProvider.useCallback[saveTrails]\"], []);\n    // Get initial trail state\n    const getInitialTrailState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[getInitialTrailState]\": ()=>{\n            const state = (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.loadTrailState)();\n            if (!state) return null;\n            // Convert Record back to Map\n            const trailsMap = new Map();\n            Object.entries(state.trails).forEach({\n                \"DataPersistenceProvider.useCallback[getInitialTrailState]\": ([icao, positions])=>{\n                    trailsMap.set(icao, positions);\n                }\n            }[\"DataPersistenceProvider.useCallback[getInitialTrailState]\"]);\n            return {\n                enabled: state.enabled,\n                maxLength: state.maxLength,\n                trails: trailsMap\n            };\n        }\n    }[\"DataPersistenceProvider.useCallback[getInitialTrailState]\"], []);\n    // Create context value\n    const contextValue = {\n        cachedAircraft,\n        updateAircraftCache,\n        getEnhancedAircraft,\n        clearCache,\n        saveMapPosition,\n        getInitialMapState,\n        saveSelectedAircraftId,\n        getSelectedAircraftId,\n        saveTrails,\n        getInitialTrailState,\n        cacheSize,\n        lastUpdated,\n        sessionId\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DataPersistenceContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\components\\\\tracking\\\\persistence\\\\DataPersistenceManager.tsx\",\n        lineNumber: 273,\n        columnNumber: 5\n    }, undefined);\n};\n// Custom hook to use the context\nconst useDataPersistence = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(DataPersistenceContext);\n    if (context === undefined) {\n        throw new Error('useDataPersistence must be used within a DataPersistenceProvider');\n    }\n    return context;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DataPersistenceContext);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3RyYWNraW5nL3BlcnNpc3RlbmNlL0RhdGFQZXJzaXN0ZW5jZU1hbmFnZXIudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEseURBQXlEOztBQVExQztBQWNpQztBQTRDaEQsaUJBQWlCO0FBQ2pCLE1BQU1pQix1Q0FBeUJoQixvREFBYUEsQ0FFMUNpQjtBQUVGLHFCQUFxQjtBQUNkLE1BQU1DLDBCQUE2RCxDQUFDLEVBQ3pFQyxRQUFRLEVBQ1Q7SUFDQyxpQ0FBaUM7SUFDakMsTUFBTSxDQUFDQyxnQkFBZ0JDLGtCQUFrQixHQUFHbEIsK0NBQVFBLENBRWxELENBQUM7SUFDSCxNQUFNLENBQUNtQixhQUFhQyxlQUFlLEdBQUdwQiwrQ0FBUUEsQ0FBZ0I7SUFDOUQsTUFBTSxDQUFDcUIsV0FBV0MsYUFBYSxHQUFHdEIsK0NBQVFBLENBQVM7SUFDbkQsTUFBTSxDQUFDdUIsVUFBVSxHQUFHdkIsK0NBQVFBLENBQVNZLGtGQUFZQTtJQUVqRCw2QkFBNkI7SUFDN0JiLGdEQUFTQTs2Q0FBQztZQUNSLDRCQUE0QjtZQUM1QixNQUFNeUIsWUFBWXJCLHNGQUFnQkE7WUFDbEMsSUFBSXFCLGFBQWFDLE9BQU9DLElBQUksQ0FBQ0YsV0FBV0csTUFBTSxHQUFHLEdBQUc7Z0JBQ2xEVCxrQkFBa0JNO2dCQUNsQkYsYUFBYUcsT0FBT0MsSUFBSSxDQUFDRixXQUFXRyxNQUFNO2dCQUMxQ1AsZUFBZVEsS0FBS0MsR0FBRztnQkFDdkJDLFFBQVFDLEdBQUcsQ0FDVCxDQUFDLHlCQUF5QixFQUFFTixPQUFPQyxJQUFJLENBQUNGLFdBQVdHLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztZQUVyRjtRQUNGOzRDQUFHLEVBQUU7SUFFTCxzQ0FBc0M7SUFDdEMsTUFBTUssc0JBQXNCL0Isa0RBQVdBO29FQUNyQyxDQUFDZ0M7WUFDQyxJQUFJLENBQUNBLGdCQUFnQkEsYUFBYU4sTUFBTSxLQUFLLEdBQUc7WUFFaERUOzRFQUFrQixDQUFDZ0I7b0JBQ2pCLDBD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QUFzQkEsRUFBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzYXRob1xcRG9jdW1lbnRzXFxQcm9qZWN0c1xcYWlyY3JhZnQtdHJhY2tpbmdcXGNvbXBvbmVudHNcXHRyYWNraW5nXFxwZXJzaXN0ZW5jZVxcRGF0YVBlcnNpc3RlbmNlTWFuYWdlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29tcG9uZW50cy90cmFja2luZy9jb250ZXh0L0RhdGFQZXJzaXN0ZW5jZU1hbmFnZXIudHN4XHJcbmltcG9ydCBSZWFjdCwge1xyXG4gIGNyZWF0ZUNvbnRleHQsXHJcbiAgdXNlQ29udGV4dCxcclxuICB1c2VFZmZlY3QsXHJcbiAgdXNlU3RhdGUsXHJcbiAgdXNlQ2FsbGJhY2ssXHJcbiAgUmVhY3ROb2RlLFxyXG59IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQWlyY3JhZnQsIEV4dGVuZGVkQWlyY3JhZnQsIENhY2hlZEFpcmNyYWZ0RGF0YSB9IGZyb20gJ0AvdHlwZXMvYmFzZSc7XHJcbmltcG9ydCB7XHJcbiAgc2F2ZUFpcmNyYWZ0RGF0YSxcclxuICBsb2FkQWlyY3JhZnREYXRhLFxyXG4gIG1lcmdlQWlyY3JhZnREYXRhLFxyXG4gIGNsZWFyQWlyY3JhZnREYXRhLFxyXG4gIHNhdmVNYXBTdGF0ZSxcclxuICBsb2FkTWFwU3RhdGUsXHJcbiAgc2F2ZVNlbGVjdGVkQWlyY3JhZnQsXHJcbiAgbG9hZFNlbGVjdGVkQWlyY3JhZnQsXHJcbiAgc2F2ZVRyYWlsU3RhdGUsXHJcbiAgbG9hZFRyYWlsU3RhdGUsXHJcbiAgZ2V0U2Vzc2lvbklkLFxyXG59IGZyb20gJy4uL3BlcnNpc3RlbmNlL0FpcmNyYWZ0RGF0YVBlcnNpc3RlbmNlJztcclxuXHJcbi8vIERlZmluZSBUcmFpbCBQb3NpdGlvbiB0eXBlXHJcbmludGVyZmFjZSBUcmFpbFBvc2l0aW9uIHtcclxuICBsYXQ6IG51bWJlcjtcclxuICBsbmc6IG51bWJlcjtcclxuICBhbHQ6IG51bWJlciB8IG51bGw7XHJcbiAgdGltZXN0YW1wOiBudW1iZXI7XHJcbn1cclxuXHJcbi8vIERlZmluZSBjb250ZXh0IGludGVyZmFjZVxyXG5pbnRlcmZhY2UgRGF0YVBlcnNpc3RlbmNlQ29udGV4dFR5cGUge1xyXG4gIC8vIEFpcmNyYWZ0IGRhdGFcclxuICBjYWNoZWRBaXJjcmFmdDogUmVjb3JkPHN0cmluZywgQ2FjaGVkQWlyY3JhZnREYXRhPjtcclxuICB1cGRhdGVBaXJjcmFmdENhY2hlOiAoYWlyY3JhZnQ6IEV4dGVuZGVkQWlyY3JhZnRbXSkgPT4gdm9pZDtcclxuICBnZXRFbmhhbmNlZEFpcmNyYWZ0OiAoYWlyY3JhZnQ6IEV4dGVuZGVkQWlyY3JhZnQpID0+IEV4dGVuZGVkQWlyY3JhZnQ7XHJcbiAgY2xlYXJDYWNoZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgLy8gTWFwIHN0YXRlXHJcbiAgc2F2ZU1hcFBvc2l0aW9uOiAoY2VudGVyOiBbbnVtYmVyLCBudW1iZXJdLCB6b29tOiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgZ2V0SW5pdGlhbE1hcFN0YXRlOiAoKSA9PiB7IGNlbnRlcjogW251bWJlciwgbnVtYmVyXTsgem9vbTogbnVtYmVyIH0gfCBudWxsO1xyXG5cclxuICAvLyBTZWxlY3RlZCBhaXJjcmFmdFxyXG4gIHNhdmVTZWxlY3RlZEFpcmNyYWZ0SWQ6IChpY2FvOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkO1xyXG4gIGdldFNlbGVjdGVkQWlyY3JhZnRJZDogKCkgPT4gc3RyaW5nIHwgbnVsbDtcclxuXHJcbiAgLy8gVHJhaWwgc3RhdGVcclxuICBzYXZlVHJhaWxzOiAoXHJcbiAgICBlbmFibGVkOiBib29sZWFuLFxyXG4gICAgbWF4TGVuZ3RoOiBudW1iZXIsXHJcbiAgICB0cmFpbHM6IE1hcDxzdHJpbmcsIFRyYWlsUG9zaXRpb25bXT5cclxuICApID0+IHZvaWQ7XHJcbiAgZ2V0SW5pdGlhbFRyYWlsU3RhdGU6ICgpID0+IHtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBtYXhMZW5ndGg6IG51bWJlcjtcclxuICAgIHRyYWlsczogTWFwPHN0cmluZywgVHJhaWxQb3NpdGlvbltdPjtcclxuICB9IHwgbnVsbDtcclxuXHJcbiAgLy8gRGVidWcgaW5mb1xyXG4gIGNhY2hlU2l6ZTogbnVtYmVyO1xyXG4gIGxhc3RVcGRhdGVkOiBudW1iZXIgfCBudWxsO1xyXG4gIHNlc3Npb25JZDogc3RyaW5nO1xyXG59XHJcblxyXG4vLyBDcmVhdGUgY29udGV4dFxyXG5jb25zdCBEYXRhUGVyc2lzdGVuY2VDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxcclxuICBEYXRhUGVyc2lzdGVuY2VDb250ZXh0VHlwZSB8IHVuZGVmaW5lZFxyXG4+KHVuZGVmaW5lZCk7XHJcblxyXG4vLyBQcm92aWRlciBjb21wb25lbnRcclxuZXhwb3J0IGNvbnN0IERhdGFQZXJzaXN0ZW5jZVByb3ZpZGVyOiBSZWFjdC5GQzx7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfT4gPSAoe1xyXG4gIGNoaWxkcmVuLFxyXG59KSA9PiB7XHJcbiAgLy8gU3RhdGUgZm9yIGNhY2hlZCBhaXJjcmFmdCBkYXRhXHJcbiAgY29uc3QgW2NhY2hlZEFpcmNyYWZ0LCBzZXRDYWNoZWRBaXJjcmFmdF0gPSB1c2VTdGF0ZTxcclxuICAgIFJlY29yZDxzdHJpbmcsIENhY2hlZEFpcmNyYWZ0RGF0YT5cclxuICA+KHt9KTtcclxuICBjb25zdCBbbGFzdFVwZGF0ZWQsIHNldExhc3RVcGRhdGVkXSA9IHVzZVN0YXRlPG51bWJlciB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IFtjYWNoZVNpemUsIHNldENhY2hlU2l6ZV0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xyXG4gIGNvbnN0IFtzZXNzaW9uSWRdID0gdXNlU3RhdGU8c3RyaW5nPihnZXRTZXNzaW9uSWQoKSk7XHJcblxyXG4gIC8vIExvYWQgZGF0YSBvbiBpbml0aWFsIG1vdW50XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIC8vIExvYWQgY2FjaGVkIGFpcmNyYWZ0IGRhdGFcclxuICAgIGNvbnN0IHNhdmVkRGF0YSA9IGxvYWRBaXJjcmFmdERhdGEoKTtcclxuICAgIGlmIChzYXZlZERhdGEgJiYgT2JqZWN0LmtleXMoc2F2ZWREYXRhKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHNldENhY2hlZEFpcmNyYWZ0KHNhdmVkRGF0YSk7XHJcbiAgICAgIHNldENhY2hlU2l6ZShPYmplY3Qua2V5cyhzYXZlZERhdGEpLmxlbmd0aCk7XHJcbiAgICAgIHNldExhc3RVcGRhdGVkKERhdGUubm93KCkpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBgW0RhdGFQZXJzaXN0ZW5jZV0gTG9hZGVkICR7T2JqZWN0LmtleXMoc2F2ZWREYXRhKS5sZW5ndGh9IGFpcmNyYWZ0IGZyb20gc3RvcmFnZWBcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIFVwZGF0ZSBhaXJjcmFmdCBjYWNoZSB3aXRoIG5ldyBkYXRhXHJcbiAgY29uc3QgdXBkYXRlQWlyY3JhZnRDYWNoZSA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKGFpcmNyYWZ0TGlzdDogRXh0ZW5kZWRBaXJjcmFmdFtdKSA9PiB7XHJcbiAgICAgIGlmICghYWlyY3JhZnRMaXN0IHx8IGFpcmNyYWZ0TGlzdC5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgIHNldENhY2hlZEFpcmNyYWZ0KChwcmV2Q2FjaGUpID0+IHtcclxuICAgICAgICAvLyBDb252ZXJ0IGFpcmNyYWZ0IGFycmF5IHRvIHJlY29yZCBmb3JtYXRcclxuICAgICAgICBjb25zdCBjdXJyZW50RGF0YTogUmVjb3JkPHN0cmluZywgQ2FjaGVkQWlyY3JhZnREYXRhPiA9IHt9O1xyXG5cclxuICAgICAgICBhaXJjcmFmdExpc3QuZm9yRWFjaCgoYWlyY3JhZnQpID0+IHtcclxuICAgICAgICAgIGlmIChhaXJjcmFmdC5JQ0FPMjQpIHtcclxuICAgICAgICAgICAgLy8gQ29udmVydCB0byBDYWNoZWRBaXJjcmFmdERhdGEgZm9ybWF0XHJcbiAgICAgICAgICAgIGN1cnJlbnREYXRhW2FpcmNyYWZ0LklDQU8yNF0gPSB7XHJcbiAgICAgICAgICAgICAgLi4uYWlyY3JhZnQsXHJcbiAgICAgICAgICAgICAgSUNBTzI0OiBhaXJjcmFmdC5JQ0FPMjQsXHJcbiAgICAgICAgICAgICAgbGFzdFVwZGF0ZWQ6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgLy8gRW5zdXJlIHJlcXVpcmVkIGZpZWxkcyBhcmUgcHJlc2VudCB3aXRoIGRlZmF1bHQgdmFsdWVzXHJcbiAgICAgICAgICAgICAgbGF0aXR1ZGU6IGFpcmNyYWZ0LmxhdGl0dWRlIHx8IDAsXHJcbiAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBhaXJjcmFmdC5sb25naXR1ZGUgfHwgMCxcclxuICAgICAgICAgICAgICBhbHRpdHVkZTogYWlyY3JhZnQuYWx0aXR1ZGUgfHwgMCxcclxuICAgICAgICAgICAgICB2ZWxvY2l0eTogYWlyY3JhZnQudmVsb2NpdHkgfHwgMCxcclxuICAgICAgICAgICAgICBoZWFkaW5nOiBhaXJjcmFmdC5oZWFkaW5nIHx8IDAsXHJcbiAgICAgICAgICAgICAgb25fZ3JvdW5kOiBhaXJjcmFmdC5vbl9ncm91bmQgfHwgZmFsc2UsXHJcbiAgICAgICAgICAgICAgbGFzdF9jb250YWN0OiBhaXJjcmFmdC5sYXN0X2NvbnRhY3QgfHwgRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgfSBhcyBDYWNoZWRBaXJjcmFmdERhdGE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIE1lcmdlIHdpdGggZXhpc3RpbmcgY2FjaGVkIGRhdGFcclxuICAgICAgICBjb25zdCBtZXJnZWREYXRhID0gbWVyZ2VBaXJjcmFmdERhdGEocHJldkNhY2hlLCBjdXJyZW50RGF0YSk7XHJcblxyXG4gICAgICAgIC8vIFNhdmUgdG8gbG9jYWxTdG9yYWdlXHJcbiAgICAgICAgc2F2ZUFpcmNyYWZ0RGF0YShtZXJnZWREYXRhKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIGNhY2hlIHN0YXRzXHJcbiAgICAgICAgc2V0Q2FjaGVTaXplKE9iamVjdC5rZXlzKG1lcmdlZERhdGEpLmxlbmd0aCk7XHJcbiAgICAgICAgc2V0TGFzdFVwZGF0ZWQoRGF0ZS5ub3coKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBtZXJnZWREYXRhO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBbXVxyXG4gICk7XHJcblxyXG4gIC8vIEdldCBlbmhhbmNlZCBhaXJjcmFmdCB3aXRoIGNhY2hlZCBkYXRhXHJcbiAgY29uc3QgZ2V0RW5oYW5jZWRBaXJjcmFmdCA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKGFpcmNyYWZ0OiBFeHRlbmRlZEFpcmNyYWZ0KTogRXh0ZW5kZWRBaXJjcmFmdCA9PiB7XHJcbiAgICAgIGlmICghYWlyY3JhZnQuSUNBTzI0IHx8ICFjYWNoZWRBaXJjcmFmdFthaXJjcmFmdC5JQ0FPMjRdKSB7XHJcbiAgICAgICAgcmV0dXJuIGFpcmNyYWZ0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZWRBaXJjcmFmdFthaXJjcmFmdC5JQ0FPMjRdO1xyXG5cclxuICAgICAgLy8gU3RhcnQgd2l0aCBjdXJyZW50IGFpcmNyYWZ0IGRhdGEgKGZvciBsYXRlc3QgcG9zaXRpb24pXHJcbiAgICAgIGNvbnN0IGVuaGFuY2VkID0geyAuLi5haXJjcmFmdCB9O1xyXG5cclxuICAgICAgLy8gQWRkIG1pc3NpbmcgZmllbGRzIGZyb20gY2FjaGUgKG9ubHkgaWYgdGhleSdyZSBlbXB0eSBpbiBjdXJyZW50IGRhdGEpXHJcbiAgICAgIGNvbnN0IHN0YXRpY0ZpZWxkczogQXJyYXk8a2V5b2YgQ2FjaGVkQWlyY3JhZnREYXRhPiA9IFtcclxuICAgICAgICAncmVnaXN0cmF0aW9uJyxcclxuICAgICAgICAnTU9ERUwnLFxyXG4gICAgICAgICdNQU5VRkFDVFVSRVInLFxyXG4gICAgICAgICdSRUdJU1RSQVRJT04nLFxyXG4gICAgICAgICdUWVBFX0FJUkNSQUZUJyxcclxuICAgICAgICAnTkFNRScsXHJcbiAgICAgICAgJ1RZUEVfUkVHSVNUUkFOVCcsXHJcbiAgICAgICAgJ0NJVFknLFxyXG4gICAgICAgICdTVEFURScsXHJcbiAgICAgIF07XHJcblxyXG4gICAgICBzdGF0aWNGaWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAoIWVuaGFuY2VkW2ZpZWxkIGFzIGtleW9mIEV4dGVuZGVkQWlyY3JhZnRdIHx8XHJcbiAgICAgICAgICAgIGVuaGFuY2VkW2ZpZWxkIGFzIGtleW9mIEV4dGVuZGVkQWlyY3JhZnRdID09PSAnJykgJiZcclxuICAgICAgICAgIGNhY2hlZFtmaWVsZF1cclxuICAgICAgICApIHtcclxuICAgICAgICAgIChlbmhhbmNlZCBhcyBhbnkpW2ZpZWxkXSA9IGNhY2hlZFtmaWVsZF07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiBlbmhhbmNlZDtcclxuICAgIH0sXHJcbiAgICBbY2FjaGVkQWlyY3JhZnRdXHJcbiAgKTtcclxuXHJcbiAgLy8gQ2xlYXIgdGhlIGNhY2hlXHJcbiAgY29uc3QgY2xlYXJDYWNoZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGNsZWFyQWlyY3JhZnREYXRhKCk7XHJcbiAgICBzZXRDYWNoZWRBaXJjcmFmdCh7fSk7XHJcbiAgICBzZXRDYWNoZVNpemUoMCk7XHJcbiAgICBzZXRMYXN0VXBkYXRlZChudWxsKTtcclxuICAgIGNvbnNvbGUubG9nKCdbRGF0YVBlcnNpc3RlbmNlXSBDYWNoZSBjbGVhcmVkJyk7XHJcbiAgfSwgW10pO1xyXG5cclxuICAvLyBTYXZlIG1hcCBwb3NpdGlvblxyXG4gIGNvbnN0IHNhdmVNYXBQb3NpdGlvbiA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKGNlbnRlcjogW251bWJlciwgbnVtYmVyXSwgem9vbTogbnVtYmVyKSA9PiB7XHJcbiAgICAgIHNhdmVNYXBTdGF0ZShjZW50ZXIsIHpvb20pO1xyXG4gICAgfSxcclxuICAgIFtdXHJcbiAgKTtcclxuXHJcbiAgLy8gR2V0IGluaXRpYWwgbWFwIHN0YXRlXHJcbiAgY29uc3QgZ2V0SW5pdGlhbE1hcFN0YXRlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgcmV0dXJuIGxvYWRNYXBTdGF0ZSgpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gU2F2ZSBzZWxlY3RlZCBhaXJjcmFmdFxyXG4gIGNvbnN0IHNhdmVTZWxlY3RlZEFpcmNyYWZ0SWQgPSB1c2VDYWxsYmFjaygoaWNhbzogc3RyaW5nIHwgbnVsbCkgPT4ge1xyXG4gICAgc2F2ZVNlbGVjdGVkQWlyY3JhZnQoaWNhbyk7XHJcbiAgfSwgW10pO1xyXG5cclxuICAvLyBHZXQgc2VsZWN0ZWQgYWlyY3JhZnRcclxuICBjb25zdCBnZXRTZWxlY3RlZEFpcmNyYWZ0SWQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICByZXR1cm4gbG9hZFNlbGVjdGVkQWlyY3JhZnQoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIFNhdmUgdHJhaWxzXHJcbiAgY29uc3Qgc2F2ZVRyYWlscyA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKFxyXG4gICAgICBlbmFibGVkOiBib29sZWFuLFxyXG4gICAgICBtYXhMZW5ndGg6IG51bWJlcixcclxuICAgICAgdHJhaWxzOiBNYXA8c3RyaW5nLCBUcmFpbFBvc2l0aW9uW10+XHJcbiAgICApID0+IHtcclxuICAgICAgLy8gQ29udmVydCBNYXAgdG8gUmVjb3JkIGZvciBzdG9yYWdlXHJcbiAgICAgIGNvbnN0IHRyYWlsc1JlY29yZDogUmVjb3JkPHN0cmluZywgVHJhaWxQb3NpdGlvbltdPiA9IHt9O1xyXG4gICAgICB0cmFpbHMuZm9yRWFjaCgocG9zaXRpb25zLCBpY2FvKSA9PiB7XHJcbiAgICAgICAgdHJhaWxzUmVjb3JkW2ljYW9dID0gcG9zaXRpb25zO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNhdmVUcmFpbFN0YXRlKHtcclxuICAgICAgICBlbmFibGVkLFxyXG4gICAgICAgIG1heExlbmd0aCxcclxuICAgICAgICB0cmFpbHM6IHRyYWlsc1JlY29yZCxcclxuICAgICAgICBsYXN0VXBkYXRlZDogRGF0ZS5ub3coKSxcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgW11cclxuICApO1xyXG5cclxuICAvLyBHZXQgaW5pdGlhbCB0cmFpbCBzdGF0ZVxyXG4gIGNvbnN0IGdldEluaXRpYWxUcmFpbFN0YXRlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgY29uc3Qgc3RhdGUgPSBsb2FkVHJhaWxTdGF0ZSgpO1xyXG4gICAgaWYgKCFzdGF0ZSkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgLy8gQ29udmVydCBSZWNvcmQgYmFjayB0byBNYXBcclxuICAgIGNvbnN0IHRyYWlsc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBUcmFpbFBvc2l0aW9uW10+KCk7XHJcbiAgICBPYmplY3QuZW50cmllcyhzdGF0ZS50cmFpbHMpLmZvckVhY2goKFtpY2FvLCBwb3NpdGlvbnNdKSA9PiB7XHJcbiAgICAgIHRyYWlsc01hcC5zZXQoaWNhbywgcG9zaXRpb25zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGVuYWJsZWQ6IHN0YXRlLmVuYWJsZWQsXHJcbiAgICAgIG1heExlbmd0aDogc3RhdGUubWF4TGVuZ3RoLFxyXG4gICAgICB0cmFpbHM6IHRyYWlsc01hcCxcclxuICAgIH07XHJcbiAgfSwgW10pO1xyXG5cclxuICAvLyBDcmVhdGUgY29udGV4dCB2YWx1ZVxyXG4gIGNvbnN0IGNvbnRleHRWYWx1ZTogRGF0YVBlcnNpc3RlbmNlQ29udGV4dFR5cGUgPSB7XHJcbiAgICBjYWNoZWRBaXJjcmFmdCxcclxuICAgIHVwZGF0ZUFpcmNyYWZ0Q2FjaGUsXHJcbiAgICBnZXRFbmhhbmNlZEFpcmNyYWZ0LFxyXG4gICAgY2xlYXJDYWNoZSxcclxuICAgIHNhdmVNYXBQb3NpdGlvbixcclxuICAgIGdldEluaXRpYWxNYXBTdGF0ZSxcclxuICAgIHNhdmVTZWxlY3RlZEFpcmNyYWZ0SWQsXHJcbiAgICBnZXRTZWxlY3RlZEFpcmNyYWZ0SWQsXHJcbiAgICBzYXZlVHJhaWxzLFxyXG4gICAgZ2V0SW5pdGlhbFRyYWlsU3RhdGUsXHJcbiAgICBjYWNoZVNpemUsXHJcbiAgICBsYXN0VXBkYXRlZCxcclxuICAgIHNlc3Npb25JZCxcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPERhdGFQZXJzaXN0ZW5jZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvRGF0YVBlcnNpc3RlbmNlQ29udGV4dC5Qcm92aWRlcj5cclxuICApO1xyXG59O1xyXG5cclxuLy8gQ3VzdG9tIGhvb2sgdG8gdXNlIHRoZSBjb250ZXh0XHJcbmV4cG9ydCBjb25zdCB1c2VEYXRhUGVyc2lzdGVuY2UgPSAoKSA9PiB7XHJcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoRGF0YVBlcnNpc3RlbmNlQ29udGV4dCk7XHJcbiAgaWYgKGNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAndXNlRGF0YVBlcnNpc3RlbmNlIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBEYXRhUGVyc2lzdGVuY2VQcm92aWRlcidcclxuICAgICk7XHJcbiAgfVxyXG4gIHJldHVybiBjb250ZXh0O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGF0YVBlcnNpc3RlbmNlQ29udGV4dDtcclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwic2F2ZUFpcmNyYWZ0RGF0YSIsImxvYWRBaXJjcmFmdERhdGEiLCJtZXJnZUFpcmNyYWZ0RGF0YSIsImNsZWFyQWlyY3JhZnREYXRhIiwic2F2ZU1hcFN0YXRlIiwibG9hZE1hcFN0YXRlIiwic2F2ZVNlbGVjdGVkQWlyY3JhZnQiLCJsb2FkU2VsZWN0ZWRBaXJjcmFmdCIsInNhdmVUcmFpbFN0YXRlIiwibG9hZFRyYWlsU3RhdGUiLCJnZXRTZXNzaW9uSWQiLCJEYXRhUGVyc2lzdGVuY2VDb250ZXh0IiwidW5kZWZpbmVkIiwiRGF0YVBlcnNpc3RlbmNlUHJvdmlkZXIiLCJjaGlsZHJlbiIsImNhY2hlZEFpcmNyYWZ0Iiwic2V0Q2FjaGVkQWlyY3JhZnQiLCJsYXN0VXBkYXRlZCIsInNldExhc3RVcGRhdGVkIiwiY2FjaGVTaXplIiwic2V0Q2FjaGVTaXplIiwic2Vzc2lvbklkIiwic2F2ZWREYXRhIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsIkRhdGUiLCJub3ciLCJjb25zb2xlIiwibG9nIiwidXBkYXRlQWlyY3JhZnRDYWNoZSIsImFpcmNyYWZ0TGlzdCIsInByZXZDYWNoZSIsImN1cnJlbnREYXRhIiwiZm9yRWFjaCIsImFpcmNyYWZ0IiwiSUNBTzI0IiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJhbHRpdHVkZSIsInZlbG9jaXR5IiwiaGVhZGluZyIsIm9uX2dyb3VuZCIsImxhc3RfY29udGFjdCIsIm1lcmdlZERhdGEiLCJnZXRFbmhhbmNlZEFpcmNyYWZ0IiwiY2FjaGVkIiwiZW5oYW5jZWQiLCJzdGF0aWNGaWVsZHMiLCJmaWVsZCIsImNsZWFyQ2FjaGUiLCJzYXZlTWFwUG9zaXRpb24iLCJjZW50ZXIiLCJ6b29tIiwiZ2V0SW5pdGlhbE1hcFN0YXRlIiwic2F2ZVNlbGVjdGVkQWlyY3JhZnRJZCIsImljYW8iLCJnZXRTZWxlY3RlZEFpcmNyYWZ0SWQiLCJzYXZlVHJhaWxzIiwiZW5hYmxlZCIsIm1heExlbmd0aCIsInRyYWlscyIsInRyYWlsc1JlY29yZCIsInBvc2l0aW9ucyIsImdldEluaXRpYWxUcmFpbFN0YXRlIiwic3RhdGUiLCJ0cmFpbHNNYXAiLCJNYXAiLCJlbnRyaWVzIiwic2V0IiwiY29udGV4dFZhbHVlIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInVzZURhdGFQZXJzaXN0ZW5jZSIsImNvbnRleHQiLCJFcnJvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/tracking/persistence/DataPersistenceManager.tsx\n");

/***/ }),

/***/ "./config/map.ts":
/*!***********************!*\
  !*** ./config/map.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTINENTAL_US_BOUNDS: () => (/* binding */ CONTINENTAL_US_BOUNDS),\n/* harmony export */   GLOBAL_BOUNDS: () => (/* binding */ GLOBAL_BOUNDS),\n/* harmony export */   MAP_CONFIG: () => (/* binding */ MAP_CONFIG),\n/* harmony export */   TILE_LAYER: () => (/* binding */ TILE_LAYER),\n/* harmony export */   getBoundsByRegion: () => (/* binding */ getBoundsByRegion),\n/* harmony export */   getLeafletCRS: () => (/* binding */ getLeafletCRS),\n/* harmony export */   getZoomLevelForRegion: () => (/* binding */ getZoomLevelForRegion)\n/* harmony export */ });\n/* harmony import */ var _types_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/base */ \"./types/base.ts\");\n\nconst MAP_CONFIG = {\n    // Set center to a more global view (close to 0,0 but adjusted for better visibility)\n    CENTER: [\n        20,\n        0\n    ],\n    DEFAULT_ZOOM: 3,\n    // Keep North America bounds but add definitions for other regions\n    NORTH_AMERICA_BOUNDS: [\n        [\n            7.0,\n            -180.0\n        ],\n        [\n            72.0,\n            -50.0\n        ]\n    ],\n    REGION_ZOOM_LEVELS: {\n        GLOBAL: 3,\n        North_America: 4,\n        South_America: 4,\n        Europe: 4,\n        Asia: 4,\n        Africa: 4,\n        Oceania: 4\n    },\n    // Add other regional bounds\n    SOUTH_AMERICA_BOUNDS: [\n        [\n            -60.0,\n            -85.0\n        ],\n        [\n            15.0,\n            -30.0\n        ]\n    ],\n    EUROPE_BOUNDS: [\n        [\n            36.0,\n            -10.0\n        ],\n        [\n            70.0,\n            40.0\n        ]\n    ],\n    ASIA_BOUNDS: [\n        [\n            -10.0,\n            60.0\n        ],\n        [\n            60.0,\n            150.0\n        ]\n    ],\n    AFRICA_BOUNDS: [\n        [\n            -35.0,\n            -20.0\n        ],\n        [\n            40.0,\n            55.0\n        ]\n    ],\n    OCEANIA_BOUNDS: [\n        [\n            -50.0,\n            110.0\n        ],\n        [\n            10.0,\n            180.0\n        ]\n    ],\n    GLOBAL_BOUNDS: [\n        [\n            -85,\n            -180\n        ],\n        [\n            85,\n            180\n        ]\n    ],\n    OPTIONS: {\n        zoomControl: false,\n        minZoom: 3,\n        maxZoom: 18,\n        scrollWheelZoom: true,\n        worldCopyJump: true\n    },\n    CONTROLS: {\n        ZOOM: {\n            MIN: 2,\n            MAX: 18,\n            DEFAULT: 3,\n            AIRCRAFT_FOCUS: 12,\n            POSITION: 'topright'\n        },\n        BOUNDS: {\n            MAX_LAT: 85,\n            MIN_LAT: -85,\n            MAX_LNG: 180,\n            MIN_LNG: -180\n        },\n        POSITION: {\n            TOP_RIGHT: 'topright',\n            TOP_LEFT: 'topleft',\n            BOTTOM_RIGHT: 'bottomright',\n            BOTTOM_LEFT: 'bottomleft'\n        },\n        TILE_LAYER: {\n            // OpenStreetMap is generally better for global coverage than OpenTopoMap\n            URL: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            ATTRIBUTION: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n            maxZoom: 19\n        },\n        // Add alternate tile layers that might be better for global use\n        ALTERNATE_LAYERS: {\n            TERRAIN: {\n                URL: 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.png',\n                ATTRIBUTION: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>',\n                maxZoom: 18\n            },\n            TONER: {\n                URL: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}{r}.png',\n                ATTRIBUTION: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>',\n                maxZoom: 18\n            }\n        }\n    },\n    REFRESH_INTERVALS: {\n        POSITION_UPDATE: 50000,\n        DATA_SYNC: 60000\n    },\n    PADDING: {\n        DEFAULT: [\n            20,\n            20\n        ],\n        SIDEBAR_OPEN: [\n            300,\n            20\n        ]\n    },\n    CRS: null,\n    CLUSTER: {\n        MAX_CLUSTER_RADIUS: 80,\n        SPIDERFY_ON_MAX_ZOOM: true,\n        SHOW_COVERAGE_ON_HOVER: false,\n        DISABLE_CLUSTERS_AT_ZOOM: 12\n    },\n    BASE_LAYERS: {\n        OSM: 'OpenStreetMap',\n        SATELLITE: 'Satellite',\n        TOPOGRAPHIC: 'Topographic',\n        TERRAIN: 'Terrain',\n        TONER: 'Toner'\n    },\n    // Define regions for quick selection\n    REGIONS: {\n        GLOBAL: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.GLOBAL,\n        North_America: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.North_America,\n        Europe: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Europe,\n        Asia: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Asia,\n        Africa: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Africa,\n        Oceania: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Oceania,\n        South_America: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.South_America\n    }\n};\n// Reusable Bounds and Tile Layer\nconst CONTINENTAL_US_BOUNDS = MAP_CONFIG.NORTH_AMERICA_BOUNDS;\nconst GLOBAL_BOUNDS = MAP_CONFIG.GLOBAL_BOUNDS;\nconst TILE_LAYER = MAP_CONFIG.CONTROLS.TILE_LAYER;\n// ✨ Client-side utility to get CRS when needed\nconst getLeafletCRS = ()=>{\n    if (false) {}\n    return null;\n};\n// Helper function to get bounds by region name\nconst getBoundsByRegion = (region)=>{\n    // Check if the region is a string (backward compatibility)\n    if (typeof region === 'string') {\n        // Handle legacy string-based regions for backward compatibility\n        switch(region){\n            case 'North America':\n                return MAP_CONFIG.NORTH_AMERICA_BOUNDS;\n            case 'Europe':\n                return MAP_CONFIG.EUROPE_BOUNDS;\n            case 'Asia':\n                return MAP_CONFIG.ASIA_BOUNDS;\n            case 'Africa':\n                return MAP_CONFIG.AFRICA_BOUNDS;\n            case 'Oceania':\n                return MAP_CONFIG.OCEANIA_BOUNDS;\n            case 'South America':\n                return MAP_CONFIG.SOUTH_AMERICA_BOUNDS;\n            case 'Global':\n            default:\n                return MAP_CONFIG.GLOBAL_BOUNDS;\n        }\n    }\n    // Handle numeric regions\n    switch(region){\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.North_America:\n            return MAP_CONFIG.NORTH_AMERICA_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Europe:\n            return MAP_CONFIG.EUROPE_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Asia:\n            return MAP_CONFIG.ASIA_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Africa:\n            return MAP_CONFIG.AFRICA_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Oceania:\n            return MAP_CONFIG.OCEANIA_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.South_America:\n            return MAP_CONFIG.SOUTH_AMERICA_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.GLOBAL:\n        default:\n            return MAP_CONFIG.GLOBAL_BOUNDS;\n    }\n};\n// Add a new helper function to get the appropriate zoom level for a region\nconst getZoomLevelForRegion = (region)=>{\n    // Handle string-based regions for backward compatibility\n    if (typeof region === 'string') {\n        switch(region){\n            case 'North America':\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.North_America;\n            case 'Europe':\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.Europe;\n            case 'Asia':\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.Asia;\n            case 'Africa':\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.Africa;\n            case 'Oceania':\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.Oceania;\n            case 'Global':\n            default:\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.GLOBAL;\n        }\n    }\n    // Handle numeric regions\n    switch(region){\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.North_America:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.North_America;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Europe:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.Europe;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Asia:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.Asia;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Africa:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.Africa;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Oceania:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.Oceania;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.South_America:\n            // Fallback if South America zoom level isn't defined\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.South_America || MAP_CONFIG.REGION_ZOOM_LEVELS.GLOBAL;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.GLOBAL:\n        default:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.GLOBAL;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./config/map.ts\n");

/***/ }),

/***/ "./lib/services/openSkyTrackingService.ts":
/*!************************************************!*\
  !*** ./lib/services/openSkyTrackingService.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   setRefreshInProgress: () => (/* binding */ setRefreshInProgress)\n/* harmony export */ });\n// lib/services/OpenSkyTrackingService.ts\n// Track active requests to prevent duplicate calls\nconst activeRequests = new Map();\nconst trackingCache = new Map();\n// Add this at the top of your file, with the other variables\nlet blockAllApiCalls = false;\nasync function processBatchedRequests(items, batchProcessor, batchSize) {\n    // Initialize results as empty array\n    let allResults = [];\n    // Create batches\n    const batches = [];\n    for(let i = 0; i < items.length; i += batchSize){\n        batches.push(items.slice(i, i + batchSize));\n    }\n    console.log(`Processing ${items.length} items in ${batches.length} batches`);\n    // Process each batch sequentially\n    for(let i = 0; i < batches.length; i++){\n        const batch = batches[i];\n        try {\n            console.log(`Processing batch ${i + 1}/${batches.length} (${batch.length} items)`);\n            const batchResult = await batchProcessor(batch);\n            // Make sure batchResult is an array before spreading\n            if (Array.isArray(batchResult)) {\n                allResults = [\n                    ...allResults,\n                    ...batchResult\n                ];\n            } else {\n                console.warn(`Batch ${i + 1} returned non-array result. Skipping.`);\n            }\n            console.log(`Batch ${i + 1} complete, got ${Array.isArray(batchResult) ? batchResult.length : 0} results`);\n        } catch (error) {\n            console.error(`Error processing batch ${i + 1}:`, error);\n        // Continue with next batch\n        }\n    }\n    return allResults;\n}\n// In your openSkyTrackingService.js\nlet preventBoundsFit = false;\nconst setRefreshInProgress = (inProgress)=>{\n    preventBoundsFit = inProgress;\n    // Expose this to window for immediate access\n    if (false) {}\n    console.log('Setting preventBoundsFit to', inProgress);\n};\n// Call this at start/end of your refresh operations\n/**\r\n * Service for interacting with OpenSky tracking data\r\n */ class OpenSkyTrackingService {\n    updateTrackedIcao24sSet() {\n        // Clear the current set\n        this.trackedIcao24s.clear();\n        // Add all valid ICAO24 codes from tracked aircraft\n        this.trackedAircraft.forEach((aircraft)=>{\n            if (aircraft.ICAO24) {\n                this.trackedIcao24s.add(aircraft.ICAO24);\n            }\n        });\n        console.log(`[OpenSky] Updated tracked ICAO24s set: ${this.trackedIcao24s.size} aircraft`);\n    }\n    constructor(){\n        this.pendingRefresh = false;\n        this.refreshInterval = null;\n        this.currentManufacturer = null;\n        this.subscribers = new Set();\n        this.loading = false // Add this property\n        ;\n        // Tracking state\n        this.trackingActive = false;\n        this.trackedAircraft = [];\n        this.lastRefreshTime = 0;\n        this.modelStats = new Map();\n        this.trackedIcao24s = new Set();\n        this.lastFullRefreshTime = 0;\n        this.fullRefreshInterval = 3600000;\n        this.activeIcao24s = new Set();\n        this.currentRegion = null;\n        this.persistentAircraftCache = new Map();\n        /**\r\n   * Update this method to call updateTrackedAircraftState\r\n   */ this.isRefreshingPositions = false;\n    }\n    /**\r\n   * Block or unblock all API calls\r\n   */ setBlockAllApiCalls(block) {\n        console.log(`[OpenSky] ${block ? 'Blocking' : 'Unblocking'} all API calls`);\n        blockAllApiCalls = block;\n        return blockAllApiCalls;\n    }\n    /**\r\n   * Get current block status\r\n   */ isApiCallsBlocked() {\n        return blockAllApiCalls;\n    }\n    /**\r\n   * Get singleton instance\r\n   */ static getInstance() {\n        if (!OpenSkyTrackingService.instance) {\n            OpenSkyTrackingService.instance = new OpenSkyTrackingService();\n        }\n        return OpenSkyTrackingService.instance;\n    }\n    isLoading() {\n        return this.loading;\n    }\n    /**\r\n   * Subscribe to tracking updates\r\n   */ subscribe(callback) {\n        this.subscribers.add(callback);\n        // Immediately call with current data if available\n        if (this.trackedAircraft.length > 0) {\n            callback({\n                aircraft: this.trackedAircraft,\n                manufacturer: this.currentManufacturer,\n                timestamp: this.lastRefreshTime\n            });\n        }\n        // Return unsubscribe function\n        return ()=>{\n            this.subscribers.delete(callback);\n        };\n    }\n    subscribeToAircraft(callback) {\n        this.subscribers.add(callback);\n        // Immediately call with current data if available\n        if (this.trackedAircraft.length > 0) {\n            callback(this.trackedAircraft);\n        }\n        // Return unsubscribe function\n        return ()=>{\n            this.subscribers.delete(callback);\n        };\n    }\n    subscribeToStatus(callback) {\n        const statusCallback = ()=>callback(this.trackingActive ? 'Tracking Active' : 'Not Tracking');\n        this.subscribers.add(statusCallback);\n        // Immediately notify with current status\n        statusCallback();\n        // Return unsubscribe function\n        return ()=>{\n            this.subscribers.delete(statusCallback);\n        };\n    }\n    /**\r\n   * Manually refresh tracking data\r\n   */ async refreshNow() {\n        if (!this.trackingActive || !this.currentManufacturer) {\n            console.warn('[OpenSky] No active tracking session. Start tracking first.');\n            return;\n        }\n        openSkyTrackingService.disableAutoRefresh();\n        await openSkyTrackingService.refreshNow(); // manual\n        console.log('[OpenSky] Manually refreshing aircraft data...');\n        this.pendingRefresh = true;\n        try {\n            await this.fetchAndUpdateAircraft(this.currentManufacturer);\n        } catch (error) {\n            console.error('[OpenSky] Error refreshing aircraft data:', error);\n        } finally{\n            this.pendingRefresh = false;\n        }\n    }\n    getTrackedIcao24s() {\n        return Array.from(this.trackedIcao24s);\n    }\n    isAircraftTracked(ICAO24) {\n        return this.trackedIcao24s.has(ICAO24);\n    }\n    /**\r\n   * Refresh specific aircraft by ICAO24 codes\r\n   */ // In OpenSkyTrackingService.ts\n    async refreshSpecificAircraft(ICAO24s) {\n        if (this.isRefreshingPositions) {\n            return this.trackedAircraft;\n        }\n        this.isRefreshingPositions = true;\n        try {\n            if (!this.currentManufacturer || ICAO24s.length === 0) {\n                return this.trackedAircraft;\n            }\n            // Simple implementation - just get data for specific aircraft\n            const updatedAircraft = await this.getLiveAircraftData(this.currentManufacturer, ICAO24s, false);\n            // Update tracked aircraft\n            this.trackedAircraft = updatedAircraft;\n            // Notify subscribers\n            this.notifySubscribers();\n            return this.trackedAircraft;\n        } catch (error) {\n            return this.trackedAircraft;\n        } finally{\n            this.isRefreshingPositions = false;\n        }\n    }\n    /**\r\n   * Start tracking a manufacturer's aircraft\r\n   */ async trackManufacturer(manufacturer) {\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping tracking for ${manufacturer}`);\n            return []; // Return empty array instead of undefined\n        }\n        if (this.trackingActive && this.currentManufacturer === manufacturer) {\n            console.log(`[OpenSky] Already tracking ${manufacturer}`);\n            return this.trackedAircraft;\n        }\n        // Stop any existing tracking\n        this.stopTracking();\n        if (!manufacturer) {\n            return [];\n        }\n        console.log(`[OpenSky] Starting tracking for ${manufacturer}`);\n        this.currentManufacturer = manufacturer;\n        this.trackingActive = true;\n        // Clear active set\n        this.activeIcao24s.clear();\n        // Initial fetch\n        await this.fetchAndUpdateAircraft(manufacturer);\n        // Initialize our active aircraft set\n        this.updateActiveAircraftSet(this.trackedAircraft);\n        // Set the initial full refresh time\n        this.lastFullRefreshTime = Date.now();\n        console.log(`[OpenSky] Tracking started for ${manufacturer}, ${this.trackedAircraft.length} aircraft`);\n        return this.trackedAircraft;\n    }\n    /**\r\n   * Track aircraft by region\r\n   */ async trackRegion(region) {\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping region tracking`);\n            return [];\n        }\n        console.log(`[OpenSky] Tracking aircraft in region ${region}`);\n        try {\n            // Get aircraft in this region from API\n            const response = await fetch(`/api/tracking/region?region=${encodeURIComponent(region)}`);\n            if (!response.ok) {\n                throw new Error(`Region API error: ${response.statusText}`);\n            }\n            const data = await response.json();\n            const aircraftData = data.aircraft || [];\n            // Transform to match Aircraft interface\n            const transformedAircraft = aircraftData.map((a)=>({\n                    ICAO24: a.ICAO24 || '',\n                    REGISTRATION: a.REGISTRATION || '',\n                    N_NUMBER: a.N_NUMBER,\n                    MANUFACTURER: a.MANUFACTURER || '',\n                    MODEL: a.MODEL || '',\n                    OPERATOR: a.OPERATOR,\n                    latitude: a.latitude || 0,\n                    longitude: a.longitude || 0,\n                    altitude: a.altitude || 0,\n                    heading: a.heading || 0,\n                    velocity: a.velocity || 0,\n                    on_ground: a.on_ground || false,\n                    last_contact: a.last_contact || 0,\n                    NAME: a.NAME || '',\n                    CITY: a.CITY || '',\n                    STATE: a.STATE || '',\n                    TYPE_REGISTRANT: a.TYPE_REGISTRANT || 0,\n                    ownerType: a.ownerType,\n                    TYPE_AIRCRAFT: a.TYPE_AIRCRAFT || '',\n                    COUNTRY: a.COUNTRY,\n                    isTracked: true,\n                    REGION: a.REGION\n                }));\n            console.log(`[OpenSky] Found ${transformedAircraft.length} aircraft in region ${region}`);\n            return transformedAircraft;\n        } catch (error) {\n            console.error(`[OpenSky] Error tracking region:`, error);\n            return [];\n        }\n    }\n    /**\r\n   * Helper method to get aircraft by region from your database\r\n   */ async getAircraftByRegion(region) {\n        try {\n            const response = await fetch(`/api/tracking/region/${encodeURIComponent(region)}`);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch aircraft by region: ${response.statusText}`);\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(`[OpenSky] Error fetching aircraft for region ${region}:`, error);\n            return [];\n        }\n    }\n    /**\r\n   * Merge static aircraft data with position data\r\n   */ mergePositionData(staticAircraft, positionData) {\n        return staticAircraft.map((aircraft)=>{\n            const position = positionData.find((pos)=>pos.ICAO24 === aircraft.ICAO24);\n            if (position) {\n                return {\n                    ...aircraft,\n                    latitude: position.latitude,\n                    longitude: position.longitude,\n                    altitude: position.altitude,\n                    heading: position.heading,\n                    velocity: position.velocity,\n                    on_ground: position.on_ground,\n                    last_contact: position.last_contact\n                };\n            }\n            return aircraft;\n        }).filter((aircraft)=>// Only keep aircraft that have valid position data\n            typeof aircraft.latitude === 'number' && typeof aircraft.longitude === 'number');\n    }\n    /**\r\n   * Refresh positions for aircraft in the current region\r\n   */ async refreshRegionPositions() {\n        if (!this.trackingActive || !this.currentRegion) {\n            console.log('[OpenSky] No active region tracking to refresh');\n            return [];\n        }\n        if (this.isRefreshingPositions) {\n            console.log('[OpenSky] Already refreshing positions, skipping');\n            return this.trackedAircraft;\n        }\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping position refresh`);\n            return this.trackedAircraft;\n        }\n        this.isRefreshingPositions = false;\n        setRefreshInProgress(false);\n        this.loading = true;\n        try {\n            const icaoIds = Array.from(this.activeIcao24s);\n            if (icaoIds.length === 0) {\n                console.log('[OpenSky] No active aircraft to refresh positions for');\n                return [];\n            }\n            console.log(`[OpenSky] Refreshing positions for ${icaoIds.length} aircraft in region ${this.currentRegion}`);\n            // Get only position updates for the active aircraft\n            const updatedPositions = await this.getLiveAircraftData('', icaoIds, false, true // Only active aircraft\n            );\n            // Update tracked aircraft with new positions\n            if (updatedPositions.length > 0) {\n                // Update the set of active aircraft\n                this.activeIcao24s.clear();\n                updatedPositions.forEach((aircraft)=>{\n                    if (aircraft.ICAO24) {\n                        this.activeIcao24s.add(aircraft.ICAO24.toLowerCase());\n                    }\n                });\n                // Merge with static data\n                const regionalAircraft = await this.getAircraftByRegion(this.currentRegion);\n                const mergedAircraft = this.mergePositionData(regionalAircraft, updatedPositions);\n                this.trackedAircraft = mergedAircraft;\n                this.lastRefreshTime = Date.now();\n                this.notifySubscribers();\n            }\n            return this.trackedAircraft;\n        } catch (error) {\n            console.error('[OpenSky] Error refreshing region positions:', error);\n            return this.trackedAircraft;\n        } finally{\n            this.loading = false;\n            this.isRefreshingPositions = false;\n            setTimeout(()=>{\n                setRefreshInProgress(false);\n            }, 500);\n        }\n    }\n    getRefreshStats() {\n        const nextFullRefreshDue = this.lastFullRefreshTime + this.fullRefreshInterval;\n        const minutesUntilNextFull = Math.max(0, Math.floor((nextFullRefreshDue - Date.now()) / 60000));\n        return {\n            lastRefreshTime: this.lastRefreshTime,\n            lastFullRefreshTime: this.lastFullRefreshTime,\n            nextFullRefreshDue: nextFullRefreshDue,\n            fullRefreshInterval: this.fullRefreshInterval,\n            trackedAircraftCount: this.trackedAircraft.length\n        };\n    }\n    /**\r\n   * Get active MODEL counts for currently tracked aircraft\r\n   */ getActiveModelCounts() {\n        // Count active aircraft by MODEL\n        const modelCounts = new Map();\n        this.trackedAircraft.forEach((aircraft)=>{\n            const MODEL = aircraft.MODEL || aircraft.TYPE_AIRCRAFT || 'Unknown';\n            const currentCount = modelCounts.get(MODEL) || 0;\n            modelCounts.set(MODEL, currentCount + 1);\n        });\n        // Convert to array of AircraftModel objects\n        return Array.from(modelCounts.entries()).map(([MODEL, count])=>({\n                MODEL,\n                label: MODEL,\n                count: count,\n                activeCount: count,\n                totalCount: count,\n                // Ensure MANUFACTURER is always a string\n                MANUFACTURER: this.currentManufacturer || 'Unknown'\n            }));\n    }\n    /**\r\n   * Get MODEL statistics\r\n   */ getModelStats() {\n        const models = this.getActiveModelCounts();\n        const totalActive = this.trackedAircraft.length;\n        return {\n            models,\n            totalActive\n        };\n    }\n    /**\r\n   * Stop tracking aircraft\r\n   */ // Clear cache when stopping tracking\n    stopTracking() {\n        console.log('[OpenSky] Stopping tracking');\n        this.trackingActive = false;\n        this.currentManufacturer = null;\n        if (this.refreshInterval) {\n            clearInterval(this.refreshInterval);\n            this.refreshInterval = null;\n        }\n        this.trackedAircraft = [];\n        this.activeIcao24s.clear(); // Clear active set\n        this.persistentAircraftCache.clear(); // Clear the persistent cache\n        this.notifySubscribers();\n    }\n    /**\r\n   * Fetch aircraft data\r\n   */ async fetchAndUpdateAircraft(MANUFACTURER) {\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping fetch for ${MANUFACTURER}`);\n            return; // Just return without a value for void return type\n        }\n        try {\n            console.log(`[OpenSky] Fetching aircraft for ${MANUFACTURER}`);\n            // First get ICAO24 codes for this MANUFACTURER\n            const ICAO24s = await this.getIcao24sForManufacturer(MANUFACTURER);\n            if (ICAO24s.length === 0) {\n                console.log(`[OpenSky] No ICAO24 codes found for ${MANUFACTURER}`);\n                this.trackedAircraft = [];\n                this.trackedIcao24s.clear(); // Clear tracking set\n                this.notifySubscribers();\n                return;\n            }\n            // Then get live tracking data for these ICAO24 codes\n            const liveAircraft = await this.getLiveAircraftData(MANUFACTURER, ICAO24s);\n            // Update tracked aircraft and notify subscribers\n            this.trackedAircraft = liveAircraft;\n            this.updateTrackedIcao24sSet(); // Update our tracking set\n            this.lastRefreshTime = Date.now();\n            this.notifySubscribers();\n            console.log(`[OpenSky] Updated tracking data for ${MANUFACTURER}: ${liveAircraft.length} aircraft`);\n        } catch (error) {\n            console.error(`[OpenSky] Error fetching aircraft for ${MANUFACTURER}:`, error);\n        }\n    }\n    /**\r\n   * Helper method to get current state of tracking\r\n   */ getTrackingStatus() {\n        return {\n            active: this.trackingActive,\n            MANUFACTURER: this.currentManufacturer,\n            count: this.trackedAircraft.length,\n            lastRefresh: this.lastRefreshTime\n        };\n    }\n    /**\r\n   * Get ICAO24 codes for a manufacturer with optional region filtering\r\n   */ async getIcao24sForManufacturer(manufacturer, region) {\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping ICAO24 fetch for ${manufacturer}${region ? ` in region ${region}` : ''}`);\n            return []; // Return empty array instead of undefined\n        }\n        const requestKey = region ? `ICAO24s-${manufacturer}-${region}` : `ICAO24s-${manufacturer}`;\n        if (activeRequests.has(requestKey)) {\n            console.log(`[OpenSky] Using existing ICAO24s request for ${manufacturer}${region ? ` in region ${region}` : ''}`);\n            return activeRequests.get(requestKey);\n        }\n        const request = new Promise(async (resolve, reject)=>{\n            try {\n                console.log(`[OpenSky] Fetching ICAO24s for ${manufacturer}${region ? ` in region ${region}` : ''}`);\n                const requestBody = {\n                    manufacturer\n                };\n                // Add region to request body if provided\n                if (region !== undefined) {\n                    requestBody.region = region;\n                }\n                const response = await fetch('/api/tracking/icao24s', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(requestBody)\n                });\n                if (!response.ok) {\n                    throw new Error(`Failed to fetch ICAO24s: ${response.statusText}`);\n                }\n                const data = await response.json();\n                resolve(data.ICAO24s || []);\n            } catch (error) {\n                console.error(`[OpenSky] Error fetching ICAO24s for ${manufacturer}${region ? ` in region ${region}` : ''}:`, error);\n                reject(error);\n            }\n        });\n        activeRequests.set(requestKey, request);\n        return request;\n    }\n    getExtendedAircraft(modelFilter) {\n        let filtered = this.trackedAircraft;\n        // Apply MODEL filter if provided\n        if (modelFilter) {\n            filtered = filtered.filter((aircraft)=>aircraft.MODEL === modelFilter || aircraft.TYPE_AIRCRAFT === modelFilter);\n        }\n        // Transform to extended aircraft\n        return filtered.map((aircraft)=>({\n                ...aircraft,\n                type: aircraft.TYPE_AIRCRAFT || 'Unknown',\n                isGovernment: aircraft.OPERATOR?.toLowerCase().includes('government') ?? false\n            }));\n    }\n    async getLiveAircraftData(manufacturer, ICAO24s, includeStatic = true, activeOnly = false) {\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping operation`);\n            return []; // Or appropriate return value\n        }\n        // Keep your existing method code but modify the part where you process results\n        const cacheKey = `live-${manufacturer}-${includeStatic ? 'full' : 'pos'}-${ICAO24s.length}`;\n        // ... existing code ...\n        // Modify your existing fetchData function or add this processing after you get the results\n        const fetchDataWithCaching = async ()=>{\n            try {\n                // Use your existing code to fetch data\n                const BATCH_SIZE = 100;\n                console.log(`[OpenSky] Fetching live aircraft data in batches...`);\n                // Process batches without using Promise.race\n                const aircraftResults = await processBatchedRequests(ICAO24s, async (batch)=>{\n                    try {\n                        const response = await fetch('/api/tracking/live', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify({\n                                manufacturer,\n                                ICAO24s: batch,\n                                includeStatic,\n                                activeOnly\n                            })\n                        });\n                        if (!response.ok) {\n                            throw new Error(`Failed to fetch live data: ${response.status} ${response.statusText}`);\n                        }\n                        const data = await response.json();\n                        if (!data || !Array.isArray(data.aircraft)) {\n                            console.warn('[OpenSky] Unexpected response format:', data);\n                            return [];\n                        }\n                        return data.aircraft || [];\n                    } catch (fetchError) {\n                        console.error('[OpenSky] Batch fetch error:', fetchError);\n                        return []; // Return empty array for this batch\n                    }\n                }, BATCH_SIZE);\n                // Process the returned aircraft and merge with cached data\n                const processedAircraft = aircraftResults.map((aircraft)=>{\n                    if (!aircraft.ICAO24) return aircraft;\n                    const icao = aircraft.ICAO24.toLowerCase();\n                    const cachedAircraft = this.persistentAircraftCache.get(icao);\n                    if (cachedAircraft) {\n                        // Merge new data with cached data, prioritizing new position data\n                        const mergedAircraft = {\n                            ...cachedAircraft,\n                            ...aircraft,\n                            // Ensure any special fields from cache are preserved\n                            // TypeScript will now recognize these properties from our ExtendedAircraft interface\n                            markerData: cachedAircraft.markerData,\n                            popupData: cachedAircraft.popupData,\n                            tooltipData: cachedAircraft.tooltipData\n                        };\n                        // Update cache\n                        this.persistentAircraftCache.set(icao, mergedAircraft);\n                        return mergedAircraft;\n                    }\n                    // No cached data, store this aircraft in the cache\n                    const extendedAircraft = aircraft;\n                    this.persistentAircraftCache.set(icao, extendedAircraft);\n                    return extendedAircraft;\n                });\n                // Cache the result\n                const ttl = includeStatic ? 20000 : 10000; // 20s for full data, 10s for positions only\n                trackingCache.set(cacheKey, {\n                    data: processedAircraft,\n                    timestamp: Date.now(),\n                    ttl\n                });\n                return processedAircraft;\n            } catch (error) {\n                console.error(`[OpenSky] Error fetching live aircraft data:`, error);\n                // On error, return cached data if available\n                if (this.persistentAircraftCache.size > 0) {\n                    console.log(`[OpenSky] Returning ${this.persistentAircraftCache.size} cached aircraft on error`);\n                    return Array.from(this.persistentAircraftCache.values());\n                }\n                return []; // Return empty array on error with no cache\n            }\n        };\n        // Replace your existing fetchData function with fetchDataWithCaching\n        // or call it after your existing fetchData function\n        // Use an approach similar to your existing code\n        let timeoutId;\n        const requestPromise = new Promise((resolve)=>{\n            const timeoutDuration = includeStatic ? 60000 : 30000;\n            timeoutId = setTimeout(()=>{\n                console.warn(`[OpenSky] Request timed out after ${timeoutDuration / 1000} seconds`);\n                resolve([]);\n            }, timeoutDuration);\n            fetchDataWithCaching().then((result)=>{\n                clearTimeout(timeoutId);\n                resolve(result);\n            });\n        });\n        activeRequests.set(cacheKey, requestPromise);\n        try {\n            return await requestPromise;\n        } finally{\n            activeRequests.delete(cacheKey);\n        }\n    }\n    /**\r\n   * Notify all subscribers of changes\r\n   */ notifySubscribers() {\n        // Prepare the trail data only if trails are enabled\n        const data = {\n            aircraft: this.trackedAircraft,\n            manufacturer: this.currentManufacturer,\n            count: this.trackedAircraft.length,\n            timestamp: this.lastRefreshTime\n        };\n        this.subscribers.forEach((callback)=>callback(data));\n    }\n    disableAutoRefresh() {\n        if (this.refreshInterval) {\n            console.log('[OpenSky] Disabling auto refresh');\n            clearInterval(this.refreshInterval);\n            this.refreshInterval = null;\n        }\n    }\n    /**\r\n   * Manually refresh only position data for currently tracked aircraft\r\n   * without re-fetching ICAO24 codes from the database\r\n   */ /**\r\n   * Force a refresh of tracking data\r\n   */ async refreshTracking() {\n        if (!this.trackingActive || !this.currentManufacturer) {\n            return;\n        }\n        await this.fetchAndUpdateAircraft(this.currentManufacturer);\n    }\n    /**\r\n   * Get currently tracked aircraft\r\n   */ getTrackedAircraft() {\n        return this.trackedAircraft;\n    }\n    /**\r\n   * Aggregate aircraft into model statistics\r\n   */ aggregateAircraftModels(aircraft) {\n        const modelMap = new Map();\n        aircraft.forEach((a)=>{\n            if (!a.MODEL) return; // Skip aircraft without MODEL info\n            const key = `${a.MANUFACTURER || 'Unknown'}-${a.MODEL}`;\n            const existing = modelMap.get(key);\n            if (existing) {\n                existing.count++;\n                existing.activeCount++;\n                existing.totalCount++;\n                if (existing.ICAO24s && a.ICAO24) {\n                    existing.ICAO24s.push(a.ICAO24);\n                }\n            } else {\n                modelMap.set(key, {\n                    MODEL: a.MODEL,\n                    MANUFACTURER: a.MANUFACTURER || this.currentManufacturer || 'Unknown',\n                    label: a.MODEL,\n                    count: 1,\n                    activeCount: 1,\n                    totalCount: 1,\n                    ICAO24s: a.ICAO24 ? [\n                        a.ICAO24\n                    ] : []\n                });\n            }\n        });\n        return Array.from(modelMap.values());\n    }\n    /**\r\n   * Check if tracking is active\r\n   */ isTrackingActive() {\n        return this.trackingActive;\n    }\n    /**\r\n   * Get currently tracked MANUFACTURER\r\n   */ getCurrentManufacturer() {\n        return this.currentManufacturer;\n    }\n    /**\r\n   * This should be called after any tracking update to ensure MODEL counts are current\r\n   */ updateTrackedAircraftState() {\n        // Update last refresh time\n        this.lastRefreshTime = Date.now();\n        // Notify subscribers about the updated aircraft\n        this.notifySubscribers();\n        console.log(`[OpenSky] Updated tracking data: ${this.trackedAircraft.length} aircraft, ` + `${this.getActiveModelCounts().length} unique models`);\n    }\n    /**\r\n   * Enhanced refreshPositionsOnly method with periodic full refresh\r\n   */ async refreshPositionsOnly() {\n        if (this.isRefreshingPositions) {\n            console.log('[OpenSky] Already refreshing positions, skipping');\n            return this.trackedAircraft;\n        }\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping position refresh`);\n            return this.trackedAircraft; // Return current aircraft instead of undefined\n        }\n        // If we're not tracking anything, there's nothing to refresh\n        if (!this.trackingActive || !this.currentManufacturer) {\n            console.log('[OpenSky] No active tracking or manufacturer to refresh');\n            return this.trackedAircraft;\n        }\n        this.isRefreshingPositions = true;\n        setRefreshInProgress(false);\n        this.loading = true;\n        const refreshStartTime = Date.now();\n        try {\n            // Check if we should do a full refresh or just active aircraft\n            const shouldDoFullRefresh = this.activeIcao24s.size === 0 || Date.now() - this.lastFullRefreshTime > 3600000; // 1 hour\n            // Store manufacturer as a non-null variable to satisfy TypeScript\n            const manufacturer = this.currentManufacturer;\n            if (shouldDoFullRefresh) {\n                console.log('[OpenSky] Performing full refresh to discover active aircraft');\n                // First, get all ICAO24 codes for the manufacturer\n                const allIcao24s = await this.getIcao24sForManufacturer(manufacturer);\n                // Then get live data, but only for aircraft with position data\n                const updatedAircraft = await this.getLiveAircraftData(manufacturer, allIcao24s, true, true // activeOnly\n                );\n                // Update the set of active aircraft\n                this.activeIcao24s.clear();\n                updatedAircraft.forEach((aircraft)=>{\n                    if (aircraft.ICAO24) {\n                        this.activeIcao24s.add(aircraft.ICAO24.toLowerCase());\n                    }\n                });\n                this.lastFullRefreshTime = Date.now();\n                // Update tracked aircraft\n                this.trackedAircraft = updatedAircraft;\n                this.updateTrackedAircraftState();\n                console.log(`[OpenSky] Full refresh complete, tracking ${updatedAircraft.length} active aircraft`);\n                return updatedAircraft;\n            } else {\n                // Optimized refresh - only get updates for active aircraft\n                console.log(`[OpenSky] Performing optimized refresh for ${this.activeIcao24s.size} active aircraft`);\n                const activeIcaos = Array.from(this.activeIcao24s);\n                // Only request data for active aircraft\n                const updatedAircraft = await this.getLiveAircraftData(manufacturer, activeIcaos, false, true // activeOnly - ensure we only get aircraft with position data\n                );\n                // Update the set of active aircraft to remove any that are no longer active\n                this.activeIcao24s.clear();\n                updatedAircraft.forEach((aircraft)=>{\n                    if (aircraft.ICAO24) {\n                        this.activeIcao24s.add(aircraft.ICAO24.toLowerCase());\n                    }\n                });\n                // Update tracked aircraft\n                this.trackedAircraft = updatedAircraft;\n                this.updateTrackedAircraftState();\n                console.log(`[OpenSky] Optimized refresh complete, tracking ${updatedAircraft.length} active aircraft`);\n                return updatedAircraft;\n            }\n        } catch (error) {\n            console.error('[OpenSky] Error refreshing positions:', error);\n            return this.trackedAircraft;\n        } finally{\n            this.loading = false;\n            this.isRefreshingPositions = false;\n            // Calculate reset delay\n            const elapsedTime = Date.now() - refreshStartTime;\n            const resetDelay = Math.max(0, 500 - elapsedTime);\n            setTimeout(()=>{\n                setRefreshInProgress(false);\n            }, resetDelay + 500);\n        }\n    }\n    /**\r\n   * Track a manufacturer's aircraft with progress updates\r\n   * @param manufacturer The manufacturer to track\r\n   * @param progressCallback A callback that will be called with progress updates\r\n   */ async trackManufacturerWithProgress(manufacturer, progressCallback) {\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping tracking for ${manufacturer}`);\n            progressCallback({\n                message: 'API calls are currently blocked',\n                aircraft: [],\n                models: [],\n                total: 0,\n                complete: true\n            });\n            return [];\n        }\n        // Stop any existing tracking\n        this.stopTracking();\n        if (!manufacturer) {\n            progressCallback({\n                message: 'No manufacturer specified',\n                aircraft: [],\n                models: [],\n                total: 0,\n                complete: true\n            });\n            return [];\n        }\n        console.log(`[OpenSky] Starting progressive tracking for ${manufacturer}`);\n        this.currentManufacturer = manufacturer;\n        this.trackingActive = true;\n        this.loading = true;\n        try {\n            // Clear active set and tracked aircraft\n            this.activeIcao24s.clear();\n            this.trackedAircraft = [];\n            // First get ICAO24 codes for this manufacturer\n            progressCallback({\n                message: `Fetching aircraft identifiers for ${manufacturer}...`,\n                complete: false\n            });\n            const ICAO24s = await this.getIcao24sForManufacturer(manufacturer);\n            if (ICAO24s.length === 0) {\n                console.log(`[OpenSky] No ICAO24 codes found for ${manufacturer}`);\n                progressCallback({\n                    message: `No aircraft found for ${manufacturer}`,\n                    aircraft: [],\n                    models: [],\n                    total: 0,\n                    complete: true\n                });\n                this.trackedAircraft = [];\n                this.trackedIcao24s.clear();\n                this.loading = false;\n                return [];\n            }\n            progressCallback({\n                message: `Found ${ICAO24s.length} aircraft. Loading position data...`,\n                complete: false\n            });\n            // Process in smaller batches to avoid rate limits\n            const BATCH_SIZE = 50; // Smaller than the 100 OpenSky limit\n            const batches = [];\n            for(let i = 0; i < ICAO24s.length; i += BATCH_SIZE){\n                batches.push(ICAO24s.slice(i, i + BATCH_SIZE));\n            }\n            let loadedAircraft = [];\n            // Process each batch with delay between batches\n            for(let i = 0; i < batches.length; i++){\n                const batch = batches[i];\n                const batchPercent = Math.round(i / batches.length * 100);\n                progressCallback({\n                    message: `Loading batch ${i + 1}/${batches.length} (${batchPercent}%)...`,\n                    complete: false\n                });\n                try {\n                    // Get data for this batch\n                    const batchAircraft = await this.getLiveAircraftData(manufacturer, batch, true, false // Don't limit to active only for discovery\n                    );\n                    if (batchAircraft.length > 0) {\n                        // Add to our running total\n                        loadedAircraft = [\n                            ...loadedAircraft,\n                            ...batchAircraft\n                        ];\n                        // Update active tracked set\n                        this.updateActiveAircraftSet(batchAircraft);\n                        // Update our tracked aircraft with what we have so far\n                        this.trackedAircraft = loadedAircraft;\n                        // Create model stats using the aggregation function\n                        const models = this.aggregateAircraftModels(loadedAircraft);\n                        const totalActive = loadedAircraft.length;\n                        // Report progress with what we have so far\n                        progressCallback({\n                            message: `Loaded ${loadedAircraft.length} of ${ICAO24s.length} aircraft...`,\n                            aircraft: loadedAircraft,\n                            models: models,\n                            total: totalActive,\n                            complete: false\n                        });\n                    }\n                    // Wait between batches to avoid rate limits, but only if not the last batch\n                    if (i < batches.length - 1) {\n                        await new Promise((resolve)=>setTimeout(resolve, 5000)); // 5 second delay\n                    }\n                } catch (error) {\n                    console.error(`[OpenSky] Error processing batch ${i + 1}:`, error);\n                    // For batch processing, add more aggressive delay between batches\n                    for(let i = 0; i < batches.length; i++){\n                        // Wait longer before trying the next batch\n                        await new Promise((resolve)=>setTimeout(resolve, 60000)); // 1 minute wait\n                    }\n                }\n            }\n            // Final updates\n            this.lastRefreshTime = Date.now();\n            this.lastFullRefreshTime = Date.now();\n            this.updateTrackedIcao24sSet();\n            this.notifySubscribers();\n            // Final callback\n            const models = this.aggregateAircraftModels(loadedAircraft);\n            const totalActive = loadedAircraft.length;\n            progressCallback({\n                message: `Completed loading ${loadedAircraft.length} aircraft for ${manufacturer}`,\n                aircraft: loadedAircraft,\n                models: models,\n                total: totalActive,\n                complete: true\n            });\n            console.log(`[OpenSky] Progressive tracking complete for ${manufacturer}: ${loadedAircraft.length} aircraft`);\n            return loadedAircraft;\n        } catch (error) {\n            console.error(`[OpenSky] Error in progressive tracking for ${manufacturer}:`, error);\n            progressCallback({\n                message: `Error tracking ${manufacturer}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n                complete: true\n            });\n            return this.trackedAircraft;\n        } finally{\n            this.loading = false;\n        }\n    }\n    /**\r\n   * Updates the set of active aircraft based on position data\r\n   */ updateActiveAircraftSet(aircraft) {\n        aircraft.forEach((plane)=>{\n            if (plane.ICAO24 && plane.latitude && plane.longitude) {\n                this.activeIcao24s.add(plane.ICAO24.toLowerCase());\n            }\n        });\n        console.log(`[OpenSky] Active aircraft set has ${this.activeIcao24s.size} aircraft`);\n    }\n    /**\r\n   * Sets the interval between full refreshes\r\n   */ setFullRefreshInterval(minutes) {\n        const minMinutes = 10;\n        const validMinutes = Math.max(minMinutes, minutes);\n        this.fullRefreshInterval = validMinutes * 60 * 1000;\n        console.log(`[OpenSky] Full refresh interval set to ${validMinutes} minutes`);\n    }\n}\n// Export singleton instance\nconst openSkyTrackingService = OpenSkyTrackingService.getInstance();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (openSkyTrackingService);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/services/openSkyTrackingService.ts\n");

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=.%2Fnode_modules%5Cnext%5Cdist%5Cpages%5C_error.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=.%2Fnode_modules%5Cnext%5Cdist%5Cpages%5C_error.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D! ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps),\n/* harmony export */   getStaticPaths: () => (/* binding */ getStaticPaths),\n/* harmony export */   getStaticProps: () => (/* binding */ getStaticProps),\n/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   unstable_getServerProps: () => (/* binding */ unstable_getServerProps),\n/* harmony export */   unstable_getServerSideProps: () => (/* binding */ unstable_getServerSideProps),\n/* harmony export */   unstable_getStaticParams: () => (/* binding */ unstable_getStaticParams),\n/* harmony export */   unstable_getStaticPaths: () => (/* binding */ unstable_getStaticPaths),\n/* harmony export */   unstable_getStaticProps: () => (/* binding */ unstable_getStaticProps)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages/module.compiled */ \"./node_modules/next/dist/server/route-modules/pages/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! private-next-pages/_document */ \"./node_modules/next/dist/pages/_document.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! private-next-pages/_app */ \"./pages/_app.tsx\");\n/* harmony import */ var _node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules\\next\\dist\\pages\\_error.js */ \"./node_modules/next/dist/pages/_error.js\");\n/* harmony import */ var _node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__]);\nprivate_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the app and document modules.\n\n\n// Import the userland code.\n\n// Re-export the component (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'default'));\n// Re-export methods.\nconst getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'getStaticProps');\nconst getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'getStaticPaths');\nconst getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'getServerSideProps');\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'config');\nconst reportWebVitals = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'reportWebVitals');\n// Re-export legacy methods.\nconst unstable_getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'unstable_getStaticProps');\nconst unstable_getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'unstable_getStaticPaths');\nconst unstable_getStaticParams = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'unstable_getStaticParams');\nconst unstable_getServerProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'unstable_getServerProps');\nconst unstable_getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__, 'unstable_getServerSideProps');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n        page: \"/_error\",\n        pathname: \"/_error\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    components: {\n        // default export might not exist when optimized for data only\n        App: private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        Document: (private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default())\n    },\n    userland: _node_modules_next_dist_pages_error_js__WEBPACK_IMPORTED_MODULE_5__\n});\n\n//# sourceMappingURL=pages.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTJnBhZ2U9JTJGX2Vycm9yJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGbm9kZV9tb2R1bGVzJTVDbmV4dCU1Q2Rpc3QlNUNwYWdlcyU1Q19lcnJvci5qcyZhYnNvbHV0ZUFwcFBhdGg9cHJpdmF0ZS1uZXh0LXBhZ2VzJTJGX2FwcCZhYnNvbHV0ZURvY3VtZW50UGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfZG9jdW1lbnQmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RjtBQUNoQztBQUNFO0FBQzFEO0FBQ3lEO0FBQ1Y7QUFDL0M7QUFDeUU7QUFDekU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLG1FQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLHVCQUF1Qix3RUFBSyxDQUFDLG1FQUFRO0FBQ3JDLHVCQUF1Qix3RUFBSyxDQUFDLG1FQUFRO0FBQ3JDLDJCQUEyQix3RUFBSyxDQUFDLG1FQUFRO0FBQ3pDLGVBQWUsd0VBQUssQ0FBQyxtRUFBUTtBQUM3Qix3QkFBd0Isd0VBQUssQ0FBQyxtRUFBUTtBQUM3QztBQUNPLGdDQUFnQyx3RUFBSyxDQUFDLG1FQUFRO0FBQzlDLGdDQUFnQyx3RUFBSyxDQUFDLG1FQUFRO0FBQzlDLGlDQUFpQyx3RUFBSyxDQUFDLG1FQUFRO0FBQy9DLGdDQUFnQyx3RUFBSyxDQUFDLG1FQUFRO0FBQzlDLG9DQUFvQyx3RUFBSyxDQUFDLG1FQUFRO0FBQ3pEO0FBQ08sd0JBQXdCLGtHQUFnQjtBQUMvQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBYSw4REFBVztBQUN4QixrQkFBa0Isb0VBQWdCO0FBQ2xDLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxpQyIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIGFwcCBhbmQgZG9jdW1lbnQgbW9kdWxlcy5cbmltcG9ydCAqIGFzIGRvY3VtZW50IGZyb20gXCJwcml2YXRlLW5leHQtcGFnZXMvX2RvY3VtZW50XCI7XG5pbXBvcnQgKiBhcyBhcHAgZnJvbSBcInByaXZhdGUtbmV4dC1wYWdlcy9fYXBwXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9ub2RlX21vZHVsZXNcXFxcbmV4dFxcXFxkaXN0XFxcXHBhZ2VzXFxcXF9lcnJvci5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBjb21wb25lbnQgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgbWV0aG9kcy5cbmV4cG9ydCBjb25zdCBnZXRTdGF0aWNQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCAnZ2V0U3RhdGljUHJvcHMnKTtcbmV4cG9ydCBjb25zdCBnZXRTdGF0aWNQYXRocyA9IGhvaXN0KHVzZXJsYW5kLCAnZ2V0U3RhdGljUGF0aHMnKTtcbmV4cG9ydCBjb25zdCBnZXRTZXJ2ZXJTaWRlUHJvcHMgPSBob2lzdCh1c2VybGFuZCwgJ2dldFNlcnZlclNpZGVQcm9wcycpO1xuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG5leHBvcnQgY29uc3QgcmVwb3J0V2ViVml0YWxzID0gaG9pc3QodXNlcmxhbmQsICdyZXBvcnRXZWJWaXRhbHMnKTtcbi8vIFJlLWV4cG9ydCBsZWdhY3kgbWV0aG9kcy5cbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCAndW5zdGFibGVfZ2V0U3RhdGljUHJvcHMnKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQYXRocyA9IGhvaXN0KHVzZXJsYW5kLCAndW5zdGFibGVfZ2V0U3RhdGljUGF0aHMnKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQYXJhbXMgPSBob2lzdCh1c2VybGFuZCwgJ3Vuc3RhYmxlX2dldFN0YXRpY1BhcmFtcycpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFNlcnZlclByb3BzID0gaG9pc3QodXNlcmxhbmQsICd1bnN0YWJsZV9nZXRTZXJ2ZXJQcm9wcycpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFNlcnZlclNpZGVQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCAndW5zdGFibGVfZ2V0U2VydmVyU2lkZVByb3BzJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc1JvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFUyxcbiAgICAgICAgcGFnZTogXCIvX2Vycm9yXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9fZXJyb3JcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgfSxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIC8vIGRlZmF1bHQgZXhwb3J0IG1pZ2h0IG5vdCBleGlzdCB3aGVuIG9wdGltaXplZCBmb3IgZGF0YSBvbmx5XG4gICAgICAgIEFwcDogYXBwLmRlZmF1bHQsXG4gICAgICAgIERvY3VtZW50OiBkb2N1bWVudC5kZWZhdWx0XG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=.%2Fnode_modules%5Cnext%5Cdist%5Cpages%5C_error.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "./pages/_app.tsx":
/*!************************!*\
  !*** ./pages/_app.tsx ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/react-query */ \"@tanstack/react-query\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/styles/globals.css */ \"./styles/globals.css\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! leaflet/dist/leaflet.css */ \"./node_modules/leaflet/dist/leaflet.css\");\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _styles_leaflet_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/styles/leaflet.css */ \"./styles/leaflet.css\");\n/* harmony import */ var _styles_leaflet_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_styles_leaflet_css__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _styles_aircraftMapElements_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/styles/aircraftMapElements.css */ \"./styles/aircraftMapElements.css\");\n/* harmony import */ var _styles_aircraftMapElements_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_styles_aircraftMapElements_css__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-toastify/dist/ReactToastify.css */ \"./node_modules/react-toastify/dist/ReactToastify.css\");\n/* harmony import */ var react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-hot-toast */ \"react-hot-toast\");\n/* harmony import */ var _components_tracking_context_EnhancedUIContext__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/tracking/context/EnhancedUIContext */ \"./components/tracking/context/EnhancedUIContext.tsx\");\n/* harmony import */ var _components_tracking_context_EnhancedMapContext__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/tracking/context/EnhancedMapContext */ \"./components/tracking/context/EnhancedMapContext.tsx\");\n/* harmony import */ var _components_tracking_context_LocationContex__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/components/tracking/context/LocationContex */ \"./components/tracking/context/LocationContex.tsx\");\n/* harmony import */ var _components_tracking_persistence_DataPersistenceManager__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/tracking/persistence/DataPersistenceManager */ \"./components/tracking/persistence/DataPersistenceManager.tsx\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__, react_toastify__WEBPACK_IMPORTED_MODULE_8__, react_hot_toast__WEBPACK_IMPORTED_MODULE_9__]);\n([_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__, react_toastify__WEBPACK_IMPORTED_MODULE_8__, react_hot_toast__WEBPACK_IMPORTED_MODULE_9__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction MyApp({ Component, pageProps }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                ...pageProps\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                lineNumber: 19,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_hot_toast__WEBPACK_IMPORTED_MODULE_9__.Toaster, {\n                position: \"top-right\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                lineNumber: 20,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n// Create a QueryClient instance\nconst queryClient = new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnWindowFocus: false,\n            retry: 1\n        }\n    }\n});\n// Main App Component\nfunction App({ Component, pageProps }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClientProvider, {\n        client: queryClient,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_tracking_context_EnhancedUIContext__WEBPACK_IMPORTED_MODULE_10__.EnhancedUIProvider, {\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_tracking_context_EnhancedMapContext__WEBPACK_IMPORTED_MODULE_11__.EnhancedMapProvider, {\n                manufacturers: [],\n                onError: (msg)=>react_toastify__WEBPACK_IMPORTED_MODULE_8__.toast.error(msg),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_tracking_context_LocationContex__WEBPACK_IMPORTED_MODULE_12__.LocationProvider, {\n                    children: [\n                        ' ',\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_tracking_persistence_DataPersistenceManager__WEBPACK_IMPORTED_MODULE_13__.DataPersistenceProvider, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_toastify__WEBPACK_IMPORTED_MODULE_8__.ToastContainer, {\n                                    position: \"top-right\",\n                                    autoClose: 5000,\n                                    hideProgressBar: false,\n                                    newestOnTop: true,\n                                    closeOnClick: true,\n                                    rtl: false,\n                                    pauseOnFocusLoss: true,\n                                    draggable: true,\n                                    pauseOnHover: true\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                                    lineNumber: 48,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                                    ...pageProps\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                                    lineNumber: 59,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                            lineNumber: 47,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                    lineNumber: 44,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                lineNumber: 40,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n            lineNumber: 39,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n        lineNumber: 38,\n        columnNumber: 5\n    }, this);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErQjtBQUUwQztBQUMzQztBQUNJO0FBQ0o7QUFDWTtBQUNLO0FBQ1E7QUFDYjtBQUMyQztBQUNFO0FBQ1A7QUFDb0I7QUFFcEcsU0FBU1UsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBWTtJQUMvQyxxQkFDRTs7MEJBQ0UsOERBQUNEO2dCQUFXLEdBQUdDLFNBQVM7Ozs7OzswQkFDeEIsOERBQUNQLG9EQUFPQTtnQkFBQ1EsVUFBUzs7Ozs7Ozs7QUFHeEI7QUFFQSxnQ0FBZ0M7QUFDaEMsTUFBTUMsY0FBYyxJQUFJYiw4REFBV0EsQ0FBQztJQUNsQ2MsZ0JBQWdCO1FBQ2RDLFNBQVM7WUFDUEMsc0JBQXNCO1lBQ3RCQyxPQUFPO1FBQ1Q7SUFDRjtBQUNGO0FBRUEscUJBQXFCO0FBQ04sU0FBU0MsSUFBSSxFQUFFUixTQUFTLEVBQUVDLFNBQVMsRUFBWTtJQUM1RCxxQkFDRSw4REFBQ1Ysc0VBQW1CQTtRQUFDa0IsUUFBUU47a0JBQzNCLDRFQUFDUiwrRkFBa0JBO3NCQUNqQiw0RUFBQ0MsaUdBQW1CQTtnQkFDbEJjLGVBQWUsRUFBRTtnQkFDakJDLFNBQVMsQ0FBQ0MsTUFBUW5CLGlEQUFLQSxDQUFDb0IsS0FBSyxDQUFDRDswQkFFOUIsNEVBQUNmLDBGQUFnQkE7O3dCQUNkO3NDQUVELDhEQUFDQyw2R0FBdUJBOzs4Q0FDdEIsOERBQUNOLDBEQUFjQTtvQ0FDYlUsVUFBUztvQ0FDVFksV0FBVztvQ0FDWEMsaUJBQWlCO29DQUNqQkMsYUFBYTtvQ0FDYkMsWUFBWTtvQ0FDWkMsS0FBSztvQ0FDTEMsZ0JBQWdCO29DQUNoQkMsU0FBUztvQ0FDVEMsWUFBWTs7Ozs7OzhDQUVkLDhEQUFDckI7b0NBQVcsR0FBR0MsU0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT3RDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhdGhvXFxEb2N1bWVudHNcXFByb2plY3RzXFxhaXJjcmFmdC10cmFja2luZ1xccGFnZXNcXF9hcHAudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHR5cGUgeyBBcHBQcm9wcyB9IGZyb20gJ25leHQvYXBwJztcclxuaW1wb3J0IHsgUXVlcnlDbGllbnQsIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xyXG5pbXBvcnQgJ0Avc3R5bGVzL2dsb2JhbHMuY3NzJztcclxuaW1wb3J0ICdsZWFmbGV0L2Rpc3QvbGVhZmxldC5jc3MnO1xyXG5pbXBvcnQgJ0Avc3R5bGVzL2xlYWZsZXQuY3NzJztcclxuaW1wb3J0ICdAL3N0eWxlcy9haXJjcmFmdE1hcEVsZW1lbnRzLmNzcyc7XHJcbmltcG9ydCAncmVhY3QtdG9hc3RpZnkvZGlzdC9SZWFjdFRvYXN0aWZ5LmNzcyc7XHJcbmltcG9ydCB7IFRvYXN0Q29udGFpbmVyLCB0b2FzdCB9IGZyb20gJ3JlYWN0LXRvYXN0aWZ5JztcclxuaW1wb3J0IHsgVG9hc3RlciB9IGZyb20gJ3JlYWN0LWhvdC10b2FzdCc7XHJcbmltcG9ydCB7IEVuaGFuY2VkVUlQcm92aWRlciB9IGZyb20gJ0AvY29tcG9uZW50cy90cmFja2luZy9jb250ZXh0L0VuaGFuY2VkVUlDb250ZXh0JztcclxuaW1wb3J0IHsgRW5oYW5jZWRNYXBQcm92aWRlciB9IGZyb20gJ0AvY29tcG9uZW50cy90cmFja2luZy9jb250ZXh0L0VuaGFuY2VkTWFwQ29udGV4dCc7XHJcbmltcG9ydCB7IExvY2F0aW9uUHJvdmlkZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdHJhY2tpbmcvY29udGV4dC9Mb2NhdGlvbkNvbnRleCc7XHJcbmltcG9ydCB7IERhdGFQZXJzaXN0ZW5jZVByb3ZpZGVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy90cmFja2luZy9wZXJzaXN0ZW5jZS9EYXRhUGVyc2lzdGVuY2VNYW5hZ2VyJztcclxuXHJcbmZ1bmN0aW9uIE15QXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfTogQXBwUHJvcHMpIHtcclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxyXG4gICAgICA8VG9hc3RlciBwb3NpdGlvbj1cInRvcC1yaWdodFwiIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59XHJcblxyXG4vLyBDcmVhdGUgYSBRdWVyeUNsaWVudCBpbnN0YW5jZVxyXG5jb25zdCBxdWVyeUNsaWVudCA9IG5ldyBRdWVyeUNsaWVudCh7XHJcbiAgZGVmYXVsdE9wdGlvbnM6IHtcclxuICAgIHF1ZXJpZXM6IHtcclxuICAgICAgcmVmZXRjaE9uV2luZG93Rm9jdXM6IGZhbHNlLFxyXG4gICAgICByZXRyeTogMSwgLy8gUmV0cnkgZmFpbGVkIHF1ZXJpZXMgb25jZVxyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuXHJcbi8vIE1haW4gQXBwIENvbXBvbmVudFxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoeyBDb21wb25lbnQsIHBhZ2VQcm9wcyB9OiBBcHBQcm9wcykge1xyXG4gIHJldHVybiAoXHJcbiAgICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e3F1ZXJ5Q2xpZW50fT5cclxuICAgICAgPEVuaGFuY2VkVUlQcm92aWRlcj5cclxuICAgICAgICA8RW5oYW5jZWRNYXBQcm92aWRlclxyXG4gICAgICAgICAgbWFudWZhY3R1cmVycz17W119IC8vIFByb3ZpZGUgeW91ciBtYW51ZmFjdHVyZXJzIG9yIGdldCB0aGVtIGR5bmFtaWNhbGx5XHJcbiAgICAgICAgICBvbkVycm9yPXsobXNnKSA9PiB0b2FzdC5lcnJvcihtc2cpfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxMb2NhdGlvblByb3ZpZGVyPlxyXG4gICAgICAgICAgICB7JyAnfVxyXG4gICAgICAgICAgICB7Lyog4pyFIEFkZCBMb2NhdGlvblByb3ZpZGVyIGhlcmUgKi99XHJcbiAgICAgICAgICAgIDxEYXRhUGVyc2lzdGVuY2VQcm92aWRlcj5cclxuICAgICAgICAgICAgICA8VG9hc3RDb250YWluZXJcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uPVwidG9wLXJpZ2h0XCJcclxuICAgICAgICAgICAgICAgIGF1dG9DbG9zZT17NTAwMH1cclxuICAgICAgICAgICAgICAgIGhpZGVQcm9ncmVzc0Jhcj17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICBuZXdlc3RPblRvcD17dHJ1ZX1cclxuICAgICAgICAgICAgICAgIGNsb3NlT25DbGlja1xyXG4gICAgICAgICAgICAgICAgcnRsPXtmYWxzZX1cclxuICAgICAgICAgICAgICAgIHBhdXNlT25Gb2N1c0xvc3NcclxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZVxyXG4gICAgICAgICAgICAgICAgcGF1c2VPbkhvdmVyXHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICA8Q29tcG9uZW50IHsuLi5wYWdlUHJvcHN9IC8+XHJcbiAgICAgICAgICAgIDwvRGF0YVBlcnNpc3RlbmNlUHJvdmlkZXI+XHJcbiAgICAgICAgICA8L0xvY2F0aW9uUHJvdmlkZXI+XHJcbiAgICAgICAgPC9FbmhhbmNlZE1hcFByb3ZpZGVyPlxyXG4gICAgICA8L0VuaGFuY2VkVUlQcm92aWRlcj5cclxuICAgIDwvUXVlcnlDbGllbnRQcm92aWRlcj5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIlF1ZXJ5Q2xpZW50IiwiUXVlcnlDbGllbnRQcm92aWRlciIsIlRvYXN0Q29udGFpbmVyIiwidG9hc3QiLCJUb2FzdGVyIiwiRW5oYW5jZWRVSVByb3ZpZGVyIiwiRW5oYW5jZWRNYXBQcm92aWRlciIsIkxvY2F0aW9uUHJvdmlkZXIiLCJEYXRhUGVyc2lzdGVuY2VQcm92aWRlciIsIk15QXBwIiwiQ29tcG9uZW50IiwicGFnZVByb3BzIiwicG9zaXRpb24iLCJxdWVyeUNsaWVudCIsImRlZmF1bHRPcHRpb25zIiwicXVlcmllcyIsInJlZmV0Y2hPbldpbmRvd0ZvY3VzIiwicmV0cnkiLCJBcHAiLCJjbGllbnQiLCJtYW51ZmFjdHVyZXJzIiwib25FcnJvciIsIm1zZyIsImVycm9yIiwiYXV0b0Nsb3NlIiwiaGlkZVByb2dyZXNzQmFyIiwibmV3ZXN0T25Ub3AiLCJjbG9zZU9uQ2xpY2siLCJydGwiLCJwYXVzZU9uRm9jdXNMb3NzIiwiZHJhZ2dhYmxlIiwicGF1c2VPbkhvdmVyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/_app.tsx\n");

/***/ }),

/***/ "./styles/aircraftMapElements.css":
/*!****************************************!*\
  !*** ./styles/aircraftMapElements.css ***!
  \****************************************/
/***/ (() => {



/***/ }),

/***/ "./styles/globals.css":
/*!****************************!*\
  !*** ./styles/globals.css ***!
  \****************************/
/***/ (() => {



/***/ }),

/***/ "./styles/leaflet.css":
/*!****************************!*\
  !*** ./styles/leaflet.css ***!
  \****************************/
/***/ (() => {



/***/ }),

/***/ "./types/base.ts":
/*!***********************!*\
  !*** ./types/base.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegionCode: () => (/* binding */ RegionCode)\n/* harmony export */ });\n//types/base.ts\n/**\r\n * Basic geographical position\r\n */ var RegionCode = /*#__PURE__*/ function(RegionCode) {\n    RegionCode[RegionCode[\"GLOBAL\"] = 0] = \"GLOBAL\";\n    RegionCode[RegionCode[\"North_America\"] = 1] = \"North_America\";\n    RegionCode[RegionCode[\"Europe\"] = 2] = \"Europe\";\n    RegionCode[RegionCode[\"Asia\"] = 3] = \"Asia\";\n    RegionCode[RegionCode[\"South_America\"] = 4] = \"South_America\";\n    RegionCode[RegionCode[\"Africa\"] = 5] = \"Africa\";\n    RegionCode[RegionCode[\"Oceania\"] = 6] = \"Oceania\";\n    return RegionCode;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90eXBlcy9iYXNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxlQUFlO0FBQ2Y7O0NBRUMsR0E2Vk0sd0NBQUtBOzs7Ozs7OztXQUFBQTtNQVFYIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhdGhvXFxEb2N1bWVudHNcXFByb2plY3RzXFxhaXJjcmFmdC10cmFja2luZ1xcdHlwZXNcXGJhc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy90eXBlcy9iYXNlLnRzXHJcbi8qKlxyXG4gKiBCYXNpYyBnZW9ncmFwaGljYWwgcG9zaXRpb25cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG9zaXRpb24ge1xyXG4gIGxhdDogbnVtYmVyO1xyXG4gIGxuZzogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogRXh0ZW5kZWQgcG9zaXRpb24gd2l0aCBmbGlnaHQgZGF0YVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBaXJjcmFmdFBvc2l0aW9uIGV4dGVuZHMgUG9zaXRpb24ge1xyXG4gIGFsdGl0dWRlPzogbnVtYmVyO1xyXG4gIGhlYWRpbmc/OiBudW1iZXI7XHJcbiAgdmVsb2NpdHk/OiBudW1iZXI7XHJcbiAgb25fZ3JvdW5kPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcmUgYWlyY3JhZnQgZGF0YSBmcm9tIE9wZW5Ta3kgQVBJXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5Ta3lTdGF0ZSB7XHJcbiAgSUNBTzI0OiBzdHJpbmc7XHJcbiAgbGF0aXR1ZGU/OiBudW1iZXI7XHJcbiAgbG9uZ2l0dWRlPzogbnVtYmVyO1xyXG4gIGJhcm9fYWx0aXR1ZGU/OiBudW1iZXI7XHJcbiAgdmVsb2NpdHk/OiBudW1iZXI7XHJcbiAgdHJ1ZV90cmFjaz86IG51bWJlcjtcclxuICBvbl9ncm91bmQ/OiBib29sZWFuO1xyXG4gIGxhc3RfY29udGFjdD86IG51bWJlcjtcclxuICByZWdpc3RyYXRpb24/OiBzdHJpbmc7XHJcbiAgTUFOVUZBQ1RVUkVSPzogc3RyaW5nO1xyXG4gIE5BTUU/OiBzdHJpbmc7XHJcbiAgQ0lUWT86IHN0cmluZztcclxuICBTVEFURT86IHN0cmluZztcclxuICBDT1VOVFJZPzogc3RyaW5nO1xyXG4gIFRZUEVfQUlSQ1JBRlQ/OiBzdHJpbmc7XHJcbiAgVFlQRV9SRUdJU1RSQU5UPzogbnVtYmVyO1xyXG4gIG93bmVyVHlwZT86IG51bWJlcjtcclxuICBPUEVSQVRPUj86IHN0cmluZztcclxuICBpc1RyYWNrZWQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBPcGVuU2t5U3RhdGVBcnJheSA9IFtcclxuICBJQ0FPMjQ6IHN0cmluZywgLy8gWzBdXHJcbiAgY2FsbHNpZ246IHN0cmluZywgLy8gWzFdXHJcbiAgQ09VTlRSWTogc3RyaW5nLCAvLyBbMl1cclxuICB0aW1lUG9zaXRpb246IG51bWJlciwgLy8gWzNdXHJcbiAgbGFzdENvbnRhY3Q6IG51bWJlciwgLy8gWzRdXHJcbiAgbG9uZ2l0dWRlOiBudW1iZXIsIC8vIFs1XVxyXG4gIGxhdGl0dWRlOiBudW1iZXIsIC8vIFs2XVxyXG4gIGFsdGl0dWRlOiBudW1iZXIsIC8vIFs3XVxyXG4gIG9uR3JvdW5kOiBib29sZWFuLCAvLyBbOF1cclxuICB2ZWxvY2l0eTogbnVtYmVyLCAvLyBbOV1cclxuICBoZWFkaW5nOiBudW1iZXIsIC8vIFsxMF1cclxuICB2ZXJ0aWNhbFJhdGU6IG51bWJlciwgLy8gWzExXVxyXG4gIHNlbnNvcnM6IG51bWJlcltdLCAvLyBbMTJdXHJcbiAgYWx0aXR1ZGVHZW9tZXRyaWM6IG51bWJlciwgLy8gWzEzXVxyXG4gIHNxdWF3azogc3RyaW5nLCAvLyBbMTRdXHJcbiAgc3BpOiBib29sZWFuLCAvLyBbMTVdXHJcbiAgcG9zaXRpb25Tb3VyY2U6IG51bWJlciwgLy8gWzE2XVxyXG5dO1xyXG5cclxuZXhwb3J0IHR5cGUgUGFydGlhbE9wZW5Ta3lTdGF0ZSA9IGFueVtdO1xyXG5cclxuLyoqXHJcbiAqIENvbXBsZXRlIGFpcmNyYWZ0IGluZm9ybWF0aW9uIGluY2x1ZGluZyByZWdpc3RyYXRpb24gYW5kIHRyYWNraW5nIGRhdGFcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWlyY3JhZnQge1xyXG4gIC8vIENvcmUgaWRlbnRpZmljYXRpb25cclxuICBJQ0FPMjQ6IHN0cmluZztcclxuICBSRUdJU1RSQVRJT046IHN0cmluZztcclxuICBOX05VTUJFUj86IHN0cmluZztcclxuICBNQU5VRkFDVFVSRVI6IHN0cmluZztcclxuICBNT0RFTD86IHN0cmluZztcclxuICBPUEVSQVRPUj86IHN0cmluZztcclxuXHJcbiAgLy8gTG9jYXRpb24gYW5kIG1vdmVtZW50IGRhdGFcclxuICBsYXRpdHVkZTogbnVtYmVyO1xyXG4gIGxvbmdpdHVkZTogbnVtYmVyO1xyXG4gIGFsdGl0dWRlOiBudW1iZXI7XHJcbiAgaGVhZGluZzogbnVtYmVyO1xyXG4gIHZlbG9jaXR5OiBudW1iZXI7XHJcbiAgb25fZ3JvdW5kOiBib29sZWFuO1xyXG4gIGxhc3RfY29udGFjdDogbnVtYmVyO1xyXG4gIGxhc3RTZWVuPzogbnVtYmVyO1xyXG5cclxuICAvLyBSZWdpc3RyYXRpb24gaW5mb3JtYXRpb25cclxuICBOQU1FOiBzdHJpbmc7XHJcbiAgQ0lUWTogc3RyaW5nO1xyXG4gIFNUQVRFOiBzdHJpbmc7XHJcbiAgVFlQRV9SRUdJU1RSQU5UOiBudW1iZXI7XHJcbiAgb3duZXJUeXBlPzogbnVtYmVyO1xyXG4gIFRZUEVfQUlSQ1JBRlQ6IHN0cmluZztcclxuICBDT1VOVFJZPzogc3RyaW5nO1xyXG5cclxuICAvLyBUcmFja2luZyBzdGF0ZVxyXG4gIGlzVHJhY2tlZDogYm9vbGVhbjtcclxuXHJcbiAgLy8gT3B0aW9uYWwgZmllbGRzXHJcbiAgcmVnaXN0cmF0aW9uPzogc3RyaW5nO1xyXG4gIG1hbnVmYWN0dXJlck5hbWU/OiBzdHJpbmc7XHJcbiAgT1dORVI/OiBzdHJpbmc7XHJcbiAgcmVnaXN0ZXJlZD86IHN0cmluZztcclxuICBtYW51ZmFjdHVyZXJJY2FvPzogc3RyaW5nO1xyXG4gIG9wZXJhdG9ySWNhbz86IHN0cmluZztcclxuICBhY3RpdmU/OiBib29sZWFuO1xyXG4gIG1hcmtlcj86IHN0cmluZztcclxufVxyXG5cclxuLy8gbGliL3R5cGVzL2FpcmNyYWZ0LnRzXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFpcmNyYWZ0UmVjb3JkIHtcclxuICBpZDogbnVtYmVyO1xyXG4gIFJFR0lTVFJBVElPTjogc3RyaW5nO1xyXG4gIElDQU8yNDogc3RyaW5nO1xyXG4gIE1BTlVGQUNUVVJFUjogc3RyaW5nO1xyXG4gIE1PREVMOiBzdHJpbmc7XHJcbiAgT1BFUkFUT1I6IHN0cmluZyB8IG51bGw7XHJcbiAgVFlQRV9SRUdJU1RSQU5UPzogbnVtYmVyO1xyXG4gIG93bmVyVHlwZT86IG51bWJlcjtcclxuICBOQU1FOiBzdHJpbmcgfCBudWxsO1xyXG4gIENJVFk6IHN0cmluZyB8IG51bGw7XHJcbiAgU1RBVEU6IHN0cmluZyB8IG51bGw7XHJcbiAgQ09VTlRSWT86IHN0cmluZztcclxuICBjcmVhdGVkX2F0OiBzdHJpbmc7IC8vIG9yIERhdGUgaWYgeW91J3JlIHBhcnNpbmcgdGltZXN0YW1wc1xyXG4gIFRZUEVfQUlSQ1JBRlQ6IHN0cmluZyB8IG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQb3NpdGlvbiBkYXRhIGZyb20gT3BlblNreSBBUElcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG9zaXRpb25EYXRhIHtcclxuICBJQ0FPMjQ6IHN0cmluZztcclxuICBsYXRpdHVkZTogbnVtYmVyO1xyXG4gIGxvbmdpdHVkZTogbnVtYmVyO1xyXG4gIHZlbG9jaXR5PzogbnVtYmVyO1xyXG4gIGhlYWRpbmc/OiBudW1iZXI7XHJcbiAgYWx0aXR1ZGU/OiBudW1iZXI7XHJcbiAgb25fZ3JvdW5kOiBib29sZWFuO1xyXG4gIGxhc3RfY29udGFjdDogbnVtYmVyO1xyXG4gIE1PREVMPzogc3RyaW5nO1xyXG4gIE1BTlVGQUNUVVJFUj86IHN0cmluZztcclxuICBsYXN0X3NlZW4/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDdXJyZW50IHN0YXRlIG9mIGFuIGFpcmNyYWZ0IHdpdGggcmVxdWlyZWQgbGFzdF9zZWVuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFpcmNyYWZ0U3RhdGUgZXh0ZW5kcyBQb3NpdGlvbkRhdGEge1xyXG4gIGxhc3Rfc2VlbjogbnVtYmVyO1xyXG59XHJcblxyXG4vLyBzcmMvdHlwZXMvbWFwLnRzXHJcbi8qKlxyXG4gKiBBaXJjcmFmdCBtYXJrZXIgZm9yIG1hcCBkaXNwbGF5XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFpcmNyYWZ0TWFya2VyIGV4dGVuZHMgQWlyY3JhZnRQb3NpdGlvbiB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBJQ0FPMjQ6IHN0cmluZztcclxuICByZWdpc3RyYXRpb24/OiBzdHJpbmc7XHJcbiAgbWFudWZhY3R1cmVyTmFtZT86IHN0cmluZztcclxuICBNT0RFTD86IHN0cmluZztcclxuICBPUEVSQVRPUj86IHN0cmluZztcclxuICBDT1VOVFJZPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogUHJvcHMgZm9yIHRoZSBTaW1wbGVNYXAgY29tcG9uZW50XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFNpbXBsZU1hcFByb3BzIHtcclxuICBvbkFpcmNyYWZ0Q291bnRDaGFuZ2U/OiAoY291bnQ6IG51bWJlcikgPT4gdm9pZDtcclxufVxyXG5cclxuLy8gc3JjL3R5cGVzL2NhY2hlLnRzXHJcbi8qKlxyXG4gKiBDYWNoZWQgYWlyY3JhZnQgZGF0YSBmb3JtYXRcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGVkQWlyY3JhZnREYXRhIHtcclxuICAvLyBDb3JlIGlkZW50aWZpY2F0aW9uXHJcbiAgSUNBTzI0OiBzdHJpbmc7XHJcblxyXG4gIC8vIFBvc2l0aW9uIGFuZCBtb3ZlbWVudCBkYXRhXHJcbiAgbGF0aXR1ZGU6IG51bWJlcjtcclxuICBsb25naXR1ZGU6IG51bWJlcjtcclxuICBhbHRpdHVkZTogbnVtYmVyO1xyXG4gIHZlbG9jaXR5OiBudW1iZXI7XHJcbiAgaGVhZGluZzogbnVtYmVyO1xyXG4gIG9uX2dyb3VuZDogYm9vbGVhbjtcclxuXHJcbiAgLy8gVGltZXN0YW1wc1xyXG4gIGxhc3RfY29udGFjdDogbnVtYmVyO1xyXG4gIGxhc3RTZWVuOiBudW1iZXI7XHJcbiAgbGFzdFVwZGF0ZWQ6IG51bWJlcjtcclxuXHJcbiAgLy8gU3RhdGljIGRhdGFcclxuICByZWdpc3RyYXRpb24/OiBzdHJpbmc7XHJcbiAgUkVHSVNUUkFUSU9OPzogc3RyaW5nO1xyXG4gIE1BTlVGQUNUVVJFUj86IHN0cmluZztcclxuICBNT0RFTD86IHN0cmluZztcclxuICBOQU1FPzogc3RyaW5nO1xyXG4gIENJVFk/OiBzdHJpbmc7XHJcbiAgU1RBVEU/OiBzdHJpbmc7XHJcbiAgQ09VTlRSWT86IHN0cmluZztcclxuICBUWVBFX0FJUkNSQUZUPzogc3RyaW5nO1xyXG4gIFRZUEVfUkVHSVNUUkFOVD86IG51bWJlcjtcclxuICBvd25lclR5cGU/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8vIHNyYy90eXBlcy90cmFja2luZy50c1xyXG4vKipcclxuICogQmF0Y2ggb2YgYWlyY3JhZnQgdHJhY2tpbmcgZGF0YVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBaXJjcmFmdFRyYWNraW5nQmF0Y2gge1xyXG4gIGFpcmNyYWZ0OiBDYWNoZWRBaXJjcmFmdERhdGFbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluZGl2aWR1YWwgYWlyY3JhZnQgdHJhY2tpbmcgZGF0YVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUcmFja2luZ0RhdGEge1xyXG4gIElDQU8yNDogc3RyaW5nO1xyXG4gIGxhdGl0dWRlOiBudW1iZXI7XHJcbiAgbG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgYWx0aXR1ZGU6IG51bWJlcjtcclxuICB2ZWxvY2l0eTogbnVtYmVyO1xyXG4gIGhlYWRpbmc6IG51bWJlcjtcclxuICBvbl9ncm91bmQ6IGJvb2xlYW47XHJcbiAgbGFzdF9jb250YWN0OiBudW1iZXI7XHJcbiAgdXBkYXRlZF9hdDogbnVtYmVyO1xyXG59XHJcblxyXG4vLyBzcmMvdHlwZXMvdWkudHNcclxuLyoqXHJcbiAqIFNlbGVjdCBvcHRpb24gZm9yIGRyb3Bkb3ducyBhbmQgc2VsZWN0b3JzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdE9wdGlvbiB7XHJcbiAgdmFsdWU6IHN0cmluZztcclxuICBsYWJlbDogc3RyaW5nO1xyXG4gIGNvdW50PzogbnVtYmVyO1xyXG4gIGFjdGl2ZUNvdW50PzogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogU3RhdHVzIGZvciB0cmFja2luZyBvcGVyYXRpb25zXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUcmFja2luZ1N0YXR1c1R5cGUgPSAnaWRsZScgfCAnbG9hZGluZycgfCAnY29tcGxldGUnIHwgJ2Vycm9yJztcclxuXHJcbi8qKlxyXG4gKiBBY3RpdmUgY291bnRzIGludGVyZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQWN0aXZlQ291bnRzIHtcclxuICBhY3RpdmU6IG51bWJlcjtcclxuICB0b3RhbDogbnVtYmVyO1xyXG59XHJcblxyXG4vLyBzcmMvdHlwZXMvTUFOVUZBQ1RVUkVSLnRzXHJcbi8qKlxyXG4gKiBNYW51ZmFjdHVyZXIgaW5mb3JtYXRpb25cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1hbnVmYWN0dXJlciB7XHJcbiAgdmFsdWU6IHN0cmluZztcclxuICBsYWJlbDogc3RyaW5nO1xyXG4gIGFjdGl2ZUNvdW50PzogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogRGV0YWlsZWQgTUFOVUZBQ1RVUkVSIGRhdGFcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWFudWZhY3R1cmVyRGF0YSB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgY291bnRyeTogc3RyaW5nO1xyXG4gIGNvdW50OiBudW1iZXI7XHJcbiAgYWN0aXZlQ291bnQ/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWwge1xyXG4gIE1PREVMOiBzdHJpbmc7XHJcbiAgTUFOVUZBQ1RVUkVSOiBzdHJpbmc7XHJcbiAgYWN0aXZlQ291bnQ/OiBudW1iZXI7XHJcbiAgbGFiZWw/OiBzdHJpbmc7XHJcbiAgY291bnQ/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8vIHNyYy90eXBlcy91dGlscy50c1xyXG4vKipcclxuICogSGVscGVyIHR5cGUgdG8gZXh0cmFjdCBwb3NpdGlvbiBkYXRhIGZyb20gQWlyY3JhZnRcclxuICovXHJcbmV4cG9ydCB0eXBlIEFpcmNyYWZ0UG9zaXRpb25Gcm9tQWlyY3JhZnQgPSBQaWNrPFxyXG4gIEFpcmNyYWZ0LFxyXG4gICdsYXRpdHVkZScgfCAnbG9uZ2l0dWRlJyB8ICdhbHRpdHVkZScgfCAnaGVhZGluZycgfCAndmVsb2NpdHknIHwgJ29uX2dyb3VuZCdcclxuPjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaXB0aW9uTWFuYWdlciB7XHJcbiAgc3Vic2NyaWJlOiAoa2V5OiBzdHJpbmcsIGNhbGxiYWNrOiAoZGF0YTogQWlyY3JhZnRbXSkgPT4gdm9pZCkgPT4gKCkgPT4gdm9pZDtcclxuICB1bnN1YnNjcmliZTogKGtleTogc3RyaW5nLCBjYWxsYmFjazogKGRhdGE6IEFpcmNyYWZ0W10pID0+IHZvaWQpID0+IHZvaWQ7XHJcbiAgbm90aWZ5U3Vic2NyaWJlcnM6IChrZXk6IHN0cmluZywgZGF0YTogQWlyY3JhZnRbXSkgPT4gdm9pZDtcclxufVxyXG5cclxuLy8gQmFzZSBNT0RFTCBpbnRlcmZhY2Ugd2l0aCBjb21tb24gcHJvcGVydGllc1xyXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VNb2RlbCB7XHJcbiAgTU9ERUw6IHN0cmluZztcclxuICBNQU5VRkFDVFVSRVI6IHN0cmluZztcclxuICBsYWJlbDogc3RyaW5nO1xyXG59XHJcblxyXG4vLyBTdGF0aWMgTU9ERUwgZXh0ZW5kcyBiYXNlIHdpdGggY291bnRcclxuZXhwb3J0IGludGVyZmFjZSBTdGF0aWNNb2RlbCBleHRlbmRzIEJhc2VNb2RlbCB7XHJcbiAgY291bnQ6IG51bWJlcjtcclxufVxyXG5cclxuLy8gQWN0aXZlIE1PREVMIGV4dGVuZHMgYmFzZSB3aXRoIGFjdGl2ZUNvdW50XHJcbmV4cG9ydCBpbnRlcmZhY2UgQWN0aXZlTW9kZWwgZXh0ZW5kcyBCYXNlTW9kZWwge1xyXG4gIGFjdGl2ZUNvdW50OiBudW1iZXI7XHJcbiAgdG90YWxDb3VudDogbnVtYmVyO1xyXG4gIGNvdW50PzogbnVtYmVyO1xyXG4gIENJVFk/OiBzdHJpbmc7XHJcbiAgU1RBVEU/OiBzdHJpbmc7XHJcbiAgQ09VTlRSWT86IHN0cmluZztcclxuICBvd25lclR5cGU/OiBudW1iZXI7XHJcbiAgUkVHSVNUUkFOVF9UWVBFPzogbnVtYmVyO1xyXG4gIG5hbWU/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8vIFByb3BzIGludGVyZmFjZSBmb3IgTW9kZWxTZWxlY3RvciBjb21wb25lbnRcclxuZXhwb3J0IGludGVyZmFjZSBNb2RlbFNlbGVjdG9yUHJvcHMge1xyXG4gIHNlbGVjdGVkTW9kZWw6IHN0cmluZztcclxuICBzZXRTZWxlY3RlZE1vZGVsOiAoTU9ERUw6IHN0cmluZykgPT4gdm9pZDtcclxuICBtb2RlbHM6IFN0YXRpY01vZGVsW107XHJcbiAgdG90YWxBY3RpdmU/OiBudW1iZXI7XHJcbiAgb25Nb2RlbFNlbGVjdDogKE1PREVMOiBzdHJpbmcpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRXh0ZW5kZWRBaXJjcmFmdCBleHRlbmRzIEFpcmNyYWZ0IHtcclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgaXNHb3Zlcm5tZW50OiBib29sZWFuO1xyXG4gIHpvb21MZXZlbD86IG51bWJlcjtcclxuICBSRUdJT04/OiBSZWdpb25Db2RlOyAvLyBOb3cgbnVtZXJpYyBpbnN0ZWFkIG9mIHN0cmluZ1xyXG59XHJcblxyXG4vLyBBZGQgdGhpcyB0byB5b3VyIHR5cGVzL2Jhc2UudHMgZmlsZVxyXG5leHBvcnQgaW50ZXJmYWNlIFJlZ2lvbmFsQWlyY3JhZnQge1xyXG4gIElDQU8yNDogc3RyaW5nO1xyXG4gIFJFR0lTVFJBVElPTjogc3RyaW5nO1xyXG4gIE1BTlVGQUNUVVJFUjogc3RyaW5nO1xyXG4gIE1PREVMPzogc3RyaW5nO1xyXG4gIFJFR0lPTjogbnVtYmVyO1xyXG4gIC8vIEFkZCBvdGhlciByZXF1aXJlZCBwcm9wZXJ0aWVzXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFJlZ2lvbkNvZGUge1xyXG4gIEdMT0JBTCA9IDAsXHJcbiAgTm9ydGhfQW1lcmljYSA9IDEsXHJcbiAgRXVyb3BlID0gMixcclxuICBBc2lhID0gMyxcclxuICBTb3V0aF9BbWVyaWNhID0gNCxcclxuICBBZnJpY2EgPSA1LFxyXG4gIE9jZWFuaWEgPSA2LFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZlYXR1cmUge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgdHlwZTogc3RyaW5nO1xyXG4gIHBsYWNlX3R5cGU6IHN0cmluZ1tdO1xyXG4gIHJlbGV2YW5jZTogbnVtYmVyO1xyXG4gIHByb3BlcnRpZXM6IFJlY29yZDxzdHJpbmcsIGFueT47XHJcbiAgdGV4dDogc3RyaW5nO1xyXG4gIHBsYWNlX25hbWU6IHN0cmluZztcclxuICBjZW50ZXI6IFtudW1iZXIsIG51bWJlcl07XHJcbiAgZ2VvbWV0cnk6IHtcclxuICAgIHR5cGU6IHN0cmluZztcclxuICAgIGNvb3JkaW5hdGVzOiBbbnVtYmVyLCBudW1iZXJdO1xyXG4gIH07XHJcbiAgY29udGV4dD86IEFycmF5PHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICB0ZXh0OiBzdHJpbmc7XHJcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbiAgfT47XHJcbiAgW2tleTogc3RyaW5nXTogYW55O1xyXG59XHJcbiJdLCJuYW1lcyI6WyJSZWdpb25Db2RlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./types/base.ts\n");

/***/ }),

/***/ "@tanstack/react-query":
/*!****************************************!*\
  !*** external "@tanstack/react-query" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@tanstack/react-query");;

/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react-hot-toast":
/*!**********************************!*\
  !*** external "react-hot-toast" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = import("react-hot-toast");;

/***/ }),

/***/ "react-toastify":
/*!*********************************!*\
  !*** external "react-toastify" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = import("react-toastify");;

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "react/jsx-runtime":
/*!************************************!*\
  !*** external "react/jsx-runtime" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("./webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@swc","vendor-chunks/react-toastify","vendor-chunks/leaflet"], () => (__webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=.%2Fnode_modules%5Cnext%5Cdist%5Cpages%5C_error.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();