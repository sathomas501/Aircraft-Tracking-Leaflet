/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "(pages-dir-node)/./components/tracking/context/EnhancedMapContext.tsx":
/*!************************************************************!*\
  !*** ./components/tracking/context/EnhancedMapContext.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnhancedMapProvider: () => (/* binding */ EnhancedMapProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useEnhancedMapContext: () => (/* binding */ useEnhancedMapContext)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types/base */ \"(pages-dir-node)/./types/base.ts\");\n/* harmony import */ var _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/services/openSkyTrackingService */ \"(pages-dir-node)/./lib/services/openSkyTrackingService.ts\");\n/* harmony import */ var _persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../persistence/AircraftDataPersistence */ \"(pages-dir-node)/./components/tracking/persistence/AircraftDataPersistence.ts\");\n/* harmony import */ var _config_map__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../config/map */ \"(pages-dir-node)/./config/map.ts\");\n// components/tracking/context/EnhancedMapContext.tsx\n\n\n\n\n\n\n// Create context with default values\nconst EnhancedMapContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    mapInstance: null,\n    setMapInstance: ()=>{},\n    zoomLevel: 6,\n    setZoomLevel: ()=>{},\n    displayedAircraft: [],\n    selectedAircraft: null,\n    selectAircraft: ()=>{},\n    // Data persistence defaults\n    cachedAircraftData: {},\n    updateAircraftData: ()=>{},\n    lastPersistenceUpdate: null,\n    selectedManufacturer: null,\n    selectedModel: null,\n    activeModels: [],\n    totalActive: 0,\n    isLoading: false,\n    isRefreshing: false,\n    trackingStatus: '',\n    lastRefreshed: null,\n    selectManufacturer: async ()=>{},\n    selectModel: ()=>{},\n    reset: async ()=>{},\n    refreshPositions: async ()=>{},\n    fullRefresh: async ()=>{},\n    clearCache: ()=>{},\n    clearGeofenceData: ()=>{},\n    // Add default for new function\n    updateGeofenceAircraft: ()=>{},\n    filterMode: 'manufacturer',\n    setFilterMode: ()=>{},\n    blockManufacturerApiCalls: false,\n    setBlockManufacturerApiCalls: ()=>{},\n    isManufacturerApiBlocked: false,\n    setIsManufacturerApiBlocked: ()=>{},\n    // Geofencing properties\n    geofenceCenter: null,\n    geofenceRadius: 25,\n    isGeofenceActive: false,\n    setGeofenceCenter: ()=>{},\n    setGeofenceRadius: ()=>{},\n    geofenceCoordinates: null,\n    toggleGeofence: ()=>{},\n    clearGeofence: ()=>({}),\n    filteredAircraft: [],\n    selectedRegion: _types_base__WEBPACK_IMPORTED_MODULE_2__.RegionCode.GLOBAL,\n    setSelectedRegion: (region)=>{},\n    getBoundsByRegion: (region)=>(0,_config_map__WEBPACK_IMPORTED_MODULE_5__.getBoundsByRegion)('GLOBAL'),\n    isGeofencePlacementMode: false,\n    setIsGeofencePlacementMode: ()=>{}\n});\n// Enhanced Map Provider component\nconst EnhancedMapProvider = ({ children, manufacturers, onError })=>{\n    // Map state\n    const [mapInstance, setMapInstance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [zoomLevel, setZoomLevel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(6);\n    // Aircraft state\n    const [displayedAircraft, setDisplayedAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedAircraft, setSelectedAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Data persistence state\n    const [cachedAircraftData, setCachedAircraftData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [lastPersistenceUpdate, setLastPersistenceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [geofenceCenter, setGeofenceCenter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [selectedRegion, setSelectedRegion] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_types_base__WEBPACK_IMPORTED_MODULE_2__.RegionCode.GLOBAL);\n    // Derived state for geofence coordinates\n    const geofenceCoordinates = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"EnhancedMapProvider.useMemo[geofenceCoordinates]\": ()=>geofenceCenter\n    }[\"EnhancedMapProvider.useMemo[geofenceCoordinates]\"], [\n        geofenceCenter\n    ]);\n    const [geofenceRadius, setGeofenceRadius] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(25); // Default 25km radius\n    const [isGeofenceActive, setIsGeofenceActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isGeofencePlacementMode, setIsGeofencePlacementMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Add this to your state declarations\n    const [aircraftPositions, setAircraftPositions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Toggle geofence activation\n    const toggleGeofence = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[toggleGeofence]\": ()=>{\n            setIsGeofenceActive({\n                \"EnhancedMapProvider.useCallback[toggleGeofence]\": (prev)=>!prev\n            }[\"EnhancedMapProvider.useCallback[toggleGeofence]\"]);\n        }\n    }[\"EnhancedMapProvider.useCallback[toggleGeofence]\"], []);\n    // Clear geofence\n    const clearGeofence = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[clearGeofence]\": ()=>{\n            setGeofenceCenter(null);\n            setIsGeofenceActive(false);\n            return {}; // Return an empty object to match the expected type\n        }\n    }[\"EnhancedMapProvider.useCallback[clearGeofence]\"], []);\n    // Selection state\n    const [selectedManufacturer, setSelectedManufacturer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [selectedModel, setSelectedModel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [activeModels, setActiveModels] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [totalActive, setTotalActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Loading state\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isRefreshing, setIsRefreshing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [trackingStatus, setTrackingStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [lastRefreshed, setLastRefreshed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Add this with your other state variables\n    const [lastFullRefreshTime, setLastFullRefreshTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isManufacturerApiBlocked, setIsManufacturerApiBlocked] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [filterMode, setFilterMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('manufacturer');\n    const [blockManufacturerApiCalls, setBlockManufacturerApiCalls] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Flag to track if we're in geofence mode\n    const [isGeofenceMode, setIsGeofenceMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Define the filter function correctly\n    const filterAircraftByGeofence = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\": ()=>{\n            if (!geofenceCenter || !isGeofenceActive) {\n                return displayedAircraft;\n            }\n            // Helper function to calculate distance between two points\n            const calculateDistance = {\n                \"EnhancedMapProvider.useCallback[filterAircraftByGeofence].calculateDistance\": (lat1, lon1, lat2, lon2)=>{\n                    const R = 6371; // Radius of the earth in km\n                    const dLat = deg2rad(lat2 - lat1);\n                    const dLon = deg2rad(lon2 - lon1);\n                    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n                    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n                    const distance = R * c; // Distance in km\n                    return distance;\n                }\n            }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence].calculateDistance\"];\n            const deg2rad = {\n                \"EnhancedMapProvider.useCallback[filterAircraftByGeofence].deg2rad\": (deg)=>{\n                    return deg * (Math.PI / 180);\n                }\n            }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence].deg2rad\"];\n            // Filter aircraft within the radius\n            return displayedAircraft.filter({\n                \"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\": (aircraft)=>{\n                    if (!aircraft.latitude || !aircraft.longitude) return false;\n                    // Calculate distance between aircraft and geofence center\n                    const distance = calculateDistance(geofenceCenter.lat, geofenceCenter.lng, aircraft.latitude, aircraft.longitude);\n                    // Return true if aircraft is within radius\n                    return geofenceRadius !== null && distance <= geofenceRadius;\n                }\n            }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\"]);\n        }\n    }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\"], [\n        displayedAircraft,\n        geofenceCenter,\n        geofenceRadius,\n        isGeofenceActive\n    ]);\n    // Then separately, define filteredAircraft - don't try to do both in the same function\n    const filteredAircraft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"EnhancedMapProvider.useMemo[filteredAircraft]\": ()=>{\n            return isGeofenceActive && geofenceCenter ? filterAircraftByGeofence() : displayedAircraft;\n        }\n    }[\"EnhancedMapProvider.useMemo[filteredAircraft]\"], [\n        isGeofenceActive,\n        geofenceCenter,\n        filterAircraftByGeofence,\n        displayedAircraft\n    ]);\n    // Refs for tracking subscriptions\n    const unsubscribeAircraftRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const unsubscribeStatusRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Load persisted aircraft data on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            const savedData = (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.loadAircraftData)();\n            if (savedData) {\n                console.log(`[EnhancedMapContext] Loaded ${Object.keys(savedData).length} aircraft from persistence`);\n                setCachedAircraftData(savedData);\n                setLastPersistenceUpdate(Date.now());\n            }\n        }\n    }[\"EnhancedMapProvider.useEffect\"], []);\n    // Save aircraft data when cachedAircraftData changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            if (Object.keys(cachedAircraftData).length > 0) {\n                console.log(`[EnhancedMapContext] Saving ${Object.keys(cachedAircraftData).length} aircraft to persistence`);\n                (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.saveAircraftData)(cachedAircraftData);\n            }\n        }\n    }[\"EnhancedMapProvider.useEffect\"], [\n        cachedAircraftData\n    ]);\n    // Initialize tracking service and subscriptions\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            // Subscribe to tracking updates that include trail data\n            const handleTrackingUpdate = {\n                \"EnhancedMapProvider.useEffect.handleTrackingUpdate\": (data)=>{\n                    // Only update displayed aircraft if we're not in geofence mode\n                    if (!isGeofenceMode) {\n                        updateAircraftDisplay();\n                    }\n                }\n            }[\"EnhancedMapProvider.useEffect.handleTrackingUpdate\"];\n            // Subscribe to aircraft updates\n            unsubscribeAircraftRef.current = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].subscribe(handleTrackingUpdate);\n            // Subscribe to status updates\n            unsubscribeStatusRef.current = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].subscribeToStatus({\n                \"EnhancedMapProvider.useEffect\": (status)=>{\n                    setTrackingStatus(status);\n                    setIsLoading(_lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isLoading());\n                }\n            }[\"EnhancedMapProvider.useEffect\"]);\n            // IMPORTANT: Clear any existing tracking when component mounts\n            _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].stopTracking();\n            // Cleanup on unmount\n            return ({\n                \"EnhancedMapProvider.useEffect\": ()=>{\n                    if (unsubscribeAircraftRef.current) {\n                        unsubscribeAircraftRef.current();\n                    }\n                    if (unsubscribeStatusRef.current) {\n                        unsubscribeStatusRef.current();\n                    }\n                }\n            })[\"EnhancedMapProvider.useEffect\"];\n        }\n    }[\"EnhancedMapProvider.useEffect\"], [\n        isGeofenceMode\n    ]);\n    // Update aircraft data with persistence\n    const updateAircraftData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[updateAircraftData]\": (newAircraftArray)=>{\n            // Convert to a map for easier processing\n            const newAircraftMap = {};\n            newAircraftArray.forEach({\n                \"EnhancedMapProvider.useCallback[updateAircraftData]\": (aircraft)=>{\n                    if (aircraft.ICAO24) {\n                        newAircraftMap[aircraft.ICAO24] = {\n                            ...aircraft,\n                            // Ensure required fields for CachedAircraftData are present\n                            ICAO24: aircraft.ICAO24,\n                            latitude: aircraft.latitude || 0,\n                            longitude: aircraft.longitude || 0,\n                            altitude: aircraft.altitude || 0,\n                            velocity: aircraft.velocity || 0,\n                            heading: aircraft.heading || 0,\n                            on_ground: aircraft.on_ground || false,\n                            last_contact: aircraft.last_contact || Date.now(),\n                            lastSeen: Date.now(),\n                            lastUpdated: Date.now()\n                        };\n                    }\n                }\n            }[\"EnhancedMapProvider.useCallback[updateAircraftData]\"]);\n            // Merge with existing cached data to preserve fields\n            setCachedAircraftData({\n                \"EnhancedMapProvider.useCallback[updateAircraftData]\": (currentCache)=>(0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.mergeAircraftData)(currentCache, newAircraftMap)\n            }[\"EnhancedMapProvider.useCallback[updateAircraftData]\"]);\n            setLastPersistenceUpdate(Date.now());\n            // If the selected aircraft is updated, update the selection\n            if (selectedAircraft && newAircraftMap[selectedAircraft.ICAO24]) {\n                const updatedAircraft = {\n                    ...selectedAircraft,\n                    ...newAircraftMap[selectedAircraft.ICAO24]\n                };\n                setSelectedAircraft(updatedAircraft);\n            }\n        }\n    }[\"EnhancedMapProvider.useCallback[updateAircraftData]\"], [\n        selectedAircraft\n    ]);\n    // Clear persistence cache\n    const clearCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[clearCache]\": ()=>{\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.clearAircraftData)();\n            setCachedAircraftData({});\n            setLastPersistenceUpdate(null);\n            setTrackingStatus('Cache cleared');\n        }\n    }[\"EnhancedMapProvider.useCallback[clearCache]\"], []);\n    // Update aircraft display based on selected MODEL\n    const updateAircraftDisplay = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[updateAircraftDisplay]\": ()=>{\n            // Get extended aircraft based on selected MODEL\n            const extendedAircraft = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getExtendedAircraft(selectedModel || undefined);\n            // Get MODEL stats from the service\n            const { models, totalActive: total } = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getModelStats();\n            // Enhance aircraft data with persistence\n            updateAircraftData(extendedAircraft);\n            // Only update displayed aircraft if we're not in geofence mode\n            if (!isGeofenceMode) {\n                setDisplayedAircraft(extendedAircraft);\n                setActiveModels(models);\n                setTotalActive(total);\n            }\n            setIsLoading(_lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isLoading());\n        }\n    }[\"EnhancedMapProvider.useCallback[updateAircraftDisplay]\"], [\n        selectedModel,\n        updateAircraftData,\n        isGeofenceMode\n    ]);\n    // Update display when MODEL selection changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            updateAircraftDisplay();\n        }\n    }[\"EnhancedMapProvider.useEffect\"], [\n        selectedModel,\n        updateAircraftDisplay\n    ]);\n    // New function to handle geofence aircraft updates\n    const updateGeofenceAircraft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[updateGeofenceAircraft]\": (geofenceAircraft)=>{\n            // Mark that we're in geofence mode\n            setIsGeofenceMode(true);\n            console.log(`[EnhancedMapContext] Updating ${geofenceAircraft.length} aircraft from geofence`);\n            // Update the cached data (same as regular updates)\n            updateAircraftData(geofenceAircraft);\n            // Also directly update the displayed aircraft\n            setDisplayedAircraft(geofenceAircraft);\n            // Update stats\n            setTotalActive(geofenceAircraft.length);\n            // Extract MODEL stats for the sidebar\n            const modelCounts = geofenceAircraft.reduce({\n                \"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelCounts\": (acc, aircraft)=>{\n                    const MODEL = aircraft.MODEL || aircraft.TYPE_AIRCRAFT || 'Unknown';\n                    if (!acc[MODEL]) {\n                        acc[MODEL] = {\n                            MODEL,\n                            count: 0,\n                            MANUFACTURER: aircraft.MANUFACTURER || 'Unknown',\n                            // Add required properties for AircraftModel\n                            label: MODEL,\n                            activeCount: 0,\n                            totalCount: 0\n                        };\n                    }\n                    acc[MODEL].count++;\n                    acc[MODEL].activeCount++;\n                    acc[MODEL].totalCount++;\n                    return acc;\n                }\n            }[\"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelCounts\"], {});\n            // Convert to array for the activeModels state\n            const modelArray = Object.values(modelCounts).map({\n                \"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelArray\": (MODEL)=>({\n                        MODEL: MODEL.MODEL,\n                        count: MODEL.count,\n                        MANUFACTURER: MODEL.MANUFACTURER,\n                        // Add required properties for AircraftModel type\n                        label: MODEL.MODEL,\n                        activeCount: MODEL.count,\n                        totalCount: MODEL.count\n                    })\n            }[\"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelArray\"]);\n            setActiveModels(modelArray);\n            // Update the last refreshed timestamp\n            setLastRefreshed(new Date().toLocaleTimeString());\n        }\n    }[\"EnhancedMapProvider.useCallback[updateGeofenceAircraft]\"], [\n        updateAircraftData\n    ]);\n    // Handle MANUFACTURER selection\n    // In your EnhancedMapContext.tsx - modify the selectManufacturer function\n    const selectManufacturer = async (MANUFACTURER)=>{\n        // Exit geofence mode when selecting a MANUFACTURER\n        setIsGeofenceMode(false);\n        setSelectedManufacturer(MANUFACTURER);\n        setSelectedModel(null);\n        setIsLoading(true);\n        setLastRefreshed(null);\n        // Clear previous data\n        setDisplayedAircraft([]);\n        setActiveModels([]);\n        setTotalActive(0);\n        // If null, just exit\n        if (MANUFACTURER === null) {\n            setIsLoading(false);\n            return;\n        }\n        // If we're blocking API calls, exit early\n        if (isManufacturerApiBlocked) {\n            console.log(`[EnhancedMapContext] API calls blocked for manufacturer: ${MANUFACTURER}`);\n            setIsLoading(false);\n            return;\n        }\n        try {\n            // Start tracking with a progress handler\n            setTrackingStatus(`Loading aircraft for ${MANUFACTURER}...`);\n            // Use the existing service but with a progress callback\n            // In EnhancedMapContext.tsx, modify your callback to handle both types:\n            await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].trackManufacturerWithProgress(MANUFACTURER, (progress)=>{\n                // Update the tracking status message\n                if (progress.message) {\n                    setTrackingStatus(progress.message);\n                }\n                // Update displayed aircraft as they're loaded\n                if (progress.aircraft) {\n                    // Cast the aircraft array to ExtendedAircraft[] since our context uses that type\n                    setDisplayedAircraft(progress.aircraft);\n                }\n                // Update model stats\n                if (progress.models) {\n                    setActiveModels(progress.models);\n                }\n                // Update total count\n                if (progress.total !== undefined) {\n                    setTotalActive(progress.total);\n                }\n            });\n            setLastRefreshed(new Date().toLocaleTimeString());\n        } catch (error) {\n            onError(`Error tracking manufacturer: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            setTrackingStatus('Error loading aircraft data');\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    // Handle MODEL selection\n    const selectModel = (MODEL)=>{\n        setSelectedModel(MODEL);\n    };\n    // Handle aircraft selection\n    const selectAircraft = (aircraft)=>{\n        setSelectedAircraft(aircraft);\n        // If selecting an aircraft, check if we have cached data to enhance it\n        if (aircraft && aircraft.ICAO24 && cachedAircraftData[aircraft.ICAO24]) {\n            const enhancedAircraft = {\n                ...aircraft,\n                ...cachedAircraftData[aircraft.ICAO24]\n            };\n            setSelectedAircraft(enhancedAircraft);\n        }\n    };\n    // If you don't already have it, add this function to expose the map's getBoundsByRegion function\n    // Create a wrapped function that calls your map config function\n    const handleGetBoundsByRegion = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[handleGetBoundsByRegion]\": (region)=>{\n            return (0,_config_map__WEBPACK_IMPORTED_MODULE_5__.getBoundsByRegion)(region);\n        }\n    }[\"EnhancedMapProvider.useCallback[handleGetBoundsByRegion]\"], []);\n    // Reset all selections\n    const reset = async ()=>{\n        await selectManufacturer(null);\n    };\n    // Method to refresh only the positions of active aircraft\n    const refreshPositions = async ()=>{\n        if (isRefreshing || !selectedManufacturer && !isGeofenceMode) return;\n        setIsRefreshing(true);\n        setTrackingStatus('Updating aircraft positions...');\n        try {\n            // Call the service\n            await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshPositionsOnly();\n            setLastRefreshed(new Date().toLocaleTimeString());\n            setTrackingStatus(`Positions updated for ${displayedAircraft.length} aircraft`);\n        } catch (error) {\n            onError(`Error refreshing positions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        } finally{\n            setTimeout(()=>{\n                setIsRefreshing(false);\n            }, 500);\n        }\n    };\n    // Method for full tracking refresh\n    const fullRefresh = async ()=>{\n        if (!selectedManufacturer && !isGeofenceMode || isRefreshing) return;\n        // Set a timeout to force exit from loading state after 10 seconds\n        // This is a safety mechanism\n        const safetyTimeout = setTimeout(()=>{\n            setIsRefreshing(false);\n            setTrackingStatus('Refresh timed out');\n        }, 10000);\n        setIsRefreshing(true);\n        try {\n            // Get currently tracked aircraft\n            const allTrackedAircraft = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTrackedAircraft();\n            // Get active aircraft (those with position data)\n            const activeAircraft = allTrackedAircraft.filter((aircraft)=>aircraft.ICAO24 && aircraft.latitude && aircraft.longitude);\n            const needsFullRefresh = !lastFullRefreshTime || Date.now() - lastFullRefreshTime > 3600000;\n            let success = false;\n            if (activeAircraft.length === 0 || needsFullRefresh) {\n                // Do a full refresh\n                setTrackingStatus('Performing full refresh...');\n                try {\n                    await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshNow();\n                    setLastFullRefreshTime(Date.now());\n                    success = true;\n                } catch (error) {\n                    // Silently handle this error\n                    console.warn('Full refresh failed');\n                }\n            } else {\n                // Do an optimized refresh\n                const activeIcaos = activeAircraft.map((aircraft)=>aircraft.ICAO24).filter(Boolean);\n                if (activeIcaos.length > 0) {\n                    setTrackingStatus(`Refreshing ${activeIcaos.length} active aircraft...`);\n                    try {\n                        await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshSpecificAircraft(activeIcaos);\n                        success = true;\n                    } catch (error) {\n                        // Try falling back to a full refresh\n                        console.warn('Optimized refresh failed, trying full refresh');\n                        try {\n                            await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshNow();\n                            setLastFullRefreshTime(Date.now());\n                            success = true;\n                        } catch (fallbackError) {\n                            // Silently handle this error\n                            console.warn('Fallback refresh failed');\n                        }\n                    }\n                }\n            }\n            clearTimeout(safetyTimeout);\n            // Only update if the refresh was successful\n            if (success) {\n                const currentCount = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTrackedAircraft().length;\n                setTrackingStatus(`Refresh completed with ${currentCount} aircraft`);\n                setLastRefreshed(new Date().toLocaleTimeString());\n            } else {\n                setTrackingStatus('Refresh failed');\n            }\n        } catch (error) {\n            clearTimeout(safetyTimeout);\n            // Only show errors to the user if they appear to be significant\n            if (error instanceof Error && error.message !== 'aborted') {\n                onError(`Error during refresh: ${error.message || 'Unknown error'}`);\n            }\n            setTrackingStatus('Error during refresh');\n        } finally{\n            clearTimeout(safetyTimeout);\n            setIsRefreshing(false);\n        }\n    };\n    const clearGeofenceData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[clearGeofenceData]\": ()=>{\n            // Reset geofence mode flag\n            setIsGeofenceMode(false);\n            // Clear displayed aircraft\n            setDisplayedAircraft([]);\n            setActiveModels([]);\n            setTotalActive(0);\n            // If there was a previously selected MANUFACTURER, we can restore it\n            if (selectedManufacturer) {\n                // Small delay to ensure state updates properly\n                setTimeout({\n                    \"EnhancedMapProvider.useCallback[clearGeofenceData]\": ()=>{\n                        _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].trackManufacturer(selectedManufacturer);\n                    }\n                }[\"EnhancedMapProvider.useCallback[clearGeofenceData]\"], 100);\n            }\n        }\n    }[\"EnhancedMapProvider.useCallback[clearGeofenceData]\"], [\n        selectedManufacturer\n    ]);\n    // Create context value\n    const contextValue = {\n        mapInstance,\n        setMapInstance,\n        zoomLevel,\n        setZoomLevel,\n        displayedAircraft,\n        selectedAircraft,\n        selectAircraft,\n        // Data persistence\n        cachedAircraftData,\n        updateAircraftData,\n        lastPersistenceUpdate,\n        selectedManufacturer,\n        selectedModel,\n        activeModels,\n        totalActive,\n        isLoading,\n        isRefreshing,\n        trackingStatus,\n        lastRefreshed,\n        selectManufacturer,\n        selectModel,\n        reset,\n        refreshPositions,\n        fullRefresh,\n        clearCache,\n        clearGeofenceData,\n        updateGeofenceAircraft,\n        filteredAircraft,\n        filterMode,\n        setFilterMode,\n        blockManufacturerApiCalls,\n        setBlockManufacturerApiCalls,\n        isManufacturerApiBlocked,\n        setIsManufacturerApiBlocked,\n        // Geofencing properties\n        geofenceCenter,\n        geofenceRadius,\n        isGeofenceActive,\n        geofenceCoordinates,\n        setGeofenceCenter,\n        setGeofenceRadius,\n        toggleGeofence,\n        clearGeofence,\n        isGeofencePlacementMode,\n        setIsGeofencePlacementMode,\n        // Region selection\n        selectedRegion,\n        setSelectedRegion,\n        getBoundsByRegion: handleGetBoundsByRegion\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(EnhancedMapContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\components\\\\tracking\\\\context\\\\EnhancedMapContext.tsx\",\n        lineNumber: 824,\n        columnNumber: 5\n    }, undefined);\n};\n// Custom hook to use the context\nconst useEnhancedMapContext = ()=>(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EnhancedMapContext);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EnhancedMapContext);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./components/tracking/context/EnhancedMapContext.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./components/tracking/context/EnhancedUIContext.tsx":
/*!***********************************************************!*\
  !*** ./components/tracking/context/EnhancedUIContext.tsx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnhancedUIProvider: () => (/* binding */ EnhancedUIProvider),\n/* harmony export */   useEnhancedUI: () => (/* binding */ useEnhancedUI)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n// components/shared/context/EnhancedUIContext.tsx\n\n\n// Create the context\nconst EnhancedUIContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    selectAircraft: ()=>{},\n    openPanel: ()=>{},\n    closePanel: ()=>{},\n    panels: {},\n    isLoading: false,\n    setIsLoading: ()=>{}\n});\n// Default panel state\nconst defaultPanelState = {\n    isOpen: false,\n    type: 'custom',\n    position: {\n        x: 0,\n        y: 0\n    },\n    data: null,\n    title: ''\n};\n// Default panel positions with fallback values for server-side rendering\nconst DEFAULT_POSITIONS = {\n    aircraftInfo: {\n        x:  false ? 0 : 700,\n        y: 20\n    },\n    settings: {\n        x: 20,\n        y: 20\n    },\n    filters: {\n        x: 20,\n        y: 20\n    },\n    details: {\n        x:  false ? 0 : 400,\n        y: 50\n    },\n    custom: {\n        x:  false ? 0 : 300,\n        y: 100\n    }\n};\n// Provider component\nconst EnhancedUIProvider = ({ children })=>{\n    // Panels state\n    const [panels, setPanels] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        aircraftInfo: {\n            isOpen: false,\n            type: 'aircraftInfo',\n            position: DEFAULT_POSITIONS.aircraftInfo,\n            data: null\n        },\n        settings: {\n            isOpen: false,\n            type: 'settings',\n            position: DEFAULT_POSITIONS.settings,\n            data: null\n        },\n        filters: {\n            isOpen: false,\n            type: 'filters',\n            position: DEFAULT_POSITIONS.filters,\n            data: null\n        },\n        details: {\n            isOpen: false,\n            type: 'details',\n            position: DEFAULT_POSITIONS.details,\n            data: null\n        },\n        custom: {\n            isOpen: false,\n            type: 'custom',\n            position: DEFAULT_POSITIONS.custom,\n            data: null,\n            customContent: null\n        }\n    });\n    // Selected aircraft state\n    const [selectedAircraft, setSelectedAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Tooltip state\n    const [tooltip, setTooltip] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        content: null,\n        position: null,\n        targetId: null\n    });\n    // Other UI state\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Panel actions\n    const openPanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[openPanel]\": (type, data, position, title)=>{\n            setPanels({\n                \"EnhancedUIProvider.useCallback[openPanel]\": (prev)=>({\n                        ...prev,\n                        [type]: {\n                            ...prev[type],\n                            isOpen: true,\n                            data: data || prev[type].data,\n                            position: position || prev[type].position,\n                            title: title || prev[type].title\n                        }\n                    })\n            }[\"EnhancedUIProvider.useCallback[openPanel]\"]);\n        }\n    }[\"EnhancedUIProvider.useCallback[openPanel]\"], []);\n    const closePanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[closePanel]\": (type)=>{\n            setPanels({\n                \"EnhancedUIProvider.useCallback[closePanel]\": (prev)=>({\n                        ...prev,\n                        [type]: {\n                            ...prev[type],\n                            isOpen: false\n                        }\n                    })\n            }[\"EnhancedUIProvider.useCallback[closePanel]\"]);\n        }\n    }[\"EnhancedUIProvider.useCallback[closePanel]\"], []);\n    const setPanelPosition = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[setPanelPosition]\": (type, position)=>{\n            setPanels({\n                \"EnhancedUIProvider.useCallback[setPanelPosition]\": (prev)=>({\n                        ...prev,\n                        [type]: {\n                            ...prev[type],\n                            position\n                        }\n                    })\n            }[\"EnhancedUIProvider.useCallback[setPanelPosition]\"]);\n        }\n    }[\"EnhancedUIProvider.useCallback[setPanelPosition]\"], []);\n    const setCustomPanelContent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[setCustomPanelContent]\": (content, title, position)=>{\n            setPanels({\n                \"EnhancedUIProvider.useCallback[setCustomPanelContent]\": (prev)=>({\n                        ...prev,\n                        custom: {\n                            ...prev.custom,\n                            isOpen: true,\n                            customContent: content,\n                            title: title || prev.custom.title,\n                            position: position || prev.custom.position\n                        }\n                    })\n            }[\"EnhancedUIProvider.useCallback[setCustomPanelContent]\"]);\n        }\n    }[\"EnhancedUIProvider.useCallback[setCustomPanelContent]\"], []);\n    // Aircraft selection action\n    const selectAircraft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[selectAircraft]\": (aircraft)=>{\n            setSelectedAircraft(aircraft);\n            // Automatically open/close aircraft info panel\n            if (aircraft) {\n                openPanel('aircraftInfo', aircraft);\n            } else {\n                closePanel('aircraftInfo');\n            }\n        }\n    }[\"EnhancedUIProvider.useCallback[selectAircraft]\"], [\n        openPanel,\n        closePanel\n    ]);\n    // Tooltip actions\n    const showTooltip = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[showTooltip]\": (content, targetId, position = null)=>{\n            setTooltip({\n                isOpen: true,\n                content,\n                targetId,\n                position\n            });\n        }\n    }[\"EnhancedUIProvider.useCallback[showTooltip]\"], []);\n    const hideTooltip = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedUIProvider.useCallback[hideTooltip]\": ()=>{\n            setTooltip({\n                \"EnhancedUIProvider.useCallback[hideTooltip]\": (prev)=>({\n                        ...prev,\n                        isOpen: false\n                    })\n            }[\"EnhancedUIProvider.useCallback[hideTooltip]\"]);\n        }\n    }[\"EnhancedUIProvider.useCallback[hideTooltip]\"], []);\n    const value = {\n        // Providing the correct types to match EnhancedUIContextType\n        selectAircraft,\n        openPanel: openPanel,\n        closePanel,\n        panels: panels,\n        isLoading,\n        setIsLoading\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(EnhancedUIContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\components\\\\tracking\\\\context\\\\EnhancedUIContext.tsx\",\n        lineNumber: 303,\n        columnNumber: 5\n    }, undefined);\n};\n// Custom hook to use the context\nconst useEnhancedUI = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EnhancedUIContext);\n    if (context === undefined) {\n        throw new Error('useEnhancedUI must be used within an EnhancedUIProvider');\n    }\n    return context;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./components/tracking/context/EnhancedUIContext.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./components/tracking/context/LocationContex.tsx":
/*!********************************************************!*\
  !*** ./components/tracking/context/LocationContex.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocationProvider: () => (/* binding */ LocationProvider),\n/* harmony export */   useLocationUtils: () => (/* binding */ useLocationUtils)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst LocationContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst LocationProvider = ({ children })=>{\n    const formatCityCountry = (locationString)=>{\n        if (!locationString) return '';\n        const parts = locationString.split(',').map((p)=>p.trim());\n        if (parts.length >= 2) {\n            const country = parts[parts.length - 1];\n            let city = parts[0];\n            if (parts.length >= 3 && parts[0] === parts[1]) city = parts[0];\n            return `${city}, ${country}`;\n        }\n        return locationString;\n    };\n    const extractCountryFromFeature = (feature)=>{\n        if (!feature) return '';\n        const countryContext = feature.context?.find((c)=>c.id.startsWith('country.'));\n        if (countryContext) return countryContext.text;\n        if (feature.id.startsWith('country.')) return feature.text;\n        if (feature.place_name) {\n            const parts = feature.place_name.split(',').map((p)=>p.trim());\n            return parts.length ? parts[parts.length - 1] : '';\n        }\n        return '';\n    };\n    const extractCountryFromString = (locationString)=>{\n        if (!locationString) return '';\n        const parts = locationString.split(',').map((p)=>p.trim());\n        return parts.length ? parts[parts.length - 1] : locationString;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LocationContext.Provider, {\n        value: {\n            formatCityCountry,\n            extractCountryFromFeature,\n            extractCountryFromString\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\components\\\\tracking\\\\context\\\\LocationContex.tsx\",\n        lineNumber: 66,\n        columnNumber: 5\n    }, undefined);\n};\nconst useLocationUtils = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(LocationContext);\n    if (!context) {\n        throw new Error('useLocationUtils must be used within a LocationProvider');\n    }\n    return context;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL2NvbXBvbmVudHMvdHJhY2tpbmcvY29udGV4dC9Mb2NhdGlvbkNvbnRleC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFvRTtBQW1CcEUsTUFBTUcsZ0NBQWtCRixvREFBYUEsQ0FDbkNHO0FBT0ssTUFBTUMsbUJBQW1CLENBQUMsRUFBRUMsUUFBUSxFQUF5QjtJQUNsRSxNQUFNQyxvQkFBb0IsQ0FBQ0M7UUFDekIsSUFBSSxDQUFDQSxnQkFBZ0IsT0FBTztRQUM1QixNQUFNQyxRQUFRRCxlQUFlRSxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDLENBQUNDLElBQU1BLEVBQUVDLElBQUk7UUFDekQsSUFBSUosTUFBTUssTUFBTSxJQUFJLEdBQUc7WUFDckIsTUFBTUMsVUFBVU4sS0FBSyxDQUFDQSxNQUFNSyxNQUFNLEdBQUcsRUFBRTtZQUN2QyxJQUFJRSxPQUFPUCxLQUFLLENBQUMsRUFBRTtZQUNuQixJQUFJQSxNQUFNSyxNQUFNLElBQUksS0FBS0wsS0FBSyxDQUFDLEVBQUUsS0FBS0EsS0FBSyxDQUFDLEVBQUUsRUFBRU8sT0FBT1AsS0FBSyxDQUFDLEVBQUU7WUFDL0QsT0FBTyxHQUFHTyxLQUFLLEVBQUUsRUFBRUQsU0FBUztRQUM5QjtRQUNBLE9BQU9QO0lBQ1Q7SUFFQSxNQUFNUyw0QkFBNEIsQ0FBQ0M7UUFDakMsSUFBSSxDQUFDQSxTQUFTLE9BQU87UUFFckIsTUFBTUMsaUJBQWlCRCxRQUFRRSxPQUFPLEVBQUVDLEtBQUssQ0FBQ0MsSUFDNUNBLEVBQUVDLEVBQUUsQ0FBQ0MsVUFBVSxDQUFDO1FBRWxCLElBQUlMLGdCQUFnQixPQUFPQSxlQUFlTSxJQUFJO1FBRTlDLElBQUlQLFFBQVFLLEVBQUUsQ0FBQ0MsVUFBVSxDQUFDLGFBQWEsT0FBT04sUUFBUU8sSUFBSTtRQUUxRCxJQUFJUCxRQUFRUSxVQUFVLEVBQUU7WUFDdEIsTUFBTWpCLFFBQVFTLFFBQVFRLFVBQVUsQ0FBQ2hCLEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsSUFBSTtZQUM3RCxPQUFPSixNQUFNSyxNQUFNLEdBQUdMLEtBQUssQ0FBQ0EsTUFBTUssTUFBTSxHQUFHLEVBQUUsR0FBRztRQUNsRDtRQUVBLE9BQU87SUFDVDtJQUVBLE1BQU1hLDJCQUEyQixDQUFDbkI7UUFDaEMsSUFBSSxDQUFDQSxnQkFBZ0IsT0FBTztRQUM1QixNQUFNQyxRQUFRRCxlQUFlRSxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDLENBQUNDLElBQU1BLEVBQUVDLElBQUk7UUFDekQsT0FBT0osTUFBTUssTUFBTSxHQUFHTCxLQUFLLENBQUNBLE1BQU1LLE1BQU0sR0FBRyxFQUFFLEdBQUdOO0lBQ2xEO0lBRUEscUJBQ0UsOERBQUNMLGdCQUFnQnlCLFFBQVE7UUFDdkJDLE9BQU87WUFDTHRCO1lBQ0FVO1lBQ0FVO1FBQ0Y7a0JBRUNyQjs7Ozs7O0FBR1AsRUFBRTtBQUVLLE1BQU13QixtQkFBbUI7SUFDOUIsTUFBTVYsVUFBVWxCLGlEQUFVQSxDQUFDQztJQUMzQixJQUFJLENBQUNpQixTQUFTO1FBQ1osTUFBTSxJQUFJVyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT1g7QUFDVCxFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhdGhvXFxEb2N1bWVudHNcXFByb2plY3RzXFxhaXJjcmFmdC10cmFja2luZ1xcY29tcG9uZW50c1xcdHJhY2tpbmdcXGNvbnRleHRcXExvY2F0aW9uQ29udGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuLy8gWW91IGNhbiBhZGp1c3QgdGhpcyB0eXBlIHRvIG1hdGNoIHlvdXIgc3BlY2lmaWMgTWFwYm94RmVhdHVyZSBzaGFwZVxyXG5leHBvcnQgaW50ZXJmYWNlIE1hcGJveEZlYXR1cmUge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgdGV4dDogc3RyaW5nO1xyXG4gIHBsYWNlX25hbWU/OiBzdHJpbmc7XHJcbiAgY29udGV4dD86IEFycmF5PHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICB0ZXh0OiBzdHJpbmc7XHJcbiAgfT47XHJcbn1cclxuXHJcbmludGVyZmFjZSBMb2NhdGlvbkNvbnRleHRUeXBlIHtcclxuICBmb3JtYXRDaXR5Q291bnRyeTogKGxvY2F0aW9uU3RyaW5nOiBzdHJpbmcgfCBudWxsKSA9PiBzdHJpbmc7XHJcbiAgZXh0cmFjdENvdW50cnlGcm9tRmVhdHVyZTogKGZlYXR1cmU6IE1hcGJveEZlYXR1cmUpID0+IHN0cmluZztcclxuICBleHRyYWN0Q291bnRyeUZyb21TdHJpbmc6IChsb2NhdGlvblN0cmluZzogc3RyaW5nIHwgbnVsbCkgPT4gc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSBjcmVhdGVDb250ZXh0PExvY2F0aW9uQ29udGV4dFR5cGUgfCB1bmRlZmluZWQ+KFxyXG4gIHVuZGVmaW5lZFxyXG4pO1xyXG5cclxuaW50ZXJmYWNlIExvY2F0aW9uUHJvdmlkZXJQcm9wcyB7XHJcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExvY2F0aW9uUHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9OiBMb2NhdGlvblByb3ZpZGVyUHJvcHMpID0+IHtcclxuICBjb25zdCBmb3JtYXRDaXR5Q291bnRyeSA9IChsb2NhdGlvblN0cmluZzogc3RyaW5nIHwgbnVsbCk6IHN0cmluZyA9PiB7XHJcbiAgICBpZiAoIWxvY2F0aW9uU3RyaW5nKSByZXR1cm4gJyc7XHJcbiAgICBjb25zdCBwYXJ0cyA9IGxvY2F0aW9uU3RyaW5nLnNwbGl0KCcsJykubWFwKChwKSA9PiBwLnRyaW0oKSk7XHJcbiAgICBpZiAocGFydHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgY29uc3QgY291bnRyeSA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xyXG4gICAgICBsZXQgY2l0eSA9IHBhcnRzWzBdO1xyXG4gICAgICBpZiAocGFydHMubGVuZ3RoID49IDMgJiYgcGFydHNbMF0gPT09IHBhcnRzWzFdKSBjaXR5ID0gcGFydHNbMF07XHJcbiAgICAgIHJldHVybiBgJHtjaXR5fSwgJHtjb3VudHJ5fWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbG9jYXRpb25TdHJpbmc7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZXh0cmFjdENvdW50cnlGcm9tRmVhdHVyZSA9IChmZWF0dXJlOiBNYXBib3hGZWF0dXJlKTogc3RyaW5nID0+IHtcclxuICAgIGlmICghZmVhdHVyZSkgcmV0dXJuICcnO1xyXG5cclxuICAgIGNvbnN0IGNvdW50cnlDb250ZXh0ID0gZmVhdHVyZS5jb250ZXh0Py5maW5kKChjKSA9PlxyXG4gICAgICBjLmlkLnN0YXJ0c1dpdGgoJ2NvdW50cnkuJylcclxuICAgICk7XHJcbiAgICBpZiAoY291bnRyeUNvbnRleHQpIHJldHVybiBjb3VudHJ5Q29udGV4dC50ZXh0O1xyXG5cclxuICAgIGlmIChmZWF0dXJlLmlkLnN0YXJ0c1dpdGgoJ2NvdW50cnkuJykpIHJldHVybiBmZWF0dXJlLnRleHQ7XHJcblxyXG4gICAgaWYgKGZlYXR1cmUucGxhY2VfbmFtZSkge1xyXG4gICAgICBjb25zdCBwYXJ0cyA9IGZlYXR1cmUucGxhY2VfbmFtZS5zcGxpdCgnLCcpLm1hcCgocCkgPT4gcC50cmltKCkpO1xyXG4gICAgICByZXR1cm4gcGFydHMubGVuZ3RoID8gcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gOiAnJztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gJyc7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZXh0cmFjdENvdW50cnlGcm9tU3RyaW5nID0gKGxvY2F0aW9uU3RyaW5nOiBzdHJpbmcgfCBudWxsKTogc3RyaW5nID0+IHtcclxuICAgIGlmICghbG9jYXRpb25TdHJpbmcpIHJldHVybiAnJztcclxuICAgIGNvbnN0IHBhcnRzID0gbG9jYXRpb25TdHJpbmcuc3BsaXQoJywnKS5tYXAoKHApID0+IHAudHJpbSgpKTtcclxuICAgIHJldHVybiBwYXJ0cy5sZW5ndGggPyBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSA6IGxvY2F0aW9uU3RyaW5nO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8TG9jYXRpb25Db250ZXh0LlByb3ZpZGVyXHJcbiAgICAgIHZhbHVlPXt7XHJcbiAgICAgICAgZm9ybWF0Q2l0eUNvdW50cnksXHJcbiAgICAgICAgZXh0cmFjdENvdW50cnlGcm9tRmVhdHVyZSxcclxuICAgICAgICBleHRyYWN0Q291bnRyeUZyb21TdHJpbmcsXHJcbiAgICAgIH19XHJcbiAgICA+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdXNlTG9jYXRpb25VdGlscyA9ICgpOiBMb2NhdGlvbkNvbnRleHRUeXBlID0+IHtcclxuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpO1xyXG4gIGlmICghY29udGV4dCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VMb2NhdGlvblV0aWxzIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBMb2NhdGlvblByb3ZpZGVyJyk7XHJcbiAgfVxyXG4gIHJldHVybiBjb250ZXh0O1xyXG59O1xyXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsInVuZGVmaW5lZCIsIkxvY2F0aW9uUHJvdmlkZXIiLCJjaGlsZHJlbiIsImZvcm1hdENpdHlDb3VudHJ5IiwibG9jYXRpb25TdHJpbmciLCJwYXJ0cyIsInNwbGl0IiwibWFwIiwicCIsInRyaW0iLCJsZW5ndGgiLCJjb3VudHJ5IiwiY2l0eSIsImV4dHJhY3RDb3VudHJ5RnJvbUZlYXR1cmUiLCJmZWF0dXJlIiwiY291bnRyeUNvbnRleHQiLCJjb250ZXh0IiwiZmluZCIsImMiLCJpZCIsInN0YXJ0c1dpdGgiLCJ0ZXh0IiwicGxhY2VfbmFtZSIsImV4dHJhY3RDb3VudHJ5RnJvbVN0cmluZyIsIlByb3ZpZGVyIiwidmFsdWUiLCJ1c2VMb2NhdGlvblV0aWxzIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-node)/./components/tracking/context/LocationContex.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./components/tracking/persistence/AircraftDataPersistence.ts":
/*!********************************************************************!*\
  !*** ./components/tracking/persistence/AircraftDataPersistence.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearAircraftData: () => (/* binding */ clearAircraftData),\n/* harmony export */   getSessionId: () => (/* binding */ getSessionId),\n/* harmony export */   loadAircraftData: () => (/* binding */ loadAircraftData),\n/* harmony export */   loadMapState: () => (/* binding */ loadMapState),\n/* harmony export */   loadSelectedAircraft: () => (/* binding */ loadSelectedAircraft),\n/* harmony export */   loadTrailState: () => (/* binding */ loadTrailState),\n/* harmony export */   mergeAircraftData: () => (/* binding */ mergeAircraftData),\n/* harmony export */   saveAircraftData: () => (/* binding */ saveAircraftData),\n/* harmony export */   saveMapState: () => (/* binding */ saveMapState),\n/* harmony export */   saveSelectedAircraft: () => (/* binding */ saveSelectedAircraft),\n/* harmony export */   saveTrailState: () => (/* binding */ saveTrailState)\n/* harmony export */ });\n// utils/AircraftDataPersistance.ts\n// Storage keys\nconst AIRCRAFT_DATA_KEY = 'aircraft_tracking_data';\nconst MAP_STATE_KEY = 'aircraft_map_state';\nconst SELECTED_AIRCRAFT_KEY = 'selected_aircraft';\nconst TRAIL_STATE_KEY = 'aircraft_trail_state';\n/**\r\n * Save aircraft data to localStorage\r\n */ function saveAircraftData(data) {\n    // Check if we're in a browser environment\n    if (true) {\n        return;\n    }\n    try {\n        localStorage.setItem(AIRCRAFT_DATA_KEY, JSON.stringify(data));\n        console.log(`[Persistence] Saved ${Object.keys(data).length} aircraft to localStorage`);\n    } catch (error) {\n        console.error('[Persistence] Error saving aircraft data:', error);\n        // Handle quota exceeded errors\n        if (error instanceof DOMException && error.name === 'QuotaExceededError') {\n            // Clear older entries to make room\n            pruneOldAircraftData(data);\n        }\n    }\n}\n/**\r\n * Load aircraft data from localStorage\r\n */ function loadAircraftData() {\n    // Check if we're in a browser environment\n    if (true) {\n        return {};\n    }\n    try {\n        const data = localStorage.getItem(AIRCRAFT_DATA_KEY);\n        if (!data) return {};\n        const parsed = JSON.parse(data);\n        console.log(`[Persistence] Loaded ${Object.keys(parsed).length} aircraft from localStorage`);\n        // Filter out stale data (older than 24 hours)\n        return filterStaleData(parsed);\n    } catch (error) {\n        console.error('[Persistence] Error loading aircraft data:', error);\n        return {};\n    }\n}\n/**\r\n * Clear all aircraft data from localStorage\r\n */ function clearAircraftData() {\n    if (true) {\n        return;\n    }\n    try {\n        localStorage.removeItem(AIRCRAFT_DATA_KEY);\n        console.log('[Persistence] Cleared all aircraft data from localStorage');\n    } catch (error) {\n        console.error('[Persistence] Error clearing aircraft data:', error);\n    }\n}\n/**\r\n * Save map state to localStorage\r\n */ function saveMapState(center, zoom) {\n    if (true) {\n        return;\n    }\n    try {\n        const mapState = {\n            center,\n            zoom,\n            lastUpdated: Date.now()\n        };\n        localStorage.setItem(MAP_STATE_KEY, JSON.stringify(mapState));\n    } catch (error) {\n        console.error('[Persistence] Error saving map state:', error);\n    }\n}\n/**\r\n * Load map state from localStorage\r\n */ function loadMapState() {\n    if (true) {\n        return null;\n    }\n    try {\n        const data = localStorage.getItem(MAP_STATE_KEY);\n        if (!data) return null;\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('[Persistence] Error loading map state:', error);\n        return null;\n    }\n}\n/**\r\n * Save selected aircraft ICAO24 to localStorage\r\n */ function saveSelectedAircraft(icao) {\n    if (true) {\n        return;\n    }\n    try {\n        if (icao) {\n            localStorage.setItem(SELECTED_AIRCRAFT_KEY, icao);\n        } else {\n            localStorage.removeItem(SELECTED_AIRCRAFT_KEY);\n        }\n    } catch (error) {\n        console.error('[Persistence] Error saving selected aircraft:', error);\n    }\n}\n/**\r\n * Load selected aircraft ICAO24 from localStorage\r\n */ function loadSelectedAircraft() {\n    if (true) {\n        return null;\n    }\n    try {\n        return localStorage.getItem(SELECTED_AIRCRAFT_KEY);\n    } catch (error) {\n        console.error('[Persistence] Error loading selected aircraft:', error);\n        return null;\n    }\n}\n/**\r\n * Save trail state to localStorage\r\n */ function saveTrailState(state) {\n    if (true) {\n        return;\n    }\n    try {\n        // Limit the number of trails saved to avoid storage limits\n        const limitedTrails = {\n            ...state,\n            trails: {}\n        };\n        // Only save max 20 trails to avoid storage issues\n        const icaos = Object.keys(state.trails).slice(0, 20);\n        // For each saved trail, limit the number of points\n        icaos.forEach((icao)=>{\n            // Limit each trail to 100 points max (about 5-10 minutes of data)\n            const trail = state.trails[icao];\n            limitedTrails.trails[icao] = trail.slice(Math.max(0, trail.length - 100));\n        });\n        localStorage.setItem(TRAIL_STATE_KEY, JSON.stringify(limitedTrails));\n        console.log(`[Persistence] Saved trail state with ${icaos.length} trails`);\n    } catch (error) {\n        console.error('[Persistence] Error saving trail state:', error);\n    }\n}\n/**\r\n * Load trail state from localStorage\r\n */ function loadTrailState() {\n    if (true) {\n        return null;\n    }\n    try {\n        const data = localStorage.getItem(TRAIL_STATE_KEY);\n        if (!data) return null;\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('[Persistence] Error loading trail state:', error);\n        return null;\n    }\n}\n/**\r\n * Filter out stale data (older than 24 hours)\r\n */ function filterStaleData(data) {\n    const cutoff = Date.now() - 24 * 60 * 60 * 1000; // 24 hours ago\n    const filtered = {};\n    for (const [icao, aircraft] of Object.entries(data)){\n        // Skip if lastUpdated is missing or too old\n        if (!aircraft.lastUpdated || aircraft.lastUpdated < cutoff) {\n            continue;\n        }\n        filtered[icao] = aircraft;\n    }\n    const removedCount = Object.keys(data).length - Object.keys(filtered).length;\n    if (removedCount > 0) {\n        console.log(`[Persistence] Filtered out ${removedCount} stale aircraft`);\n    }\n    return filtered;\n}\n/**\r\n * Prune old aircraft data when storage quota is exceeded\r\n */ function pruneOldAircraftData(data) {\n    // Sort by lastUpdated timestamp (oldest first)\n    const sortedEntries = Object.entries(data).sort(([, a], [, b])=>(a.lastUpdated || 0) - (b.lastUpdated || 0));\n    // Remove the oldest 25% of entries\n    const toRemove = Math.ceil(sortedEntries.length * 0.25);\n    const prunedData = {};\n    // Keep only the newer 75%\n    sortedEntries.slice(toRemove).forEach(([icao, aircraft])=>{\n        prunedData[icao] = aircraft;\n    });\n    console.log(`[Persistence] Pruned ${toRemove} aircraft to save storage space`);\n    // Try saving again with reduced data\n    try {\n        localStorage.setItem(AIRCRAFT_DATA_KEY, JSON.stringify(prunedData));\n    } catch (error) {\n        // If still failing, clear everything\n        console.error('[Persistence] Still exceeding quota after pruning, clearing all data');\n        clearAircraftData();\n    }\n}\n/**\r\n * Merge current aircraft data with cached data\r\n * Prioritize dynamic fields from current data, preserve static fields from cache\r\n */ function mergeAircraftData(cachedData, currentData) {\n    const result = {\n        ...cachedData\n    };\n    // Process all current aircraft\n    for (const [icao, currentAircraft] of Object.entries(currentData)){\n        const cachedAircraft = cachedData[icao];\n        if (!cachedAircraft) {\n            // No cached data, just use current data\n            result[icao] = {\n                ...currentAircraft,\n                lastUpdated: Date.now()\n            };\n            continue;\n        }\n        // Merge with prioritization of fields\n        result[icao] = mergeAircraftFields(cachedAircraft, currentAircraft);\n    }\n    return result;\n}\n/**\r\n * Merge fields from two aircraft objects with field-specific priorities\r\n */ function mergeAircraftFields(cached, current) {\n    // Create a new object to avoid mutating the original\n    const result = {\n        ...cached\n    };\n    // Always update these dynamic position fields from current data\n    const dynamicFields = [\n        'latitude',\n        'longitude',\n        'altitude',\n        'velocity',\n        'heading',\n        'on_ground',\n        'last_contact'\n    ];\n    // Update all dynamic fields from current data\n    for (const field of dynamicFields){\n        if (current[field] !== undefined) {\n            result[field] = current[field];\n        }\n    }\n    // Update static fields only if they have values in current data\n    const staticFields = [\n        'registration',\n        'MODEL',\n        'MANUFACTURER',\n        'REGISTRATION',\n        'TYPE_AIRCRAFT',\n        'NAME',\n        'TYPE_REGISTRANT',\n        'CITY',\n        'STATE'\n    ];\n    for (const field of staticFields){\n        const key = field;\n        if (current[key] !== undefined && current[key] !== null && current[key] !== '') {\n            result[field] = current[key];\n        }\n    }\n    // Always update timestamp\n    result.lastUpdated = Date.now();\n    return result;\n}\n/**\r\n * Get a session-persistent unique ID\r\n * This helps with tracking UI state across refreshes\r\n * Safe for server-side rendering\r\n */ function getSessionId() {\n    // Check if we're in a browser environment\n    if (true) {\n        // Return a temporary ID for server-side rendering\n        return `temp_session_${Date.now()}`;\n    }\n    // Browser environment\n    let id = sessionStorage.getItem('aircraft_tracking_session_id');\n    if (!id) {\n        id = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        sessionStorage.setItem('aircraft_tracking_session_id', id);\n    }\n    return id;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./components/tracking/persistence/AircraftDataPersistence.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./components/tracking/persistence/DataPersistenceManager.tsx":
/*!********************************************************************!*\
  !*** ./components/tracking/persistence/DataPersistenceManager.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataPersistenceProvider: () => (/* binding */ DataPersistenceProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useDataPersistence: () => (/* binding */ useDataPersistence)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../persistence/AircraftDataPersistence */ \"(pages-dir-node)/./components/tracking/persistence/AircraftDataPersistence.ts\");\n// components/tracking/context/DataPersistenceManager.tsx\n\n\n\n// Create context\nconst DataPersistenceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Provider component\nconst DataPersistenceProvider = ({ children })=>{\n    // State for cached aircraft data\n    const [cachedAircraft, setCachedAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [lastUpdated, setLastUpdated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [cacheSize, setCacheSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [sessionId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.getSessionId)());\n    // Load data on initial mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DataPersistenceProvider.useEffect\": ()=>{\n            // Load cached aircraft data\n            const savedData = (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.loadAircraftData)();\n            if (savedData && Object.keys(savedData).length > 0) {\n                setCachedAircraft(savedData);\n                setCacheSize(Object.keys(savedData).length);\n                setLastUpdated(Date.now());\n                console.log(`[DataPersistence] Loaded ${Object.keys(savedData).length} aircraft from storage`);\n            }\n        }\n    }[\"DataPersistenceProvider.useEffect\"], []);\n    // Update aircraft cache with new data\n    const updateAircraftCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[updateAircraftCache]\": (aircraftList)=>{\n            if (!aircraftList || aircraftList.length === 0) return;\n            setCachedAircraft({\n                \"DataPersistenceProvider.useCallback[updateAircraftCache]\": (prevCache)=>{\n                    // Convert aircraft array to record format\n                    const currentData = {};\n                    aircraftList.forEach({\n                        \"DataPersistenceProvider.useCallback[updateAircraftCache]\": (aircraft)=>{\n                            if (aircraft.ICAO24) {\n                                // Convert to CachedAircraftData format\n                                currentData[aircraft.ICAO24] = {\n                                    ...aircraft,\n                                    ICAO24: aircraft.ICAO24,\n                                    lastUpdated: Date.now(),\n                                    // Ensure required fields are present with default values\n                                    latitude: aircraft.latitude || 0,\n                                    longitude: aircraft.longitude || 0,\n                                    altitude: aircraft.altitude || 0,\n                                    velocity: aircraft.velocity || 0,\n                                    heading: aircraft.heading || 0,\n                                    on_ground: aircraft.on_ground || false,\n                                    last_contact: aircraft.last_contact || Date.now()\n                                };\n                            }\n                        }\n                    }[\"DataPersistenceProvider.useCallback[updateAircraftCache]\"]);\n                    // Merge with existing cached data\n                    const mergedData = (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.mergeAircraftData)(prevCache, currentData);\n                    // Save to localStorage\n                    (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.saveAircraftData)(mergedData);\n                    // Update cache stats\n                    setCacheSize(Object.keys(mergedData).length);\n                    setLastUpdated(Date.now());\n                    return mergedData;\n                }\n            }[\"DataPersistenceProvider.useCallback[updateAircraftCache]\"]);\n        }\n    }[\"DataPersistenceProvider.useCallback[updateAircraftCache]\"], []);\n    // Get enhanced aircraft with cached data\n    const getEnhancedAircraft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[getEnhancedAircraft]\": (aircraft)=>{\n            if (!aircraft.ICAO24 || !cachedAircraft[aircraft.ICAO24]) {\n                return aircraft;\n            }\n            const cached = cachedAircraft[aircraft.ICAO24];\n            // Start with current aircraft data (for latest position)\n            const enhanced = {\n                ...aircraft\n            };\n            // Add missing fields from cache (only if they're empty in current data)\n            const staticFields = [\n                'registration',\n                'MODEL',\n                'MANUFACTURER',\n                'REGISTRATION',\n                'TYPE_AIRCRAFT',\n                'NAME',\n                'TYPE_REGISTRANT',\n                'CITY',\n                'STATE'\n            ];\n            staticFields.forEach({\n                \"DataPersistenceProvider.useCallback[getEnhancedAircraft]\": (field)=>{\n                    if ((!enhanced[field] || enhanced[field] === '') && cached[field]) {\n                        enhanced[field] = cached[field];\n                    }\n                }\n            }[\"DataPersistenceProvider.useCallback[getEnhancedAircraft]\"]);\n            return enhanced;\n        }\n    }[\"DataPersistenceProvider.useCallback[getEnhancedAircraft]\"], [\n        cachedAircraft\n    ]);\n    // Clear the cache\n    const clearCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[clearCache]\": ()=>{\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.clearAircraftData)();\n            setCachedAircraft({});\n            setCacheSize(0);\n            setLastUpdated(null);\n            console.log('[DataPersistence] Cache cleared');\n        }\n    }[\"DataPersistenceProvider.useCallback[clearCache]\"], []);\n    // Save map position\n    const saveMapPosition = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[saveMapPosition]\": (center, zoom)=>{\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.saveMapState)(center, zoom);\n        }\n    }[\"DataPersistenceProvider.useCallback[saveMapPosition]\"], []);\n    // Get initial map state\n    const getInitialMapState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[getInitialMapState]\": ()=>{\n            return (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.loadMapState)();\n        }\n    }[\"DataPersistenceProvider.useCallback[getInitialMapState]\"], []);\n    // Save selected aircraft\n    const saveSelectedAircraftId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[saveSelectedAircraftId]\": (icao)=>{\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.saveSelectedAircraft)(icao);\n        }\n    }[\"DataPersistenceProvider.useCallback[saveSelectedAircraftId]\"], []);\n    // Get selected aircraft\n    const getSelectedAircraftId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[getSelectedAircraftId]\": ()=>{\n            return (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.loadSelectedAircraft)();\n        }\n    }[\"DataPersistenceProvider.useCallback[getSelectedAircraftId]\"], []);\n    // Save trails\n    const saveTrails = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[saveTrails]\": (enabled, maxLength, trails)=>{\n            // Convert Map to Record for storage\n            const trailsRecord = {};\n            trails.forEach({\n                \"DataPersistenceProvider.useCallback[saveTrails]\": (positions, icao)=>{\n                    trailsRecord[icao] = positions;\n                }\n            }[\"DataPersistenceProvider.useCallback[saveTrails]\"]);\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.saveTrailState)({\n                enabled,\n                maxLength,\n                trails: trailsRecord,\n                lastUpdated: Date.now()\n            });\n        }\n    }[\"DataPersistenceProvider.useCallback[saveTrails]\"], []);\n    // Get initial trail state\n    const getInitialTrailState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DataPersistenceProvider.useCallback[getInitialTrailState]\": ()=>{\n            const state = (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_2__.loadTrailState)();\n            if (!state) return null;\n            // Convert Record back to Map\n            const trailsMap = new Map();\n            Object.entries(state.trails).forEach({\n                \"DataPersistenceProvider.useCallback[getInitialTrailState]\": ([icao, positions])=>{\n                    trailsMap.set(icao, positions);\n                }\n            }[\"DataPersistenceProvider.useCallback[getInitialTrailState]\"]);\n            return {\n                enabled: state.enabled,\n                maxLength: state.maxLength,\n                trails: trailsMap\n            };\n        }\n    }[\"DataPersistenceProvider.useCallback[getInitialTrailState]\"], []);\n    // Create context value\n    const contextValue = {\n        cachedAircraft,\n        updateAircraftCache,\n        getEnhancedAircraft,\n        clearCache,\n        saveMapPosition,\n        getInitialMapState,\n        saveSelectedAircraftId,\n        getSelectedAircraftId,\n        saveTrails,\n        getInitialTrailState,\n        cacheSize,\n        lastUpdated,\n        sessionId\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DataPersistenceContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\components\\\\tracking\\\\persistence\\\\DataPersistenceManager.tsx\",\n        lineNumber: 273,\n        columnNumber: 5\n    }, undefined);\n};\n// Custom hook to use the context\nconst useDataPersistence = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(DataPersistenceContext);\n    if (context === undefined) {\n        throw new Error('useDataPersistence must be used within a DataPersistenceProvider');\n    }\n    return context;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DataPersistenceContext);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./components/tracking/persistence/DataPersistenceManager.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./config/map.ts":
/*!***********************!*\
  !*** ./config/map.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTINENTAL_US_BOUNDS: () => (/* binding */ CONTINENTAL_US_BOUNDS),\n/* harmony export */   GLOBAL_BOUNDS: () => (/* binding */ GLOBAL_BOUNDS),\n/* harmony export */   MAP_CONFIG: () => (/* binding */ MAP_CONFIG),\n/* harmony export */   TILE_LAYER: () => (/* binding */ TILE_LAYER),\n/* harmony export */   getBoundsByRegion: () => (/* binding */ getBoundsByRegion),\n/* harmony export */   getLeafletCRS: () => (/* binding */ getLeafletCRS),\n/* harmony export */   getZoomLevelForRegion: () => (/* binding */ getZoomLevelForRegion)\n/* harmony export */ });\n/* harmony import */ var _types_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/base */ \"(pages-dir-node)/./types/base.ts\");\n\nconst MAP_CONFIG = {\n    // Set center to a more global view (close to 0,0 but adjusted for better visibility)\n    CENTER: [\n        20,\n        0\n    ],\n    DEFAULT_ZOOM: 3,\n    // Keep North America bounds but add definitions for other regions\n    NORTH_AMERICA_BOUNDS: [\n        [\n            7.0,\n            -180.0\n        ],\n        [\n            72.0,\n            -50.0\n        ]\n    ],\n    REGION_ZOOM_LEVELS: {\n        GLOBAL: 3,\n        North_America: 4,\n        South_America: 4,\n        Europe: 4,\n        Asia: 4,\n        Africa: 4,\n        Oceania: 4\n    },\n    // Add other regional bounds\n    SOUTH_AMERICA_BOUNDS: [\n        [\n            -60.0,\n            -85.0\n        ],\n        [\n            15.0,\n            -30.0\n        ]\n    ],\n    EUROPE_BOUNDS: [\n        [\n            36.0,\n            -10.0\n        ],\n        [\n            70.0,\n            40.0\n        ]\n    ],\n    ASIA_BOUNDS: [\n        [\n            -10.0,\n            60.0\n        ],\n        [\n            60.0,\n            150.0\n        ]\n    ],\n    AFRICA_BOUNDS: [\n        [\n            -35.0,\n            -20.0\n        ],\n        [\n            40.0,\n            55.0\n        ]\n    ],\n    OCEANIA_BOUNDS: [\n        [\n            -50.0,\n            110.0\n        ],\n        [\n            10.0,\n            180.0\n        ]\n    ],\n    GLOBAL_BOUNDS: [\n        [\n            -85,\n            -180\n        ],\n        [\n            85,\n            180\n        ]\n    ],\n    OPTIONS: {\n        zoomControl: false,\n        minZoom: 3,\n        maxZoom: 18,\n        scrollWheelZoom: true,\n        worldCopyJump: true\n    },\n    CONTROLS: {\n        ZOOM: {\n            MIN: 2,\n            MAX: 18,\n            DEFAULT: 3,\n            AIRCRAFT_FOCUS: 12,\n            POSITION: 'topright'\n        },\n        BOUNDS: {\n            MAX_LAT: 85,\n            MIN_LAT: -85,\n            MAX_LNG: 180,\n            MIN_LNG: -180\n        },\n        POSITION: {\n            TOP_RIGHT: 'topright',\n            TOP_LEFT: 'topleft',\n            BOTTOM_RIGHT: 'bottomright',\n            BOTTOM_LEFT: 'bottomleft'\n        },\n        TILE_LAYER: {\n            // OpenStreetMap is generally better for global coverage than OpenTopoMap\n            URL: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            ATTRIBUTION: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n            maxZoom: 19\n        },\n        // Add alternate tile layers that might be better for global use\n        ALTERNATE_LAYERS: {\n            TERRAIN: {\n                URL: 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.png',\n                ATTRIBUTION: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>',\n                maxZoom: 18\n            },\n            TONER: {\n                URL: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}{r}.png',\n                ATTRIBUTION: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>',\n                maxZoom: 18\n            }\n        }\n    },\n    REFRESH_INTERVALS: {\n        POSITION_UPDATE: 50000,\n        DATA_SYNC: 60000\n    },\n    PADDING: {\n        DEFAULT: [\n            20,\n            20\n        ],\n        SIDEBAR_OPEN: [\n            300,\n            20\n        ]\n    },\n    CRS: null,\n    CLUSTER: {\n        MAX_CLUSTER_RADIUS: 80,\n        SPIDERFY_ON_MAX_ZOOM: true,\n        SHOW_COVERAGE_ON_HOVER: false,\n        DISABLE_CLUSTERS_AT_ZOOM: 12\n    },\n    BASE_LAYERS: {\n        OSM: 'OpenStreetMap',\n        SATELLITE: 'Satellite',\n        TOPOGRAPHIC: 'Topographic',\n        TERRAIN: 'Terrain',\n        TONER: 'Toner'\n    },\n    // Define regions for quick selection\n    REGIONS: {\n        GLOBAL: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.GLOBAL,\n        North_America: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.North_America,\n        Europe: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Europe,\n        Asia: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Asia,\n        Africa: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Africa,\n        Oceania: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Oceania,\n        South_America: _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.South_America\n    }\n};\n// Reusable Bounds and Tile Layer\nconst CONTINENTAL_US_BOUNDS = MAP_CONFIG.NORTH_AMERICA_BOUNDS;\nconst GLOBAL_BOUNDS = MAP_CONFIG.GLOBAL_BOUNDS;\nconst TILE_LAYER = MAP_CONFIG.CONTROLS.TILE_LAYER;\n// ✨ Client-side utility to get CRS when needed\nconst getLeafletCRS = ()=>{\n    if (false) {}\n    return null;\n};\n// Helper function to get bounds by region name\nconst getBoundsByRegion = (region)=>{\n    // Check if the region is a string (backward compatibility)\n    if (typeof region === 'string') {\n        // Handle legacy string-based regions for backward compatibility\n        switch(region){\n            case 'North America':\n                return MAP_CONFIG.NORTH_AMERICA_BOUNDS;\n            case 'Europe':\n                return MAP_CONFIG.EUROPE_BOUNDS;\n            case 'Asia':\n                return MAP_CONFIG.ASIA_BOUNDS;\n            case 'Africa':\n                return MAP_CONFIG.AFRICA_BOUNDS;\n            case 'Oceania':\n                return MAP_CONFIG.OCEANIA_BOUNDS;\n            case 'South America':\n                return MAP_CONFIG.SOUTH_AMERICA_BOUNDS;\n            case 'Global':\n            default:\n                return MAP_CONFIG.GLOBAL_BOUNDS;\n        }\n    }\n    // Handle numeric regions\n    switch(region){\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.North_America:\n            return MAP_CONFIG.NORTH_AMERICA_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Europe:\n            return MAP_CONFIG.EUROPE_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Asia:\n            return MAP_CONFIG.ASIA_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Africa:\n            return MAP_CONFIG.AFRICA_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Oceania:\n            return MAP_CONFIG.OCEANIA_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.South_America:\n            return MAP_CONFIG.SOUTH_AMERICA_BOUNDS;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.GLOBAL:\n        default:\n            return MAP_CONFIG.GLOBAL_BOUNDS;\n    }\n};\n// Add a new helper function to get the appropriate zoom level for a region\nconst getZoomLevelForRegion = (region)=>{\n    // Handle string-based regions for backward compatibility\n    if (typeof region === 'string') {\n        switch(region){\n            case 'North America':\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.North_America;\n            case 'Europe':\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.Europe;\n            case 'Asia':\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.Asia;\n            case 'Africa':\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.Africa;\n            case 'Oceania':\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.Oceania;\n            case 'Global':\n            default:\n                return MAP_CONFIG.REGION_ZOOM_LEVELS.GLOBAL;\n        }\n    }\n    // Handle numeric regions\n    switch(region){\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.North_America:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.North_America;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Europe:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.Europe;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Asia:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.Asia;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Africa:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.Africa;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.Oceania:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.Oceania;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.South_America:\n            // Fallback if South America zoom level isn't defined\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.South_America || MAP_CONFIG.REGION_ZOOM_LEVELS.GLOBAL;\n        case _types_base__WEBPACK_IMPORTED_MODULE_0__.RegionCode.GLOBAL:\n        default:\n            return MAP_CONFIG.REGION_ZOOM_LEVELS.GLOBAL;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./config/map.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/services/ManufacturersService.ts":
/*!**********************************************!*\
  !*** ./lib/services/ManufacturersService.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// lib/services/tracking-services/ManufacturersService.ts\nclass ManufacturersService {\n    constructor(){\n        this.manufacturers = [];\n        this.loading = false;\n        this.subscribers = [];\n    }\n    /**\r\n   * Get the singleton instance\r\n   */ static getInstance() {\n        if (!ManufacturersService.instance) {\n            ManufacturersService.instance = new ManufacturersService();\n        }\n        return ManufacturersService.instance;\n    }\n    /**\r\n   * Initialize the service with pre-fetched data\r\n   */ initializeWithData(data) {\n        if (data && data.length > 0) {\n            console.log(`[ManufacturersService] Initializing with ${data.length} manufacturers from SSR`);\n            this.manufacturers = data;\n            // Notify subscribers about the new data\n            this.notifySubscribers();\n        }\n    }\n    /**\r\n   * Subscribe to manufacturers updates\r\n   */ subscribe(callback) {\n        this.subscribers.push(callback);\n        // Immediately notify with current data if available\n        if (this.manufacturers.length > 0) {\n            callback(this.manufacturers);\n        }\n        // Return unsubscribe function\n        return ()=>{\n            this.subscribers = this.subscribers.filter((sub)=>sub !== callback);\n        };\n    }\n    /**\r\n   * Notify all subscribers\r\n   */ notifySubscribers() {\n        for (const subscriber of this.subscribers){\n            subscriber(this.manufacturers);\n        }\n    }\n    /**\r\n   * Load manufacturers from the API\r\n   */ async loadManufacturers() {\n        if (this.loading) {\n            return this.manufacturers;\n        }\n        // If we already have manufacturers loaded, return them\n        if (this.manufacturers.length > 0) {\n            return this.manufacturers;\n        }\n        this.loading = true;\n        try {\n            console.log('[ManufacturersService] Fetching manufacturers...');\n            const response = await fetch('/api/tracking/manufacturers');\n            if (!response.ok) {\n                throw new Error(`Failed to fetch manufacturers: ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`[ManufacturersService] Loaded ${data.length} manufacturers`);\n            this.manufacturers = data || [];\n            // Notify subscribers\n            this.notifySubscribers();\n            return this.manufacturers;\n        } catch (error) {\n            console.error('[ManufacturersService] Error loading manufacturers:', error);\n            return [];\n        } finally{\n            this.loading = false;\n        }\n    }\n    /**\r\n   * Get currently loaded manufacturers\r\n   */ getManufacturers() {\n        return this.manufacturers;\n    }\n    /**\r\n   * Refresh manufacturers\r\n   */ async refreshManufacturers() {\n        this.loading = true;\n        try {\n            console.log('[ManufacturersService] Refreshing manufacturers...');\n            const response = await fetch('/api/tracking/manufacturers');\n            if (!response.ok) {\n                throw new Error(`Failed to fetch manufacturers: ${response.statusText}`);\n            }\n            const data = await response.json();\n            console.log(`[ManufacturersService] Refreshed ${data.length} manufacturers`);\n            this.manufacturers = data || [];\n            // Notify subscribers\n            this.notifySubscribers();\n            return this.manufacturers;\n        } catch (error) {\n            console.error('[ManufacturersService] Error refreshing manufacturers:', error);\n            return this.manufacturers;\n        } finally{\n            this.loading = false;\n        }\n    }\n}\nconst manufacturersService = ManufacturersService.getInstance();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (manufacturersService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/services/ManufacturersService.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/services/openSkyTrackingService.ts":
/*!************************************************!*\
  !*** ./lib/services/openSkyTrackingService.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   setRefreshInProgress: () => (/* binding */ setRefreshInProgress)\n/* harmony export */ });\n// lib/services/OpenSkyTrackingService.ts\n// Track active requests to prevent duplicate calls\nconst activeRequests = new Map();\nconst trackingCache = new Map();\n// Add this at the top of your file, with the other variables\nlet blockAllApiCalls = false;\nasync function processBatchedRequests(items, batchProcessor, batchSize) {\n    // Initialize results as empty array\n    let allResults = [];\n    // Create batches\n    const batches = [];\n    for(let i = 0; i < items.length; i += batchSize){\n        batches.push(items.slice(i, i + batchSize));\n    }\n    console.log(`Processing ${items.length} items in ${batches.length} batches`);\n    // Process each batch sequentially\n    for(let i = 0; i < batches.length; i++){\n        const batch = batches[i];\n        try {\n            console.log(`Processing batch ${i + 1}/${batches.length} (${batch.length} items)`);\n            const batchResult = await batchProcessor(batch);\n            // Make sure batchResult is an array before spreading\n            if (Array.isArray(batchResult)) {\n                allResults = [\n                    ...allResults,\n                    ...batchResult\n                ];\n            } else {\n                console.warn(`Batch ${i + 1} returned non-array result. Skipping.`);\n            }\n            console.log(`Batch ${i + 1} complete, got ${Array.isArray(batchResult) ? batchResult.length : 0} results`);\n        } catch (error) {\n            console.error(`Error processing batch ${i + 1}:`, error);\n        // Continue with next batch\n        }\n    }\n    return allResults;\n}\n// In your openSkyTrackingService.js\nlet preventBoundsFit = false;\nconst setRefreshInProgress = (inProgress)=>{\n    preventBoundsFit = inProgress;\n    // Expose this to window for immediate access\n    if (false) {}\n    console.log('Setting preventBoundsFit to', inProgress);\n};\n// Call this at start/end of your refresh operations\n/**\r\n * Service for interacting with OpenSky tracking data\r\n */ class OpenSkyTrackingService {\n    updateTrackedIcao24sSet() {\n        // Clear the current set\n        this.trackedIcao24s.clear();\n        // Add all valid ICAO24 codes from tracked aircraft\n        this.trackedAircraft.forEach((aircraft)=>{\n            if (aircraft.ICAO24) {\n                this.trackedIcao24s.add(aircraft.ICAO24);\n            }\n        });\n        console.log(`[OpenSky] Updated tracked ICAO24s set: ${this.trackedIcao24s.size} aircraft`);\n    }\n    constructor(){\n        this.pendingRefresh = false;\n        this.refreshInterval = null;\n        this.currentManufacturer = null;\n        this.subscribers = new Set();\n        this.loading = false // Add this property\n        ;\n        // Tracking state\n        this.trackingActive = false;\n        this.trackedAircraft = [];\n        this.lastRefreshTime = 0;\n        this.modelStats = new Map();\n        this.trackedIcao24s = new Set();\n        this.lastFullRefreshTime = 0;\n        this.fullRefreshInterval = 3600000;\n        this.activeIcao24s = new Set();\n        this.currentRegion = null;\n        this.persistentAircraftCache = new Map();\n        /**\r\n   * Update this method to call updateTrackedAircraftState\r\n   */ this.isRefreshingPositions = false;\n    }\n    /**\r\n   * Block or unblock all API calls\r\n   */ setBlockAllApiCalls(block) {\n        console.log(`[OpenSky] ${block ? 'Blocking' : 'Unblocking'} all API calls`);\n        blockAllApiCalls = block;\n        return blockAllApiCalls;\n    }\n    /**\r\n   * Get current block status\r\n   */ isApiCallsBlocked() {\n        return blockAllApiCalls;\n    }\n    /**\r\n   * Get singleton instance\r\n   */ static getInstance() {\n        if (!OpenSkyTrackingService.instance) {\n            OpenSkyTrackingService.instance = new OpenSkyTrackingService();\n        }\n        return OpenSkyTrackingService.instance;\n    }\n    isLoading() {\n        return this.loading;\n    }\n    /**\r\n   * Subscribe to tracking updates\r\n   */ subscribe(callback) {\n        this.subscribers.add(callback);\n        // Immediately call with current data if available\n        if (this.trackedAircraft.length > 0) {\n            callback({\n                aircraft: this.trackedAircraft,\n                manufacturer: this.currentManufacturer,\n                timestamp: this.lastRefreshTime\n            });\n        }\n        // Return unsubscribe function\n        return ()=>{\n            this.subscribers.delete(callback);\n        };\n    }\n    subscribeToAircraft(callback) {\n        this.subscribers.add(callback);\n        // Immediately call with current data if available\n        if (this.trackedAircraft.length > 0) {\n            callback(this.trackedAircraft);\n        }\n        // Return unsubscribe function\n        return ()=>{\n            this.subscribers.delete(callback);\n        };\n    }\n    subscribeToStatus(callback) {\n        const statusCallback = ()=>callback(this.trackingActive ? 'Tracking Active' : 'Not Tracking');\n        this.subscribers.add(statusCallback);\n        // Immediately notify with current status\n        statusCallback();\n        // Return unsubscribe function\n        return ()=>{\n            this.subscribers.delete(statusCallback);\n        };\n    }\n    /**\r\n   * Manually refresh tracking data\r\n   */ async refreshNow() {\n        if (!this.trackingActive || !this.currentManufacturer) {\n            console.warn('[OpenSky] No active tracking session. Start tracking first.');\n            return;\n        }\n        openSkyTrackingService.disableAutoRefresh();\n        await openSkyTrackingService.refreshNow(); // manual\n        console.log('[OpenSky] Manually refreshing aircraft data...');\n        this.pendingRefresh = true;\n        try {\n            await this.fetchAndUpdateAircraft(this.currentManufacturer);\n        } catch (error) {\n            console.error('[OpenSky] Error refreshing aircraft data:', error);\n        } finally{\n            this.pendingRefresh = false;\n        }\n    }\n    getTrackedIcao24s() {\n        return Array.from(this.trackedIcao24s);\n    }\n    isAircraftTracked(ICAO24) {\n        return this.trackedIcao24s.has(ICAO24);\n    }\n    /**\r\n   * Refresh specific aircraft by ICAO24 codes\r\n   */ // In OpenSkyTrackingService.ts\n    async refreshSpecificAircraft(ICAO24s) {\n        if (this.isRefreshingPositions) {\n            return this.trackedAircraft;\n        }\n        this.isRefreshingPositions = true;\n        try {\n            if (!this.currentManufacturer || ICAO24s.length === 0) {\n                return this.trackedAircraft;\n            }\n            // Simple implementation - just get data for specific aircraft\n            const updatedAircraft = await this.getLiveAircraftData(this.currentManufacturer, ICAO24s, false);\n            // Update tracked aircraft\n            this.trackedAircraft = updatedAircraft;\n            // Notify subscribers\n            this.notifySubscribers();\n            return this.trackedAircraft;\n        } catch (error) {\n            return this.trackedAircraft;\n        } finally{\n            this.isRefreshingPositions = false;\n        }\n    }\n    /**\r\n   * Start tracking a manufacturer's aircraft\r\n   */ async trackManufacturer(manufacturer) {\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping tracking for ${manufacturer}`);\n            return []; // Return empty array instead of undefined\n        }\n        if (this.trackingActive && this.currentManufacturer === manufacturer) {\n            console.log(`[OpenSky] Already tracking ${manufacturer}`);\n            return this.trackedAircraft;\n        }\n        // Stop any existing tracking\n        this.stopTracking();\n        if (!manufacturer) {\n            return [];\n        }\n        console.log(`[OpenSky] Starting tracking for ${manufacturer}`);\n        this.currentManufacturer = manufacturer;\n        this.trackingActive = true;\n        // Clear active set\n        this.activeIcao24s.clear();\n        // Initial fetch\n        await this.fetchAndUpdateAircraft(manufacturer);\n        // Initialize our active aircraft set\n        this.updateActiveAircraftSet(this.trackedAircraft);\n        // Set the initial full refresh time\n        this.lastFullRefreshTime = Date.now();\n        console.log(`[OpenSky] Tracking started for ${manufacturer}, ${this.trackedAircraft.length} aircraft`);\n        return this.trackedAircraft;\n    }\n    /**\r\n   * Track aircraft by region\r\n   */ async trackRegion(region) {\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping region tracking`);\n            return [];\n        }\n        console.log(`[OpenSky] Tracking aircraft in region ${region}`);\n        try {\n            // Get aircraft in this region from API\n            const response = await fetch(`/api/tracking/region?region=${encodeURIComponent(region)}`);\n            if (!response.ok) {\n                throw new Error(`Region API error: ${response.statusText}`);\n            }\n            const data = await response.json();\n            const aircraftData = data.aircraft || [];\n            // Transform to match Aircraft interface\n            const transformedAircraft = aircraftData.map((a)=>({\n                    ICAO24: a.ICAO24 || '',\n                    REGISTRATION: a.REGISTRATION || '',\n                    N_NUMBER: a.N_NUMBER,\n                    MANUFACTURER: a.MANUFACTURER || '',\n                    MODEL: a.MODEL || '',\n                    OPERATOR: a.OPERATOR,\n                    latitude: a.latitude || 0,\n                    longitude: a.longitude || 0,\n                    altitude: a.altitude || 0,\n                    heading: a.heading || 0,\n                    velocity: a.velocity || 0,\n                    on_ground: a.on_ground || false,\n                    last_contact: a.last_contact || 0,\n                    NAME: a.NAME || '',\n                    CITY: a.CITY || '',\n                    STATE: a.STATE || '',\n                    TYPE_REGISTRANT: a.TYPE_REGISTRANT || 0,\n                    ownerType: a.ownerType,\n                    TYPE_AIRCRAFT: a.TYPE_AIRCRAFT || '',\n                    COUNTRY: a.COUNTRY,\n                    isTracked: true,\n                    REGION: a.REGION\n                }));\n            console.log(`[OpenSky] Found ${transformedAircraft.length} aircraft in region ${region}`);\n            return transformedAircraft;\n        } catch (error) {\n            console.error(`[OpenSky] Error tracking region:`, error);\n            return [];\n        }\n    }\n    /**\r\n   * Helper method to get aircraft by region from your database\r\n   */ async getAircraftByRegion(region) {\n        try {\n            const response = await fetch(`/api/tracking/region/${encodeURIComponent(region)}`);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch aircraft by region: ${response.statusText}`);\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(`[OpenSky] Error fetching aircraft for region ${region}:`, error);\n            return [];\n        }\n    }\n    /**\r\n   * Merge static aircraft data with position data\r\n   */ mergePositionData(staticAircraft, positionData) {\n        return staticAircraft.map((aircraft)=>{\n            const position = positionData.find((pos)=>pos.ICAO24 === aircraft.ICAO24);\n            if (position) {\n                return {\n                    ...aircraft,\n                    latitude: position.latitude,\n                    longitude: position.longitude,\n                    altitude: position.altitude,\n                    heading: position.heading,\n                    velocity: position.velocity,\n                    on_ground: position.on_ground,\n                    last_contact: position.last_contact\n                };\n            }\n            return aircraft;\n        }).filter((aircraft)=>// Only keep aircraft that have valid position data\n            typeof aircraft.latitude === 'number' && typeof aircraft.longitude === 'number');\n    }\n    /**\r\n   * Refresh positions for aircraft in the current region\r\n   */ async refreshRegionPositions() {\n        if (!this.trackingActive || !this.currentRegion) {\n            console.log('[OpenSky] No active region tracking to refresh');\n            return [];\n        }\n        if (this.isRefreshingPositions) {\n            console.log('[OpenSky] Already refreshing positions, skipping');\n            return this.trackedAircraft;\n        }\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping position refresh`);\n            return this.trackedAircraft;\n        }\n        this.isRefreshingPositions = false;\n        setRefreshInProgress(false);\n        this.loading = true;\n        try {\n            const icaoIds = Array.from(this.activeIcao24s);\n            if (icaoIds.length === 0) {\n                console.log('[OpenSky] No active aircraft to refresh positions for');\n                return [];\n            }\n            console.log(`[OpenSky] Refreshing positions for ${icaoIds.length} aircraft in region ${this.currentRegion}`);\n            // Get only position updates for the active aircraft\n            const updatedPositions = await this.getLiveAircraftData('', icaoIds, false, true // Only active aircraft\n            );\n            // Update tracked aircraft with new positions\n            if (updatedPositions.length > 0) {\n                // Update the set of active aircraft\n                this.activeIcao24s.clear();\n                updatedPositions.forEach((aircraft)=>{\n                    if (aircraft.ICAO24) {\n                        this.activeIcao24s.add(aircraft.ICAO24.toLowerCase());\n                    }\n                });\n                // Merge with static data\n                const regionalAircraft = await this.getAircraftByRegion(this.currentRegion);\n                const mergedAircraft = this.mergePositionData(regionalAircraft, updatedPositions);\n                this.trackedAircraft = mergedAircraft;\n                this.lastRefreshTime = Date.now();\n                this.notifySubscribers();\n            }\n            return this.trackedAircraft;\n        } catch (error) {\n            console.error('[OpenSky] Error refreshing region positions:', error);\n            return this.trackedAircraft;\n        } finally{\n            this.loading = false;\n            this.isRefreshingPositions = false;\n            setTimeout(()=>{\n                setRefreshInProgress(false);\n            }, 500);\n        }\n    }\n    getRefreshStats() {\n        const nextFullRefreshDue = this.lastFullRefreshTime + this.fullRefreshInterval;\n        const minutesUntilNextFull = Math.max(0, Math.floor((nextFullRefreshDue - Date.now()) / 60000));\n        return {\n            lastRefreshTime: this.lastRefreshTime,\n            lastFullRefreshTime: this.lastFullRefreshTime,\n            nextFullRefreshDue: nextFullRefreshDue,\n            fullRefreshInterval: this.fullRefreshInterval,\n            trackedAircraftCount: this.trackedAircraft.length\n        };\n    }\n    /**\r\n   * Get active MODEL counts for currently tracked aircraft\r\n   */ getActiveModelCounts() {\n        // Count active aircraft by MODEL\n        const modelCounts = new Map();\n        this.trackedAircraft.forEach((aircraft)=>{\n            const MODEL = aircraft.MODEL || aircraft.TYPE_AIRCRAFT || 'Unknown';\n            const currentCount = modelCounts.get(MODEL) || 0;\n            modelCounts.set(MODEL, currentCount + 1);\n        });\n        // Convert to array of AircraftModel objects\n        return Array.from(modelCounts.entries()).map(([MODEL, count])=>({\n                MODEL,\n                label: MODEL,\n                count: count,\n                activeCount: count,\n                totalCount: count,\n                // Ensure MANUFACTURER is always a string\n                MANUFACTURER: this.currentManufacturer || 'Unknown'\n            }));\n    }\n    /**\r\n   * Get MODEL statistics\r\n   */ getModelStats() {\n        const models = this.getActiveModelCounts();\n        const totalActive = this.trackedAircraft.length;\n        return {\n            models,\n            totalActive\n        };\n    }\n    /**\r\n   * Stop tracking aircraft\r\n   */ // Clear cache when stopping tracking\n    stopTracking() {\n        console.log('[OpenSky] Stopping tracking');\n        this.trackingActive = false;\n        this.currentManufacturer = null;\n        if (this.refreshInterval) {\n            clearInterval(this.refreshInterval);\n            this.refreshInterval = null;\n        }\n        this.trackedAircraft = [];\n        this.activeIcao24s.clear(); // Clear active set\n        this.persistentAircraftCache.clear(); // Clear the persistent cache\n        this.notifySubscribers();\n    }\n    /**\r\n   * Fetch aircraft data\r\n   */ async fetchAndUpdateAircraft(MANUFACTURER) {\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping fetch for ${MANUFACTURER}`);\n            return; // Just return without a value for void return type\n        }\n        try {\n            console.log(`[OpenSky] Fetching aircraft for ${MANUFACTURER}`);\n            // First get ICAO24 codes for this MANUFACTURER\n            const ICAO24s = await this.getIcao24sForManufacturer(MANUFACTURER);\n            if (ICAO24s.length === 0) {\n                console.log(`[OpenSky] No ICAO24 codes found for ${MANUFACTURER}`);\n                this.trackedAircraft = [];\n                this.trackedIcao24s.clear(); // Clear tracking set\n                this.notifySubscribers();\n                return;\n            }\n            // Then get live tracking data for these ICAO24 codes\n            const liveAircraft = await this.getLiveAircraftData(MANUFACTURER, ICAO24s);\n            // Update tracked aircraft and notify subscribers\n            this.trackedAircraft = liveAircraft;\n            this.updateTrackedIcao24sSet(); // Update our tracking set\n            this.lastRefreshTime = Date.now();\n            this.notifySubscribers();\n            console.log(`[OpenSky] Updated tracking data for ${MANUFACTURER}: ${liveAircraft.length} aircraft`);\n        } catch (error) {\n            console.error(`[OpenSky] Error fetching aircraft for ${MANUFACTURER}:`, error);\n        }\n    }\n    /**\r\n   * Helper method to get current state of tracking\r\n   */ getTrackingStatus() {\n        return {\n            active: this.trackingActive,\n            MANUFACTURER: this.currentManufacturer,\n            count: this.trackedAircraft.length,\n            lastRefresh: this.lastRefreshTime\n        };\n    }\n    /**\r\n   * Get ICAO24 codes for a manufacturer with optional region filtering\r\n   */ async getIcao24sForManufacturer(manufacturer, region) {\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping ICAO24 fetch for ${manufacturer}${region ? ` in region ${region}` : ''}`);\n            return []; // Return empty array instead of undefined\n        }\n        const requestKey = region ? `ICAO24s-${manufacturer}-${region}` : `ICAO24s-${manufacturer}`;\n        if (activeRequests.has(requestKey)) {\n            console.log(`[OpenSky] Using existing ICAO24s request for ${manufacturer}${region ? ` in region ${region}` : ''}`);\n            return activeRequests.get(requestKey);\n        }\n        const request = new Promise(async (resolve, reject)=>{\n            try {\n                console.log(`[OpenSky] Fetching ICAO24s for ${manufacturer}${region ? ` in region ${region}` : ''}`);\n                const requestBody = {\n                    manufacturer\n                };\n                // Add region to request body if provided\n                if (region !== undefined) {\n                    requestBody.region = region;\n                }\n                const response = await fetch('/api/tracking/icao24s', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(requestBody)\n                });\n                if (!response.ok) {\n                    throw new Error(`Failed to fetch ICAO24s: ${response.statusText}`);\n                }\n                const data = await response.json();\n                resolve(data.ICAO24s || []);\n            } catch (error) {\n                console.error(`[OpenSky] Error fetching ICAO24s for ${manufacturer}${region ? ` in region ${region}` : ''}:`, error);\n                reject(error);\n            }\n        });\n        activeRequests.set(requestKey, request);\n        return request;\n    }\n    getExtendedAircraft(modelFilter) {\n        let filtered = this.trackedAircraft;\n        // Apply MODEL filter if provided\n        if (modelFilter) {\n            filtered = filtered.filter((aircraft)=>aircraft.MODEL === modelFilter || aircraft.TYPE_AIRCRAFT === modelFilter);\n        }\n        // Transform to extended aircraft\n        return filtered.map((aircraft)=>({\n                ...aircraft,\n                type: aircraft.TYPE_AIRCRAFT || 'Unknown',\n                isGovernment: aircraft.OPERATOR?.toLowerCase().includes('government') ?? false\n            }));\n    }\n    async getLiveAircraftData(manufacturer, ICAO24s, includeStatic = true, activeOnly = false) {\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping operation`);\n            return []; // Or appropriate return value\n        }\n        // Keep your existing method code but modify the part where you process results\n        const cacheKey = `live-${manufacturer}-${includeStatic ? 'full' : 'pos'}-${ICAO24s.length}`;\n        // ... existing code ...\n        // Modify your existing fetchData function or add this processing after you get the results\n        const fetchDataWithCaching = async ()=>{\n            try {\n                // Use your existing code to fetch data\n                const BATCH_SIZE = 100;\n                console.log(`[OpenSky] Fetching live aircraft data in batches...`);\n                // Process batches without using Promise.race\n                const aircraftResults = await processBatchedRequests(ICAO24s, async (batch)=>{\n                    try {\n                        const response = await fetch('/api/tracking/live', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify({\n                                manufacturer,\n                                ICAO24s: batch,\n                                includeStatic,\n                                activeOnly\n                            })\n                        });\n                        if (!response.ok) {\n                            throw new Error(`Failed to fetch live data: ${response.status} ${response.statusText}`);\n                        }\n                        const data = await response.json();\n                        if (!data || !Array.isArray(data.aircraft)) {\n                            console.warn('[OpenSky] Unexpected response format:', data);\n                            return [];\n                        }\n                        return data.aircraft || [];\n                    } catch (fetchError) {\n                        console.error('[OpenSky] Batch fetch error:', fetchError);\n                        return []; // Return empty array for this batch\n                    }\n                }, BATCH_SIZE);\n                // Process the returned aircraft and merge with cached data\n                const processedAircraft = aircraftResults.map((aircraft)=>{\n                    if (!aircraft.ICAO24) return aircraft;\n                    const icao = aircraft.ICAO24.toLowerCase();\n                    const cachedAircraft = this.persistentAircraftCache.get(icao);\n                    if (cachedAircraft) {\n                        // Merge new data with cached data, prioritizing new position data\n                        const mergedAircraft = {\n                            ...cachedAircraft,\n                            ...aircraft,\n                            // Ensure any special fields from cache are preserved\n                            // TypeScript will now recognize these properties from our ExtendedAircraft interface\n                            markerData: cachedAircraft.markerData,\n                            popupData: cachedAircraft.popupData,\n                            tooltipData: cachedAircraft.tooltipData\n                        };\n                        // Update cache\n                        this.persistentAircraftCache.set(icao, mergedAircraft);\n                        return mergedAircraft;\n                    }\n                    // No cached data, store this aircraft in the cache\n                    const extendedAircraft = aircraft;\n                    this.persistentAircraftCache.set(icao, extendedAircraft);\n                    return extendedAircraft;\n                });\n                // Cache the result\n                const ttl = includeStatic ? 20000 : 10000; // 20s for full data, 10s for positions only\n                trackingCache.set(cacheKey, {\n                    data: processedAircraft,\n                    timestamp: Date.now(),\n                    ttl\n                });\n                return processedAircraft;\n            } catch (error) {\n                console.error(`[OpenSky] Error fetching live aircraft data:`, error);\n                // On error, return cached data if available\n                if (this.persistentAircraftCache.size > 0) {\n                    console.log(`[OpenSky] Returning ${this.persistentAircraftCache.size} cached aircraft on error`);\n                    return Array.from(this.persistentAircraftCache.values());\n                }\n                return []; // Return empty array on error with no cache\n            }\n        };\n        // Replace your existing fetchData function with fetchDataWithCaching\n        // or call it after your existing fetchData function\n        // Use an approach similar to your existing code\n        let timeoutId;\n        const requestPromise = new Promise((resolve)=>{\n            const timeoutDuration = includeStatic ? 60000 : 30000;\n            timeoutId = setTimeout(()=>{\n                console.warn(`[OpenSky] Request timed out after ${timeoutDuration / 1000} seconds`);\n                resolve([]);\n            }, timeoutDuration);\n            fetchDataWithCaching().then((result)=>{\n                clearTimeout(timeoutId);\n                resolve(result);\n            });\n        });\n        activeRequests.set(cacheKey, requestPromise);\n        try {\n            return await requestPromise;\n        } finally{\n            activeRequests.delete(cacheKey);\n        }\n    }\n    /**\r\n   * Notify all subscribers of changes\r\n   */ notifySubscribers() {\n        // Prepare the trail data only if trails are enabled\n        const data = {\n            aircraft: this.trackedAircraft,\n            manufacturer: this.currentManufacturer,\n            count: this.trackedAircraft.length,\n            timestamp: this.lastRefreshTime\n        };\n        this.subscribers.forEach((callback)=>callback(data));\n    }\n    disableAutoRefresh() {\n        if (this.refreshInterval) {\n            console.log('[OpenSky] Disabling auto refresh');\n            clearInterval(this.refreshInterval);\n            this.refreshInterval = null;\n        }\n    }\n    /**\r\n   * Manually refresh only position data for currently tracked aircraft\r\n   * without re-fetching ICAO24 codes from the database\r\n   */ /**\r\n   * Force a refresh of tracking data\r\n   */ async refreshTracking() {\n        if (!this.trackingActive || !this.currentManufacturer) {\n            return;\n        }\n        await this.fetchAndUpdateAircraft(this.currentManufacturer);\n    }\n    /**\r\n   * Get currently tracked aircraft\r\n   */ getTrackedAircraft() {\n        return this.trackedAircraft;\n    }\n    /**\r\n   * Aggregate aircraft into model statistics\r\n   */ aggregateAircraftModels(aircraft) {\n        const modelMap = new Map();\n        aircraft.forEach((a)=>{\n            if (!a.MODEL) return; // Skip aircraft without MODEL info\n            const key = `${a.MANUFACTURER || 'Unknown'}-${a.MODEL}`;\n            const existing = modelMap.get(key);\n            if (existing) {\n                existing.count++;\n                existing.activeCount++;\n                existing.totalCount++;\n                if (existing.ICAO24s && a.ICAO24) {\n                    existing.ICAO24s.push(a.ICAO24);\n                }\n            } else {\n                modelMap.set(key, {\n                    MODEL: a.MODEL,\n                    MANUFACTURER: a.MANUFACTURER || this.currentManufacturer || 'Unknown',\n                    label: a.MODEL,\n                    count: 1,\n                    activeCount: 1,\n                    totalCount: 1,\n                    ICAO24s: a.ICAO24 ? [\n                        a.ICAO24\n                    ] : []\n                });\n            }\n        });\n        return Array.from(modelMap.values());\n    }\n    /**\r\n   * Check if tracking is active\r\n   */ isTrackingActive() {\n        return this.trackingActive;\n    }\n    /**\r\n   * Get currently tracked MANUFACTURER\r\n   */ getCurrentManufacturer() {\n        return this.currentManufacturer;\n    }\n    /**\r\n   * This should be called after any tracking update to ensure MODEL counts are current\r\n   */ updateTrackedAircraftState() {\n        // Update last refresh time\n        this.lastRefreshTime = Date.now();\n        // Notify subscribers about the updated aircraft\n        this.notifySubscribers();\n        console.log(`[OpenSky] Updated tracking data: ${this.trackedAircraft.length} aircraft, ` + `${this.getActiveModelCounts().length} unique models`);\n    }\n    /**\r\n   * Enhanced refreshPositionsOnly method with periodic full refresh\r\n   */ async refreshPositionsOnly() {\n        if (this.isRefreshingPositions) {\n            console.log('[OpenSky] Already refreshing positions, skipping');\n            return this.trackedAircraft;\n        }\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping position refresh`);\n            return this.trackedAircraft; // Return current aircraft instead of undefined\n        }\n        // If we're not tracking anything, there's nothing to refresh\n        if (!this.trackingActive || !this.currentManufacturer) {\n            console.log('[OpenSky] No active tracking or manufacturer to refresh');\n            return this.trackedAircraft;\n        }\n        this.isRefreshingPositions = true;\n        setRefreshInProgress(false);\n        this.loading = true;\n        const refreshStartTime = Date.now();\n        try {\n            // Check if we should do a full refresh or just active aircraft\n            const shouldDoFullRefresh = this.activeIcao24s.size === 0 || Date.now() - this.lastFullRefreshTime > 3600000; // 1 hour\n            // Store manufacturer as a non-null variable to satisfy TypeScript\n            const manufacturer = this.currentManufacturer;\n            if (shouldDoFullRefresh) {\n                console.log('[OpenSky] Performing full refresh to discover active aircraft');\n                // First, get all ICAO24 codes for the manufacturer\n                const allIcao24s = await this.getIcao24sForManufacturer(manufacturer);\n                // Then get live data, but only for aircraft with position data\n                const updatedAircraft = await this.getLiveAircraftData(manufacturer, allIcao24s, true, true // activeOnly\n                );\n                // Update the set of active aircraft\n                this.activeIcao24s.clear();\n                updatedAircraft.forEach((aircraft)=>{\n                    if (aircraft.ICAO24) {\n                        this.activeIcao24s.add(aircraft.ICAO24.toLowerCase());\n                    }\n                });\n                this.lastFullRefreshTime = Date.now();\n                // Update tracked aircraft\n                this.trackedAircraft = updatedAircraft;\n                this.updateTrackedAircraftState();\n                console.log(`[OpenSky] Full refresh complete, tracking ${updatedAircraft.length} active aircraft`);\n                return updatedAircraft;\n            } else {\n                // Optimized refresh - only get updates for active aircraft\n                console.log(`[OpenSky] Performing optimized refresh for ${this.activeIcao24s.size} active aircraft`);\n                const activeIcaos = Array.from(this.activeIcao24s);\n                // Only request data for active aircraft\n                const updatedAircraft = await this.getLiveAircraftData(manufacturer, activeIcaos, false, true // activeOnly - ensure we only get aircraft with position data\n                );\n                // Update the set of active aircraft to remove any that are no longer active\n                this.activeIcao24s.clear();\n                updatedAircraft.forEach((aircraft)=>{\n                    if (aircraft.ICAO24) {\n                        this.activeIcao24s.add(aircraft.ICAO24.toLowerCase());\n                    }\n                });\n                // Update tracked aircraft\n                this.trackedAircraft = updatedAircraft;\n                this.updateTrackedAircraftState();\n                console.log(`[OpenSky] Optimized refresh complete, tracking ${updatedAircraft.length} active aircraft`);\n                return updatedAircraft;\n            }\n        } catch (error) {\n            console.error('[OpenSky] Error refreshing positions:', error);\n            return this.trackedAircraft;\n        } finally{\n            this.loading = false;\n            this.isRefreshingPositions = false;\n            // Calculate reset delay\n            const elapsedTime = Date.now() - refreshStartTime;\n            const resetDelay = Math.max(0, 500 - elapsedTime);\n            setTimeout(()=>{\n                setRefreshInProgress(false);\n            }, resetDelay + 500);\n        }\n    }\n    /**\r\n   * Track a manufacturer's aircraft with progress updates\r\n   * @param manufacturer The manufacturer to track\r\n   * @param progressCallback A callback that will be called with progress updates\r\n   */ async trackManufacturerWithProgress(manufacturer, progressCallback) {\n        // Check block flag first\n        if (blockAllApiCalls) {\n            console.log(`[OpenSky] API calls blocked - skipping tracking for ${manufacturer}`);\n            progressCallback({\n                message: 'API calls are currently blocked',\n                aircraft: [],\n                models: [],\n                total: 0,\n                complete: true\n            });\n            return [];\n        }\n        // Stop any existing tracking\n        this.stopTracking();\n        if (!manufacturer) {\n            progressCallback({\n                message: 'No manufacturer specified',\n                aircraft: [],\n                models: [],\n                total: 0,\n                complete: true\n            });\n            return [];\n        }\n        console.log(`[OpenSky] Starting progressive tracking for ${manufacturer}`);\n        this.currentManufacturer = manufacturer;\n        this.trackingActive = true;\n        this.loading = true;\n        try {\n            // Clear active set and tracked aircraft\n            this.activeIcao24s.clear();\n            this.trackedAircraft = [];\n            // First get ICAO24 codes for this manufacturer\n            progressCallback({\n                message: `Fetching aircraft identifiers for ${manufacturer}...`,\n                complete: false\n            });\n            const ICAO24s = await this.getIcao24sForManufacturer(manufacturer);\n            if (ICAO24s.length === 0) {\n                console.log(`[OpenSky] No ICAO24 codes found for ${manufacturer}`);\n                progressCallback({\n                    message: `No aircraft found for ${manufacturer}`,\n                    aircraft: [],\n                    models: [],\n                    total: 0,\n                    complete: true\n                });\n                this.trackedAircraft = [];\n                this.trackedIcao24s.clear();\n                this.loading = false;\n                return [];\n            }\n            progressCallback({\n                message: `Found ${ICAO24s.length} aircraft. Loading position data...`,\n                complete: false\n            });\n            // Process in smaller batches to avoid rate limits\n            const BATCH_SIZE = 50; // Smaller than the 100 OpenSky limit\n            const batches = [];\n            for(let i = 0; i < ICAO24s.length; i += BATCH_SIZE){\n                batches.push(ICAO24s.slice(i, i + BATCH_SIZE));\n            }\n            let loadedAircraft = [];\n            // Process each batch with delay between batches\n            for(let i = 0; i < batches.length; i++){\n                const batch = batches[i];\n                const batchPercent = Math.round(i / batches.length * 100);\n                progressCallback({\n                    message: `Loading batch ${i + 1}/${batches.length} (${batchPercent}%)...`,\n                    complete: false\n                });\n                try {\n                    // Get data for this batch\n                    const batchAircraft = await this.getLiveAircraftData(manufacturer, batch, true, false // Don't limit to active only for discovery\n                    );\n                    if (batchAircraft.length > 0) {\n                        // Add to our running total\n                        loadedAircraft = [\n                            ...loadedAircraft,\n                            ...batchAircraft\n                        ];\n                        // Update active tracked set\n                        this.updateActiveAircraftSet(batchAircraft);\n                        // Update our tracked aircraft with what we have so far\n                        this.trackedAircraft = loadedAircraft;\n                        // Create model stats using the aggregation function\n                        const models = this.aggregateAircraftModels(loadedAircraft);\n                        const totalActive = loadedAircraft.length;\n                        // Report progress with what we have so far\n                        progressCallback({\n                            message: `Loaded ${loadedAircraft.length} of ${ICAO24s.length} aircraft...`,\n                            aircraft: loadedAircraft,\n                            models: models,\n                            total: totalActive,\n                            complete: false\n                        });\n                    }\n                    // Wait between batches to avoid rate limits, but only if not the last batch\n                    if (i < batches.length - 1) {\n                        await new Promise((resolve)=>setTimeout(resolve, 5000)); // 5 second delay\n                    }\n                } catch (error) {\n                    console.error(`[OpenSky] Error processing batch ${i + 1}:`, error);\n                    // For batch processing, add more aggressive delay between batches\n                    for(let i = 0; i < batches.length; i++){\n                        // Wait longer before trying the next batch\n                        await new Promise((resolve)=>setTimeout(resolve, 60000)); // 1 minute wait\n                    }\n                }\n            }\n            // Final updates\n            this.lastRefreshTime = Date.now();\n            this.lastFullRefreshTime = Date.now();\n            this.updateTrackedIcao24sSet();\n            this.notifySubscribers();\n            // Final callback\n            const models = this.aggregateAircraftModels(loadedAircraft);\n            const totalActive = loadedAircraft.length;\n            progressCallback({\n                message: `Completed loading ${loadedAircraft.length} aircraft for ${manufacturer}`,\n                aircraft: loadedAircraft,\n                models: models,\n                total: totalActive,\n                complete: true\n            });\n            console.log(`[OpenSky] Progressive tracking complete for ${manufacturer}: ${loadedAircraft.length} aircraft`);\n            return loadedAircraft;\n        } catch (error) {\n            console.error(`[OpenSky] Error in progressive tracking for ${manufacturer}:`, error);\n            progressCallback({\n                message: `Error tracking ${manufacturer}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n                complete: true\n            });\n            return this.trackedAircraft;\n        } finally{\n            this.loading = false;\n        }\n    }\n    /**\r\n   * Updates the set of active aircraft based on position data\r\n   */ updateActiveAircraftSet(aircraft) {\n        aircraft.forEach((plane)=>{\n            if (plane.ICAO24 && plane.latitude && plane.longitude) {\n                this.activeIcao24s.add(plane.ICAO24.toLowerCase());\n            }\n        });\n        console.log(`[OpenSky] Active aircraft set has ${this.activeIcao24s.size} aircraft`);\n    }\n    /**\r\n   * Sets the interval between full refreshes\r\n   */ setFullRefreshInterval(minutes) {\n        const minMinutes = 10;\n        const validMinutes = Math.max(minMinutes, minutes);\n        this.fullRefreshInterval = validMinutes * 60 * 1000;\n        console.log(`[OpenSky] Full refresh interval set to ${validMinutes} minutes`);\n    }\n}\n// Export singleton instance\nconst openSkyTrackingService = OpenSkyTrackingService.getInstance();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (openSkyTrackingService);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/services/openSkyTrackingService.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%5Cindex.tsx&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%5Cindex.tsx&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps),\n/* harmony export */   getStaticPaths: () => (/* binding */ getStaticPaths),\n/* harmony export */   getStaticProps: () => (/* binding */ getStaticProps),\n/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   unstable_getServerProps: () => (/* binding */ unstable_getServerProps),\n/* harmony export */   unstable_getServerSideProps: () => (/* binding */ unstable_getServerSideProps),\n/* harmony export */   unstable_getStaticParams: () => (/* binding */ unstable_getStaticParams),\n/* harmony export */   unstable_getStaticPaths: () => (/* binding */ unstable_getStaticPaths),\n/* harmony export */   unstable_getStaticProps: () => (/* binding */ unstable_getStaticProps)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages/module.compiled */ \"(pages-dir-node)/./node_modules/next/dist/server/route-modules/pages/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(pages-dir-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(pages-dir-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! private-next-pages/_document */ \"(pages-dir-node)/./node_modules/next/dist/pages/_document.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! private-next-pages/_app */ \"(pages-dir-node)/./pages/_app.tsx\");\n/* harmony import */ var _pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages\\index.tsx */ \"(pages-dir-node)/./pages/index.tsx\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__]);\nprivate_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the app and document modules.\n\n\n// Import the userland code.\n\n// Re-export the component (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'default'));\n// Re-export methods.\nconst getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'getStaticProps');\nconst getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'getStaticPaths');\nconst getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'getServerSideProps');\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'config');\nconst reportWebVitals = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'reportWebVitals');\n// Re-export legacy methods.\nconst unstable_getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'unstable_getStaticProps');\nconst unstable_getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'unstable_getStaticPaths');\nconst unstable_getStaticParams = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'unstable_getStaticParams');\nconst unstable_getServerProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'unstable_getServerProps');\nconst unstable_getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__, 'unstable_getServerSideProps');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n        page: \"/index\",\n        pathname: \"/\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    components: {\n        // default export might not exist when optimized for data only\n        App: private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        Document: (private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default())\n    },\n    userland: _pages_index_tsx__WEBPACK_IMPORTED_MODULE_5__\n});\n\n//# sourceMappingURL=pages.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVMmcGFnZT0lMkYmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2luZGV4LnRzeCZhYnNvbHV0ZUFwcFBhdGg9cHJpdmF0ZS1uZXh0LXBhZ2VzJTJGX2FwcCZhYnNvbHV0ZURvY3VtZW50UGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfZG9jdW1lbnQmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdGO0FBQ2hDO0FBQ0U7QUFDMUQ7QUFDeUQ7QUFDVjtBQUMvQztBQUMrQztBQUMvQztBQUNBLGlFQUFlLHdFQUFLLENBQUMsNkNBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sdUJBQXVCLHdFQUFLLENBQUMsNkNBQVE7QUFDckMsdUJBQXVCLHdFQUFLLENBQUMsNkNBQVE7QUFDckMsMkJBQTJCLHdFQUFLLENBQUMsNkNBQVE7QUFDekMsZUFBZSx3RUFBSyxDQUFDLDZDQUFRO0FBQzdCLHdCQUF3Qix3RUFBSyxDQUFDLDZDQUFRO0FBQzdDO0FBQ08sZ0NBQWdDLHdFQUFLLENBQUMsNkNBQVE7QUFDOUMsZ0NBQWdDLHdFQUFLLENBQUMsNkNBQVE7QUFDOUMsaUNBQWlDLHdFQUFLLENBQUMsNkNBQVE7QUFDL0MsZ0NBQWdDLHdFQUFLLENBQUMsNkNBQVE7QUFDOUMsb0NBQW9DLHdFQUFLLENBQUMsNkNBQVE7QUFDekQ7QUFDTyx3QkFBd0Isa0dBQWdCO0FBQy9DO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxhQUFhLDhEQUFXO0FBQ3hCLGtCQUFrQixvRUFBZ0I7QUFDbEMsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELGlDIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvcGFnZXMvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgYXBwIGFuZCBkb2N1bWVudCBtb2R1bGVzLlxuaW1wb3J0ICogYXMgZG9jdW1lbnQgZnJvbSBcInByaXZhdGUtbmV4dC1wYWdlcy9fZG9jdW1lbnRcIjtcbmltcG9ydCAqIGFzIGFwcCBmcm9tIFwicHJpdmF0ZS1uZXh0LXBhZ2VzL19hcHBcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGluZGV4LnRzeFwiO1xuLy8gUmUtZXhwb3J0IHRoZSBjb21wb25lbnQgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgbWV0aG9kcy5cbmV4cG9ydCBjb25zdCBnZXRTdGF0aWNQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCAnZ2V0U3RhdGljUHJvcHMnKTtcbmV4cG9ydCBjb25zdCBnZXRTdGF0aWNQYXRocyA9IGhvaXN0KHVzZXJsYW5kLCAnZ2V0U3RhdGljUGF0aHMnKTtcbmV4cG9ydCBjb25zdCBnZXRTZXJ2ZXJTaWRlUHJvcHMgPSBob2lzdCh1c2VybGFuZCwgJ2dldFNlcnZlclNpZGVQcm9wcycpO1xuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG5leHBvcnQgY29uc3QgcmVwb3J0V2ViVml0YWxzID0gaG9pc3QodXNlcmxhbmQsICdyZXBvcnRXZWJWaXRhbHMnKTtcbi8vIFJlLWV4cG9ydCBsZWdhY3kgbWV0aG9kcy5cbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCAndW5zdGFibGVfZ2V0U3RhdGljUHJvcHMnKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQYXRocyA9IGhvaXN0KHVzZXJsYW5kLCAndW5zdGFibGVfZ2V0U3RhdGljUGF0aHMnKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQYXJhbXMgPSBob2lzdCh1c2VybGFuZCwgJ3Vuc3RhYmxlX2dldFN0YXRpY1BhcmFtcycpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFNlcnZlclByb3BzID0gaG9pc3QodXNlcmxhbmQsICd1bnN0YWJsZV9nZXRTZXJ2ZXJQcm9wcycpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFNlcnZlclNpZGVQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCAndW5zdGFibGVfZ2V0U2VydmVyU2lkZVByb3BzJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc1JvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFUyxcbiAgICAgICAgcGFnZTogXCIvaW5kZXhcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgLy8gZGVmYXVsdCBleHBvcnQgbWlnaHQgbm90IGV4aXN0IHdoZW4gb3B0aW1pemVkIGZvciBkYXRhIG9ubHlcbiAgICAgICAgQXBwOiBhcHAuZGVmYXVsdCxcbiAgICAgICAgRG9jdW1lbnQ6IGRvY3VtZW50LmRlZmF1bHRcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%5Cindex.tsx&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(pages-dir-node)/./pages/_app.tsx":
/*!************************!*\
  !*** ./pages/_app.tsx ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/react-query */ \"@tanstack/react-query\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/styles/globals.css */ \"(pages-dir-node)/./styles/globals.css\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! leaflet/dist/leaflet.css */ \"(pages-dir-node)/./node_modules/leaflet/dist/leaflet.css\");\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _styles_leaflet_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/styles/leaflet.css */ \"(pages-dir-node)/./styles/leaflet.css\");\n/* harmony import */ var _styles_leaflet_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_styles_leaflet_css__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _styles_aircraftMapElements_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/styles/aircraftMapElements.css */ \"(pages-dir-node)/./styles/aircraftMapElements.css\");\n/* harmony import */ var _styles_aircraftMapElements_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_styles_aircraftMapElements_css__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-toastify/dist/ReactToastify.css */ \"(pages-dir-node)/./node_modules/react-toastify/dist/ReactToastify.css\");\n/* harmony import */ var react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-hot-toast */ \"react-hot-toast\");\n/* harmony import */ var _components_tracking_context_EnhancedUIContext__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/tracking/context/EnhancedUIContext */ \"(pages-dir-node)/./components/tracking/context/EnhancedUIContext.tsx\");\n/* harmony import */ var _components_tracking_context_EnhancedMapContext__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/tracking/context/EnhancedMapContext */ \"(pages-dir-node)/./components/tracking/context/EnhancedMapContext.tsx\");\n/* harmony import */ var _components_tracking_context_LocationContex__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/components/tracking/context/LocationContex */ \"(pages-dir-node)/./components/tracking/context/LocationContex.tsx\");\n/* harmony import */ var _components_tracking_persistence_DataPersistenceManager__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/tracking/persistence/DataPersistenceManager */ \"(pages-dir-node)/./components/tracking/persistence/DataPersistenceManager.tsx\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__, react_toastify__WEBPACK_IMPORTED_MODULE_8__, react_hot_toast__WEBPACK_IMPORTED_MODULE_9__]);\n([_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__, react_toastify__WEBPACK_IMPORTED_MODULE_8__, react_hot_toast__WEBPACK_IMPORTED_MODULE_9__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction MyApp({ Component, pageProps }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                ...pageProps\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                lineNumber: 19,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_hot_toast__WEBPACK_IMPORTED_MODULE_9__.Toaster, {\n                position: \"top-right\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                lineNumber: 20,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n// Create a QueryClient instance\nconst queryClient = new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnWindowFocus: false,\n            retry: 1\n        }\n    }\n});\n// Main App Component\nfunction App({ Component, pageProps }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.QueryClientProvider, {\n        client: queryClient,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_tracking_context_EnhancedUIContext__WEBPACK_IMPORTED_MODULE_10__.EnhancedUIProvider, {\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_tracking_context_EnhancedMapContext__WEBPACK_IMPORTED_MODULE_11__.EnhancedMapProvider, {\n                manufacturers: [],\n                onError: (msg)=>react_toastify__WEBPACK_IMPORTED_MODULE_8__.toast.error(msg),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_tracking_context_LocationContex__WEBPACK_IMPORTED_MODULE_12__.LocationProvider, {\n                    children: [\n                        ' ',\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_tracking_persistence_DataPersistenceManager__WEBPACK_IMPORTED_MODULE_13__.DataPersistenceProvider, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_toastify__WEBPACK_IMPORTED_MODULE_8__.ToastContainer, {\n                                    position: \"top-right\",\n                                    autoClose: 5000,\n                                    hideProgressBar: false,\n                                    newestOnTop: true,\n                                    closeOnClick: true,\n                                    rtl: false,\n                                    pauseOnFocusLoss: true,\n                                    draggable: true,\n                                    pauseOnHover: true\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                                    lineNumber: 48,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                                    ...pageProps\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                                    lineNumber: 59,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                            lineNumber: 47,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                    lineNumber: 44,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n                lineNumber: 40,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n            lineNumber: 39,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\_app.tsx\",\n        lineNumber: 38,\n        columnNumber: 5\n    }, this);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3BhZ2VzL19hcHAudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBRTBDO0FBQzNDO0FBQ0k7QUFDSjtBQUNZO0FBQ0s7QUFDUTtBQUNiO0FBQzJDO0FBQ0U7QUFDUDtBQUNvQjtBQUVwRyxTQUFTVSxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFZO0lBQy9DLHFCQUNFOzswQkFDRSw4REFBQ0Q7Z0JBQVcsR0FBR0MsU0FBUzs7Ozs7OzBCQUN4Qiw4REFBQ1Asb0RBQU9BO2dCQUFDUSxVQUFTOzs7Ozs7OztBQUd4QjtBQUVBLGdDQUFnQztBQUNoQyxNQUFNQyxjQUFjLElBQUliLDhEQUFXQSxDQUFDO0lBQ2xDYyxnQkFBZ0I7UUFDZEMsU0FBUztZQUNQQyxzQkFBc0I7WUFDdEJDLE9BQU87UUFDVDtJQUNGO0FBQ0Y7QUFFQSxxQkFBcUI7QUFDTixTQUFTQyxJQUFJLEVBQUVSLFNBQVMsRUFBRUMsU0FBUyxFQUFZO0lBQzVELHFCQUNFLDhEQUFDVixzRUFBbUJBO1FBQUNrQixRQUFRTjtrQkFDM0IsNEVBQUNSLCtGQUFrQkE7c0JBQ2pCLDRFQUFDQyxpR0FBbUJBO2dCQUNsQmMsZUFBZSxFQUFFO2dCQUNqQkMsU0FBUyxDQUFDQyxNQUFRbkIsaURBQUtBLENBQUNvQixLQUFLLENBQUNEOzBCQUU5Qiw0RUFBQ2YsMEZBQWdCQTs7d0JBQ2Q7c0NBRUQsOERBQUNDLDZHQUF1QkE7OzhDQUN0Qiw4REFBQ04sMERBQWNBO29DQUNiVSxVQUFTO29DQUNUWSxXQUFXO29DQUNYQyxpQkFBaUI7b0NBQ2pCQyxhQUFhO29DQUNiQyxZQUFZO29DQUNaQyxLQUFLO29DQUNMQyxnQkFBZ0I7b0NBQ2hCQyxTQUFTO29DQUNUQyxZQUFZOzs7Ozs7OENBRWQsOERBQUNyQjtvQ0FBVyxHQUFHQyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPdEMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2F0aG9cXERvY3VtZW50c1xcUHJvamVjdHNcXGFpcmNyYWZ0LXRyYWNraW5nXFxwYWdlc1xcX2FwcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgdHlwZSB7IEFwcFByb3BzIH0gZnJvbSAnbmV4dC9hcHAnO1xyXG5pbXBvcnQgeyBRdWVyeUNsaWVudCwgUXVlcnlDbGllbnRQcm92aWRlciB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XHJcbmltcG9ydCAnQC9zdHlsZXMvZ2xvYmFscy5jc3MnO1xyXG5pbXBvcnQgJ2xlYWZsZXQvZGlzdC9sZWFmbGV0LmNzcyc7XHJcbmltcG9ydCAnQC9zdHlsZXMvbGVhZmxldC5jc3MnO1xyXG5pbXBvcnQgJ0Avc3R5bGVzL2FpcmNyYWZ0TWFwRWxlbWVudHMuY3NzJztcclxuaW1wb3J0ICdyZWFjdC10b2FzdGlmeS9kaXN0L1JlYWN0VG9hc3RpZnkuY3NzJztcclxuaW1wb3J0IHsgVG9hc3RDb250YWluZXIsIHRvYXN0IH0gZnJvbSAncmVhY3QtdG9hc3RpZnknO1xyXG5pbXBvcnQgeyBUb2FzdGVyIH0gZnJvbSAncmVhY3QtaG90LXRvYXN0JztcclxuaW1wb3J0IHsgRW5oYW5jZWRVSVByb3ZpZGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL3RyYWNraW5nL2NvbnRleHQvRW5oYW5jZWRVSUNvbnRleHQnO1xyXG5pbXBvcnQgeyBFbmhhbmNlZE1hcFByb3ZpZGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL3RyYWNraW5nL2NvbnRleHQvRW5oYW5jZWRNYXBDb250ZXh0JztcclxuaW1wb3J0IHsgTG9jYXRpb25Qcm92aWRlciB9IGZyb20gJ0AvY29tcG9uZW50cy90cmFja2luZy9jb250ZXh0L0xvY2F0aW9uQ29udGV4JztcclxuaW1wb3J0IHsgRGF0YVBlcnNpc3RlbmNlUHJvdmlkZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL3RyYWNraW5nL3BlcnNpc3RlbmNlL0RhdGFQZXJzaXN0ZW5jZU1hbmFnZXInO1xyXG5cclxuZnVuY3Rpb24gTXlBcHAoeyBDb21wb25lbnQsIHBhZ2VQcm9wcyB9OiBBcHBQcm9wcykge1xyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29tcG9uZW50IHsuLi5wYWdlUHJvcHN9IC8+XHJcbiAgICAgIDxUb2FzdGVyIHBvc2l0aW9uPVwidG9wLXJpZ2h0XCIgLz5cclxuICAgIDwvPlxyXG4gICk7XHJcbn1cclxuXHJcbi8vIENyZWF0ZSBhIFF1ZXJ5Q2xpZW50IGluc3RhbmNlXHJcbmNvbnN0IHF1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KHtcclxuICBkZWZhdWx0T3B0aW9uczoge1xyXG4gICAgcXVlcmllczoge1xyXG4gICAgICByZWZldGNoT25XaW5kb3dGb2N1czogZmFsc2UsXHJcbiAgICAgIHJldHJ5OiAxLCAvLyBSZXRyeSBmYWlsZWQgcXVlcmllcyBvbmNlXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuLy8gTWFpbiBBcHAgQ29tcG9uZW50XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7IENvbXBvbmVudCwgcGFnZVByb3BzIH06IEFwcFByb3BzKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxyXG4gICAgICA8RW5oYW5jZWRVSVByb3ZpZGVyPlxyXG4gICAgICAgIDxFbmhhbmNlZE1hcFByb3ZpZGVyXHJcbiAgICAgICAgICBtYW51ZmFjdHVyZXJzPXtbXX0gLy8gUHJvdmlkZSB5b3VyIG1hbnVmYWN0dXJlcnMgb3IgZ2V0IHRoZW0gZHluYW1pY2FsbHlcclxuICAgICAgICAgIG9uRXJyb3I9eyhtc2cpID0+IHRvYXN0LmVycm9yKG1zZyl9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPExvY2F0aW9uUHJvdmlkZXI+XHJcbiAgICAgICAgICAgIHsnICd9XHJcbiAgICAgICAgICAgIHsvKiDinIUgQWRkIExvY2F0aW9uUHJvdmlkZXIgaGVyZSAqL31cclxuICAgICAgICAgICAgPERhdGFQZXJzaXN0ZW5jZVByb3ZpZGVyPlxyXG4gICAgICAgICAgICAgIDxUb2FzdENvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb249XCJ0b3AtcmlnaHRcIlxyXG4gICAgICAgICAgICAgICAgYXV0b0Nsb3NlPXs1MDAwfVxyXG4gICAgICAgICAgICAgICAgaGlkZVByb2dyZXNzQmFyPXtmYWxzZX1cclxuICAgICAgICAgICAgICAgIG5ld2VzdE9uVG9wPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgY2xvc2VPbkNsaWNrXHJcbiAgICAgICAgICAgICAgICBydGw9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgcGF1c2VPbkZvY3VzTG9zc1xyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlXHJcbiAgICAgICAgICAgICAgICBwYXVzZU9uSG92ZXJcclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDxDb21wb25lbnQgey4uLnBhZ2VQcm9wc30gLz5cclxuICAgICAgICAgICAgPC9EYXRhUGVyc2lzdGVuY2VQcm92aWRlcj5cclxuICAgICAgICAgIDwvTG9jYXRpb25Qcm92aWRlcj5cclxuICAgICAgICA8L0VuaGFuY2VkTWFwUHJvdmlkZXI+XHJcbiAgICAgIDwvRW5oYW5jZWRVSVByb3ZpZGVyPlxyXG4gICAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiUXVlcnlDbGllbnQiLCJRdWVyeUNsaWVudFByb3ZpZGVyIiwiVG9hc3RDb250YWluZXIiLCJ0b2FzdCIsIlRvYXN0ZXIiLCJFbmhhbmNlZFVJUHJvdmlkZXIiLCJFbmhhbmNlZE1hcFByb3ZpZGVyIiwiTG9jYXRpb25Qcm92aWRlciIsIkRhdGFQZXJzaXN0ZW5jZVByb3ZpZGVyIiwiTXlBcHAiLCJDb21wb25lbnQiLCJwYWdlUHJvcHMiLCJwb3NpdGlvbiIsInF1ZXJ5Q2xpZW50IiwiZGVmYXVsdE9wdGlvbnMiLCJxdWVyaWVzIiwicmVmZXRjaE9uV2luZG93Rm9jdXMiLCJyZXRyeSIsIkFwcCIsImNsaWVudCIsIm1hbnVmYWN0dXJlcnMiLCJvbkVycm9yIiwibXNnIiwiZXJyb3IiLCJhdXRvQ2xvc2UiLCJoaWRlUHJvZ3Jlc3NCYXIiLCJuZXdlc3RPblRvcCIsImNsb3NlT25DbGljayIsInJ0bCIsInBhdXNlT25Gb2N1c0xvc3MiLCJkcmFnZ2FibGUiLCJwYXVzZU9uSG92ZXIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/_app.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_services_ManufacturersService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/services/ManufacturersService */ \"(pages-dir-node)/./lib/services/ManufacturersService.ts\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dynamic */ \"(pages-dir-node)/./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_4__);\n// pages/index.tsx\n\n\n\n\n\nconst MapComponent = next_dynamic__WEBPACK_IMPORTED_MODULE_4___default()(()=>Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/lucide-react\"), __webpack_require__.e(\"_pages-dir-node_components_tracking_map_AircraftTrackingMap_tsx\")]).then(__webpack_require__.bind(__webpack_require__, /*! ../components/tracking/map/AircraftTrackingMap */ \"(pages-dir-node)/./components/tracking/map/AircraftTrackingMap.tsx\")), {\n    loadableGenerated: {\n        modules: [\n            \"pages\\\\index.tsx -> \" + \"../components/tracking/map/AircraftTrackingMap\"\n        ]\n    },\n    ssr: false\n});\nclass HomePage extends (react__WEBPACK_IMPORTED_MODULE_1___default().Component) {\n    constructor(props){\n        super(props), this.unsubscribeManufacturers = null;\n        this.state = {\n            manufacturers: props.initialManufacturers || [],\n            errorMessage: null\n        };\n        this.handleError = this.handleError.bind(this);\n        this.updateManufacturers = this.updateManufacturers.bind(this);\n    }\n    componentDidMount() {\n        // Initialize service with SSR data first\n        if (this.props.initialManufacturers && this.props.initialManufacturers.length > 0) {\n            _lib_services_ManufacturersService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].initializeWithData(this.props.initialManufacturers);\n        }\n        // Subscribe to manufacturers updates\n        this.unsubscribeManufacturers = _lib_services_ManufacturersService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].subscribe(this.updateManufacturers);\n        // Load manufacturers if needed\n        if (this.state.manufacturers.length === 0) {\n            _lib_services_ManufacturersService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].loadManufacturers();\n        }\n    }\n    componentWillUnmount() {\n        // Cleanup subscription\n        if (this.unsubscribeManufacturers) {\n            this.unsubscribeManufacturers();\n        }\n    }\n    // Update manufacturers state when service data changes\n    updateManufacturers(manufacturers) {\n        this.setState({\n            manufacturers\n        });\n    }\n    // Handle error messages\n    handleError(message) {\n        this.setState({\n            errorMessage: message\n        });\n        // Auto-clear error after 5 seconds\n        setTimeout(()=>{\n            this.setState({\n                errorMessage: null\n            });\n        }, 5000);\n    }\n    render() {\n        const { manufacturers, errorMessage } = this.state;\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_2___default()), {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                            children: \"Aircraft Tracking\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\index.tsx\",\n                            lineNumber: 85,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                            name: \"description\",\n                            content: \"Track aircraft by MANUFACTURER and MODEL\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\index.tsx\",\n                            lineNumber: 86,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                            name: \"viewport\",\n                            content: \"width=device-width, initial-scale=1\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\index.tsx\",\n                            lineNumber: 90,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                            rel: \"icon\",\n                            href: \"/favicon.ico\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\index.tsx\",\n                            lineNumber: 91,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\index.tsx\",\n                    lineNumber: 84,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MapComponent, {\n                            manufacturers: manufacturers,\n                            onError: this.handleError\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\index.tsx\",\n                            lineNumber: 95,\n                            columnNumber: 11\n                        }, this),\n                        errorMessage && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"fixed bottom-4 left-4 bg-red-500 text-white p-3 rounded-md shadow-lg z-50\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                children: errorMessage\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\index.tsx\",\n                                lineNumber: 103,\n                                columnNumber: 15\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\index.tsx\",\n                            lineNumber: 102,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\pages\\\\index.tsx\",\n                    lineNumber: 94,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true);\n    }\n}\n// Server-side props to pre-load manufacturers\nasync function getServerSideProps() {\n    try {\n        // Use Node.js fetch for server-side data fetching\n        const response = await fetch(`${\"http://localhost:3001\" || 0}/api/tracking/manufacturers`);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch manufacturers: ${response.statusText}`);\n        }\n        const manufacturers = await response.json();\n        return {\n            props: {\n                initialManufacturers: manufacturers\n            }\n        };\n    } catch (error) {\n        console.error('Error in getServerSideProps:', error);\n        return {\n            props: {\n                initialManufacturers: []\n            }\n        };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HomePage);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/index.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./styles/aircraftMapElements.css":
/*!****************************************!*\
  !*** ./styles/aircraftMapElements.css ***!
  \****************************************/
/***/ (() => {



/***/ }),

/***/ "(pages-dir-node)/./styles/globals.css":
/*!****************************!*\
  !*** ./styles/globals.css ***!
  \****************************/
/***/ (() => {



/***/ }),

/***/ "(pages-dir-node)/./styles/leaflet.css":
/*!****************************!*\
  !*** ./styles/leaflet.css ***!
  \****************************/
/***/ (() => {



/***/ }),

/***/ "(pages-dir-node)/./types/base.ts":
/*!***********************!*\
  !*** ./types/base.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegionCode: () => (/* binding */ RegionCode)\n/* harmony export */ });\n//types/base.ts\n/**\r\n * Basic geographical position\r\n */ var RegionCode = /*#__PURE__*/ function(RegionCode) {\n    RegionCode[RegionCode[\"GLOBAL\"] = 0] = \"GLOBAL\";\n    RegionCode[RegionCode[\"North_America\"] = 1] = \"North_America\";\n    RegionCode[RegionCode[\"Europe\"] = 2] = \"Europe\";\n    RegionCode[RegionCode[\"Asia\"] = 3] = \"Asia\";\n    RegionCode[RegionCode[\"South_America\"] = 4] = \"South_America\";\n    RegionCode[RegionCode[\"Africa\"] = 5] = \"Africa\";\n    RegionCode[RegionCode[\"Oceania\"] = 6] = \"Oceania\";\n    return RegionCode;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./types/base.ts\n");

/***/ }),

/***/ "@tanstack/react-query":
/*!****************************************!*\
  !*** external "@tanstack/react-query" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@tanstack/react-query");;

/***/ }),

/***/ "leaflet":
/*!**************************!*\
  !*** external "leaflet" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("leaflet");

/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/head");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react-draggable":
/*!**********************************!*\
  !*** external "react-draggable" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-draggable");

/***/ }),

/***/ "react-hot-toast":
/*!**********************************!*\
  !*** external "react-hot-toast" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = import("react-hot-toast");;

/***/ }),

/***/ "react-leaflet":
/*!********************************!*\
  !*** external "react-leaflet" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = import("react-leaflet");;

/***/ }),

/***/ "react-toastify":
/*!*********************************!*\
  !*** external "react-toastify" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = import("react-toastify");;

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "react/jsx-runtime":
/*!************************************!*\
  !*** external "react/jsx-runtime" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@swc","vendor-chunks/react-toastify","vendor-chunks/leaflet"], () => (__webpack_exec__("(pages-dir-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F&preferredRegion=&absolutePagePath=.%2Fpages%5Cindex.tsx&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();