"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/proxy/mapbox-geocode";
exports.ids = ["pages/api/proxy/mapbox-geocode"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproxy%2Fmapbox-geocode&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproxy%5Cmapbox-geocode.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproxy%2Fmapbox-geocode&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproxy%5Cmapbox-geocode.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_proxy_mapbox_geocode_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\proxy\\mapbox-geocode.ts */ \"(api-node)/./pages/api/proxy/mapbox-geocode.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_proxy_mapbox_geocode_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_proxy_mapbox_geocode_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/proxy/mapbox-geocode\",\n        pathname: \"/api/proxy/mapbox-geocode\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_proxy_mapbox_geocode_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGcHJveHklMkZtYXBib3gtZ2VvY29kZSZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDcHJveHklNUNtYXBib3gtZ2VvY29kZS50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDRTtBQUMxRDtBQUNtRTtBQUNuRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsK0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLCtEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLHlHQUFtQjtBQUNsRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXHByb3h5XFxcXG1hcGJveC1nZW9jb2RlLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wcm94eS9tYXBib3gtZ2VvY29kZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Byb3h5L21hcGJveC1nZW9jb2RlXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJ1xuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproxy%2Fmapbox-geocode&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproxy%5Cmapbox-geocode.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/proxy/mapbox-geocode.ts":
/*!*******************************************!*\
  !*** ./pages/api/proxy/mapbox-geocode.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// pages/api/proxy/mapbox-geocode.ts\n// Cache to store already looked up locations\nconst locationCache = {};\n/**\r\n * Proxy endpoint for Mapbox geocoding API\r\n *\r\n * This protects your Mapbox access token by keeping it server-side\r\n */ async function handler(req, res) {\n    // Log the full request details\n    console.log('Mapbox Geocoding Request:');\n    console.log('- Method:', req.method);\n    console.log('- Query params:', JSON.stringify(req.query));\n    console.log('- Headers:', JSON.stringify(req.headers));\n    // Only allow GET requests\n    if (req.method !== 'GET') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    try {\n        // Get query parameters\n        const { query, limit = 1, types } = req.query;\n        // Validate and log the query\n        if (!query || typeof query !== 'string') {\n            console.error('Missing or invalid query parameter:', query);\n            return res.status(400).json({\n                error: 'Missing or invalid query parameter'\n            });\n        }\n        console.log('Processing reverse geocoding query:', query);\n        // For reverse geocoding, try to detect and parse coordinates\n        let isReverseGeocode = false;\n        let coordinates = null;\n        // Check if the query looks like coordinates (contains a comma and numbers)\n        if (query.includes(',')) {\n            const parts = query.split(',').map((part)=>part.trim());\n            if (parts.length === 2 && !isNaN(parseFloat(parts[0])) && !isNaN(parseFloat(parts[1]))) {\n                isReverseGeocode = true;\n                coordinates = {\n                    lng: parseFloat(parts[0]),\n                    lat: parseFloat(parts[1])\n                };\n                console.log('Detected reverse geocoding request with coordinates:', coordinates);\n            }\n        }\n        // Create a cache key that includes all parameters\n        const cacheKey = `${query}_${limit}_${types || 'default'}`;\n        // Check if we have this query in cache\n        if (locationCache[cacheKey]) {\n            console.log(`Using cached results for query \"${query}\"`);\n            return res.status(200).json({\n                ...locationCache[cacheKey],\n                source: 'cache'\n            });\n        }\n        // Get Mapbox access token from environment variables\n        const MAPBOX_ACCESS_TOKEN = process.env.MAPBOX_API_KEY || process.env.MAPBOX_ACCESS_TOKEN;\n        if (!MAPBOX_ACCESS_TOKEN) {\n            console.error('No Mapbox API key configured');\n            return res.status(500).json({\n                error: 'Mapbox API not properly configured'\n            });\n        }\n        // Construct Mapbox API URL\n        const encodedQuery = encodeURIComponent(query);\n        const mapboxUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodedQuery}.json`;\n        console.log('Mapbox API URL:', mapboxUrl);\n        // Set up query parameters for Mapbox\n        const params = new URLSearchParams({\n            access_token: MAPBOX_ACCESS_TOKEN,\n            limit: typeof limit === 'string' ? limit : '1'\n        });\n        // Add types parameter if provided\n        if (types && typeof types === 'string') {\n            params.append('types', types);\n            console.log('Types parameter:', types);\n        } else {\n            // Default types if not specified\n            params.append('types', 'place,postcode,address,poi,neighborhood,region');\n            console.log('Using default types');\n        }\n        // Log the final request URL (with token masked)\n        const paramsString = params.toString();\n        const maskedParams = paramsString.replace(/access_token=([^&]+)/, 'access_token=MASKED');\n        console.log(`Final Mapbox request: ${mapboxUrl}?${maskedParams}`);\n        // Create an AbortController for timeout\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 7000); // 7 second timeout\n        try {\n            // Make request to Mapbox API\n            const response = await fetch(`${mapboxUrl}?${params.toString()}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('Mapbox API error:', response.status, errorText);\n                return res.status(response.status).json({\n                    error: `Mapbox API error: ${response.status}`,\n                    details: errorText\n                });\n            }\n            // Get JSON response from Mapbox\n            const data = await response.json();\n            // Log the response status and basic structure\n            console.log('Mapbox API response status:', response.status);\n            console.log('Mapbox API response type:', data.type);\n            console.log('Features count:', data.features?.length || 0);\n            // If no features were returned, log more details about the query\n            if (!data.features || data.features.length === 0) {\n                console.log('No features found for query:', query);\n                console.log('Raw query string:', query);\n                if (isReverseGeocode) {\n                    console.log('Parsed as coordinates:', coordinates);\n                }\n            } else {\n                // Log basic info about the first feature\n                const firstFeature = data.features[0];\n                console.log('First feature:');\n                console.log('- id:', firstFeature.id);\n                console.log('- type:', firstFeature.type);\n                console.log('- place_type:', firstFeature.place_type);\n                console.log('- place_name:', firstFeature.place_name);\n            }\n            // Cache the results\n            locationCache[cacheKey] = data;\n            // Return the Mapbox response\n            return res.status(200).json(data);\n        } catch (fetchError) {\n            clearTimeout(timeoutId);\n            console.error('Fetch error:', fetchError);\n            throw fetchError;\n        }\n    } catch (error) {\n        console.error('Error in Mapbox geocoding proxy:', error);\n        return res.status(500).json({\n            error: 'Internal server error in geocoding proxy',\n            message: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/proxy/mapbox-geocode.ts\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproxy%2Fmapbox-geocode&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproxy%5Cmapbox-geocode.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();