"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/proxy/opensky";
exports.ids = ["pages/api/proxy/opensky"];
exports.modules = {

/***/ "(api-node)/./config/api.ts":
/*!***********************!*\
  !*** ./config/api.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_CONFIG: () => (/* binding */ API_CONFIG)\n/* harmony export */ });\n// config/api.ts\nconst API_CONFIG = {\n    BASE_URL: 'https://opensky-network.org/api',\n    WS_URL: 'wss://opensky-network.org/api/ws',\n    ENDPOINTS: {\n        ALL_STATES: '/states/all',\n        WEBSOCKET: '/websocket'\n    },\n    HEADERS: {\n        ACCEPT: 'application/json',\n        CONTENT_TYPE: 'application/json'\n    },\n    TIMEOUT: {\n        DEFAULT: 10000,\n        WEBSOCKET: 30000,\n        LONG_POLL: 60000\n    },\n    PARAMS: {\n        ICAO24: 'ICAO24',\n        TIME: 'time',\n        EXTENDED: 'extended',\n        MAX_ICAO_QUERY: 200,\n        MAX_TOTAL_ICAO_QUERY: 2000\n    },\n    API: {\n        MIN_POLLING_INTERVAL: 300000,\n        MAX_POLLING_INTERVAL: 600000,\n        TIMEOUT_MS: 15000,\n        DEFAULT_RETRY_LIMIT: 3,\n        MAX_RETRY_LIMIT: 5\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2NvbmZpZy9hcGkudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGdCQUFnQjtBQUNULE1BQU1BLGFBQWE7SUFDeEJDLFVBQVU7SUFDVkMsUUFBUTtJQUNSQyxXQUFXO1FBQ1RDLFlBQVk7UUFDWkMsV0FBVztJQUNiO0lBQ0FDLFNBQVM7UUFDUEMsUUFBUTtRQUNSQyxjQUFjO0lBQ2hCO0lBQ0FDLFNBQVM7UUFDUEMsU0FBUztRQUNUTCxXQUFXO1FBQ1hNLFdBQVc7SUFDYjtJQUNBQyxRQUFRO1FBQ05DLFFBQVE7UUFDUkMsTUFBTTtRQUNOQyxVQUFVO1FBQ1ZDLGdCQUFnQjtRQUNoQkMsc0JBQXNCO0lBQ3hCO0lBRUFDLEtBQUs7UUFDSEMsc0JBQXNCO1FBQ3RCQyxzQkFBc0I7UUFDdEJDLFlBQVk7UUFDWkMscUJBQXFCO1FBQ3JCQyxpQkFBaUI7SUFDbkI7QUFDRixFQUFXIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhdGhvXFxEb2N1bWVudHNcXFByb2plY3RzXFxhaXJjcmFmdC10cmFja2luZ1xcY29uZmlnXFxhcGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uZmlnL2FwaS50c1xyXG5leHBvcnQgY29uc3QgQVBJX0NPTkZJRyA9IHtcclxuICBCQVNFX1VSTDogJ2h0dHBzOi8vb3BlbnNreS1uZXR3b3JrLm9yZy9hcGknLFxyXG4gIFdTX1VSTDogJ3dzczovL29wZW5za3ktbmV0d29yay5vcmcvYXBpL3dzJyxcclxuICBFTkRQT0lOVFM6IHtcclxuICAgIEFMTF9TVEFURVM6ICcvc3RhdGVzL2FsbCcsXHJcbiAgICBXRUJTT0NLRVQ6ICcvd2Vic29ja2V0JyxcclxuICB9LFxyXG4gIEhFQURFUlM6IHtcclxuICAgIEFDQ0VQVDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgQ09OVEVOVF9UWVBFOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgfSxcclxuICBUSU1FT1VUOiB7XHJcbiAgICBERUZBVUxUOiAxMDAwMCxcclxuICAgIFdFQlNPQ0tFVDogMzAwMDAsXHJcbiAgICBMT05HX1BPTEw6IDYwMDAwLFxyXG4gIH0sXHJcbiAgUEFSQU1TOiB7XHJcbiAgICBJQ0FPMjQ6ICdJQ0FPMjQnLFxyXG4gICAgVElNRTogJ3RpbWUnLFxyXG4gICAgRVhURU5ERUQ6ICdleHRlbmRlZCcsXHJcbiAgICBNQVhfSUNBT19RVUVSWTogMjAwLFxyXG4gICAgTUFYX1RPVEFMX0lDQU9fUVVFUlk6IDIwMDAsXHJcbiAgfSxcclxuXHJcbiAgQVBJOiB7XHJcbiAgICBNSU5fUE9MTElOR19JTlRFUlZBTDogMzAwMDAwLFxyXG4gICAgTUFYX1BPTExJTkdfSU5URVJWQUw6IDYwMDAwMCxcclxuICAgIFRJTUVPVVRfTVM6IDE1MDAwLFxyXG4gICAgREVGQVVMVF9SRVRSWV9MSU1JVDogMyxcclxuICAgIE1BWF9SRVRSWV9MSU1JVDogNSxcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG4iXSwibmFtZXMiOlsiQVBJX0NPTkZJRyIsIkJBU0VfVVJMIiwiV1NfVVJMIiwiRU5EUE9JTlRTIiwiQUxMX1NUQVRFUyIsIldFQlNPQ0tFVCIsIkhFQURFUlMiLCJBQ0NFUFQiLCJDT05URU5UX1RZUEUiLCJUSU1FT1VUIiwiREVGQVVMVCIsIkxPTkdfUE9MTCIsIlBBUkFNUyIsIklDQU8yNCIsIlRJTUUiLCJFWFRFTkRFRCIsIk1BWF9JQ0FPX1FVRVJZIiwiTUFYX1RPVEFMX0lDQU9fUVVFUlkiLCJBUEkiLCJNSU5fUE9MTElOR19JTlRFUlZBTCIsIk1BWF9QT0xMSU5HX0lOVEVSVkFMIiwiVElNRU9VVF9NUyIsIkRFRkFVTFRfUkVUUllfTElNSVQiLCJNQVhfUkVUUllfTElNSVQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./config/api.ts\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproxy%2Fopensky&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproxy%5Copensky.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproxy%2Fopensky&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproxy%5Copensky.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_proxy_opensky_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\proxy\\opensky.ts */ \"(api-node)/./pages/api/proxy/opensky.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_proxy_opensky_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_proxy_opensky_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/proxy/opensky\",\n        pathname: \"/api/proxy/opensky\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_proxy_opensky_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGcHJveHklMkZvcGVuc2t5JnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNwcm94eSU1Q29wZW5za3kudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDNEQ7QUFDNUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHdEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx3REFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxwcm94eVxcXFxvcGVuc2t5LnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wcm94eS9vcGVuc2t5XCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcHJveHkvb3BlbnNreVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproxy%2Fopensky&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproxy%5Copensky.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/proxy/opensky.ts":
/*!************************************!*\
  !*** ./pages/api/proxy/opensky.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _config_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config/api */ \"(api-node)/./config/api.ts\");\n// pages/api/proxy/opensky.ts\n\n// Constants\nconst MAX_ICAOS_PER_REQUEST = 100; // OpenSky limit\nconst CACHE_TTL = 60000; // 1 minute cache\nconst MAX_REQUESTS_PER_MIN = 15; // Rate limit\nconst MAX_REQUESTS_PER_DAY = 1000; // Daily limit\n// Rate limiting state\nlet requestsThisMinute = 0;\nlet requestsToday = 0;\nlet lastMinuteReset = Date.now();\nlet lastDayReset = Date.now();\n// Cache for recent requests\nconst responseCache = new Map();\nasync function handler(req, res) {\n    // Only allow POST requests\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            success: false,\n            error: 'Method not allowed'\n        });\n    }\n    // Extract request parameters: either ICAO24 codes or geofence\n    const { ICAO24s, geofence } = req.body;\n    // Generate a cache key based on the request\n    let requestKey;\n    let params = new URLSearchParams();\n    let requestType = 'icao';\n    // Check if this is a geofence request\n    if (geofence && isValidGeofence(geofence)) {\n        requestType = 'geofence';\n        requestKey = `geofence-${JSON.stringify(geofence)}`;\n        // Add geofence parameters\n        params.append('lamin', geofence.lamin.toString());\n        params.append('lamax', geofence.lamax.toString());\n        params.append('lomin', geofence.lomin.toString());\n        params.append('lomax', geofence.lomax.toString());\n        console.log('[OpenSky Proxy] Geofence request:', `lat [${geofence.lamin.toFixed(4)}, ${geofence.lamax.toFixed(4)}], ` + `lng [${geofence.lomin.toFixed(4)}, ${geofence.lomax.toFixed(4)}]`);\n    } else if (Array.isArray(ICAO24s) && ICAO24s.length > 0) {\n        // Validate ICAO codes (6 hex characters)\n        const validIcaos = ICAO24s.filter((code)=>typeof code === 'string').map((code)=>code.trim().toLowerCase()).filter((code)=>/^[0-9a-f]{6}$/.test(code));\n        // Limit batch size\n        if (validIcaos.length > MAX_ICAOS_PER_REQUEST) {\n            return res.status(400).json({\n                success: false,\n                error: `Maximum ${MAX_ICAOS_PER_REQUEST} ICAO24 codes per request`\n            });\n        }\n        if (validIcaos.length === 0) {\n            return res.status(400).json({\n                success: false,\n                error: 'No valid ICAO24 codes provided'\n            });\n        }\n        requestKey = JSON.stringify(validIcaos.sort());\n        params.append('ICAO24', validIcaos.join(','));\n        params.append('extended', '1');\n    } else {\n        return res.status(400).json({\n            success: false,\n            error: 'Must provide either valid ICAO24s array or geofence parameters'\n        });\n    }\n    // Check cache for identical request\n    const cachedResponse = responseCache.get(requestKey);\n    if (cachedResponse && Date.now() - cachedResponse.timestamp < CACHE_TTL) {\n        console.log('[OpenSky Proxy] Returning cached response');\n        return res.status(200).json(cachedResponse.data);\n    }\n    // Reset rate limits if needed\n    checkAndResetRateLimits();\n    // Check rate limits\n    if (requestsThisMinute >= MAX_REQUESTS_PER_MIN) {\n        console.log('[OpenSky Proxy] Rate limit reached (per minute)');\n        return res.status(429).json({\n            success: false,\n            error: 'Rate limit exceeded',\n            retryAfter: Math.ceil((lastMinuteReset + 60000 - Date.now()) / 1000)\n        });\n    }\n    if (requestsToday >= MAX_REQUESTS_PER_DAY) {\n        console.log('[OpenSky Proxy] Rate limit reached (per day)');\n        return res.status(429).json({\n            success: false,\n            error: 'Daily limit exceeded',\n            retryAfter: Math.ceil((lastDayReset + 86400000 - Date.now()) / 1000)\n        });\n    }\n    try {\n        // Build OpenSky API URL\n        const OPENSKY_API_URL = process.env.OPENSKY_API_URL || 'https://opensky-network.org/api';\n        const endpoint = `${OPENSKY_API_URL}/states/all`;\n        if (requestType === 'geofence') {\n            console.log('[OpenSky Proxy] Fetching aircraft within geofence');\n        } else {\n            console.log(`[OpenSky Proxy] Fetching aircraft by ICAO codes`);\n        }\n        // Update rate limit counters\n        requestsThisMinute++;\n        requestsToday++;\n        // Add authentication if provided\n        const authHeaders = {};\n        if (process.env.OPENSKY_USERNAME && process.env.OPENSKY_PASSWORD) {\n            const authString = Buffer.from(`${process.env.OPENSKY_USERNAME}:${process.env.OPENSKY_PASSWORD}`).toString('base64');\n            authHeaders['Authorization'] = `Basic ${authString}`;\n        }\n        // Make request to OpenSky API with timeout\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), _config_api__WEBPACK_IMPORTED_MODULE_0__.API_CONFIG.TIMEOUT?.DEFAULT || 20000);\n        const response = await fetch(`${endpoint}?${params}`, {\n            headers: {\n                ...authHeaders,\n                Accept: 'application/json'\n            },\n            signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        if (!response.ok) {\n            throw new Error(`OpenSky API error: ${response.status} ${response.statusText}`);\n        }\n        // Parse the response\n        const data = await response.json();\n        // Extract and format aircraft states\n        // Extract and format aircraft states\n        let states = [];\n        if (data?.states && Array.isArray(data.states)) {\n            // Create a set of requested ICAO24 codes for faster lookup if this was an ICAO request\n            let requestedIcaos = null;\n            if (requestType === 'icao') {\n                requestedIcaos = new Set(ICAO24s.map((code)=>code.toLowerCase()));\n            }\n            states = data.states.filter((state)=>Array.isArray(state) && state.length >= 8 && state[5] && state[6] && // Only include aircraft that match our requested ICAO24 codes\n                (requestType === 'geofence' || state[0] && requestedIcaos?.has(state[0].toLowerCase()))).map((state)=>{\n                // OpenSky API returns an array with specific indexes\n                const [ICAO24, callsign, origin_country, time_position, last_contact, longitude, latitude, altitude, on_ground, velocity, heading, vertical_rate] = state;\n                return {\n                    ICAO24: ICAO24?.toLowerCase(),\n                    callsign: callsign?.trim(),\n                    origin_country,\n                    last_contact,\n                    longitude,\n                    latitude,\n                    altitude: altitude || 0,\n                    on_ground: !!on_ground,\n                    velocity: velocity || 0,\n                    heading: heading || 0,\n                    vertical_rate: vertical_rate || 0\n                };\n            });\n        }\n        // Prepare response\n        const responseData = {\n            success: true,\n            data: {\n                states,\n                timestamp: data.time || Date.now(),\n                meta: {\n                    total: states.length,\n                    requestType: requestType,\n                    ...requestType === 'geofence' ? {\n                        geofence\n                    } : {\n                        requested: ICAO24s.length\n                    }\n                }\n            }\n        };\n        // In your OpenSky proxy endpoint\n        console.log('[OpenSky Proxy] Raw API response:', JSON.stringify(responseData).substring(0, 500) + '...');\n        console.log('[OpenSky Proxy] Response success:', responseData.success);\n        // Cache the response\n        responseCache.set(requestKey, {\n            timestamp: Date.now(),\n            data: responseData\n        });\n        console.log(`[OpenSky Proxy] Returning ${states.length} aircraft states`);\n        return res.status(200).json(responseData);\n    } catch (error) {\n        console.error('[OpenSky Proxy] Error:', error);\n        return res.status(error instanceof Error && error.name === 'AbortError' ? 408 // Request Timeout\n         : 503 // Service Unavailable\n        ).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to fetch data from OpenSky',\n            retryAfter: 60\n        });\n    }\n}\n/**\r\n * Check and reset rate limit counters if needed\r\n */ function checkAndResetRateLimits() {\n    const now = Date.now();\n    // Reset minute counter after 60 seconds\n    if (now - lastMinuteReset > 60000) {\n        requestsThisMinute = 0;\n        lastMinuteReset = now;\n        console.log('[OpenSky Proxy] Reset minute rate limit counter');\n    }\n    // Reset daily counter after 24 hours\n    if (now - lastDayReset > 86400000) {\n        requestsToday = 0;\n        lastDayReset = now;\n        console.log('[OpenSky Proxy] Reset daily rate limit counter');\n    }\n}\n/**\r\n * Validates geofence parameters\r\n */ function isValidGeofence(geofence) {\n    if (!geofence || typeof geofence !== 'object') return false;\n    // Check that all required fields exist and are numbers\n    const hasValidFields = typeof geofence.lamin === 'number' && typeof geofence.lamax === 'number' && typeof geofence.lomin === 'number' && typeof geofence.lomax === 'number';\n    if (!hasValidFields) return false;\n    // Validate ranges\n    const validLatitude = geofence.lamin >= -90 && geofence.lamin <= 90 && geofence.lamax >= -90 && geofence.lamax <= 90 && geofence.lamin <= geofence.lamax;\n    const validLongitude = geofence.lomin >= -180 && geofence.lomin <= 180 && geofence.lomax >= -180 && geofence.lomax <= 180 && geofence.lomin <= geofence.lomax;\n    return validLatitude && validLongitude;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/proxy/opensky.ts\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproxy%2Fopensky&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproxy%5Copensky.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();