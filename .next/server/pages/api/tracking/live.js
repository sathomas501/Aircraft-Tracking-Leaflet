"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/tracking/live";
exports.ids = ["pages/api/tracking/live"];
exports.modules = {

/***/ "(api-node)/./lib/db/DatabaseManager.ts":
/*!***********************************!*\
  !*** ./lib/db/DatabaseManager.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseManager: () => (/* binding */ DatabaseManager),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sqlite3 */ \"sqlite3\");\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sqlite3__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var sqlite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sqlite */ \"sqlite\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([sqlite__WEBPACK_IMPORTED_MODULE_2__]);\nsqlite__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// SimplifiedDatabaseManager.ts\n\n\n\n\n// The main database manager class\nclass DatabaseManager {\n    static{\n        this.instance = null;\n    }\n    constructor(dbPath){\n        this.db = null;\n        this.isInitialized = false;\n        this.cache = {};\n        this.dbPath = dbPath;\n        console.log(`[DB] Database path: ${this.dbPath}`);\n    }\n    /**\r\n   * Get singleton instance\r\n   */ static getInstance(dbPath) {\n        if (!DatabaseManager.instance) {\n            // First try to use the provided dbPath parameter\n            if (dbPath) {\n                DatabaseManager.instance = new DatabaseManager(dbPath);\n            } else {\n                // Otherwise, try to use the environment variable\n                const envPath = process.env.STATIC_DB_PATH;\n                if (!envPath) {\n                    throw new Error('STATIC_DB_PATH not defined in .env');\n                }\n                DatabaseManager.instance = new DatabaseManager(envPath);\n            }\n        }\n        return DatabaseManager.instance;\n    }\n    /**\r\n   * Initialize the database connection and create tables if needed\r\n   */ async initialize() {\n        if (this.isInitialized) return;\n        try {\n            // Ensure directory exists\n            const dbDir = path__WEBPACK_IMPORTED_MODULE_0___default().dirname(this.dbPath);\n            if (!fs__WEBPACK_IMPORTED_MODULE_3___default().existsSync(dbDir)) {\n                fs__WEBPACK_IMPORTED_MODULE_3___default().mkdirSync(dbDir, {\n                    recursive: true\n                });\n            }\n            // Open database connection\n            this.db = await (0,sqlite__WEBPACK_IMPORTED_MODULE_2__.open)({\n                filename: this.dbPath,\n                driver: (sqlite3__WEBPACK_IMPORTED_MODULE_1___default().Database)\n            });\n            // Set pragmas for better performance\n            await this.db.run('PRAGMA journal_mode = WAL;');\n            await this.db.run('PRAGMA busy_timeout = 5000;');\n            this.isInitialized = true;\n            console.log('[DB] Database initialized successfully');\n        } catch (error) {\n            console.error('[DB] Failed to initialize database:', error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get data with caching\r\n   */ async query(cacheKey, sqlQuery, params = [], ttl = 300 // 5 minutes default TTL\n    ) {\n        // Check if we need to initialize first\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n        // Try to get from cache first\n        const cachedData = this.getFromCache(cacheKey);\n        if (cachedData) {\n            console.log(`[DB] Cache hit for: ${cacheKey}`);\n            return cachedData;\n        }\n        // Cache miss, execute query\n        console.log(`[DB] Cache miss for: ${cacheKey}, executing query`);\n        try {\n            const results = await this.db.all(sqlQuery, params);\n            // Store in cache\n            this.setInCache(cacheKey, results, ttl);\n            return results;\n        } catch (error) {\n            console.error(`[DB] Query error for ${cacheKey}:`, error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get single item with caching\r\n   */ async getSingle(cacheKey, sqlQuery, params = [], ttl = 300) {\n        // Check if we need to initialize first\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n        // Try to get from cache first\n        const cachedData = this.getFromCache(cacheKey);\n        if (cachedData !== undefined) {\n            console.log(`[DB] Cache hit for: ${cacheKey}`);\n            return cachedData;\n        }\n        // Cache miss, execute query\n        console.log(`[DB] Cache miss for: ${cacheKey}, executing query`);\n        try {\n            const result = await this.db.get(sqlQuery, params);\n            // Store in cache (even if null)\n            this.setInCache(cacheKey, result || null, ttl);\n            return result || null;\n        } catch (error) {\n            console.error(`[DB] Query error for ${cacheKey}:`, error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get manufacturers with aircraft count\r\n   */ async getManufacturersWithCount(limit = 75) {\n        const cacheKey = `manufacturers-count-${limit}`;\n        // Query with exact column case matching your schema\n        return this.query(cacheKey, `SELECT \n      MANUFACTURER AS name,  \n      COUNT(*) AS count \n    FROM aircraft \n    WHERE MANUFACTURER IS NOT NULL AND trim(MANUFACTURER) != '' \n    GROUP BY MANUFACTURER \n    HAVING count > 0 \n    ORDER BY count DESC \n    LIMIT ?`, [\n            limit\n        ], 600 // 10 minute cache\n        );\n    }\n    async getIcao24sForManufacturer(manufacturer, region) {\n        if (!this.isInitialized) {\n            console.log('[DB] Not initialized, calling initialize()');\n            await this.initialize();\n        }\n        const cacheKey = region ? `ICAO24s-${manufacturer.toUpperCase()}-${region}` : `ICAO24s-${manufacturer.toUpperCase()}`;\n        const cachedData = this.getFromCache(cacheKey);\n        if (cachedData) {\n            console.log(`[DB] Cache hit for: ${cacheKey}`);\n            return cachedData;\n        }\n        console.log(`[DB] Cache miss for: ${cacheKey}, executing query`);\n        try {\n            const queryParts = [\n                `SELECT DISTINCT ICAO24 FROM aircraft`,\n                `WHERE LOWER(MANUFACTURER) = LOWER(?)`,\n                `AND ICAO24 IS NOT NULL`\n            ];\n            const queryParams = [\n                manufacturer\n            ];\n            // Add region filtering if region is specified\n            if (region !== undefined) {\n                // Check if region is a number or string\n                if (typeof region === 'string' && !isNaN(parseInt(region, 10))) {\n                    // If it's a numeric string, convert to number\n                    queryParts.push(`AND REGION = ?`);\n                    queryParams.push(parseInt(region, 10));\n                } else if (typeof region === 'number') {\n                    // If it's already a number\n                    queryParts.push(`AND REGION = ?`);\n                    queryParams.push(region);\n                } else {\n                    // Assume it's a state string\n                    queryParts.push(`AND LOWER(STATE) = LOWER(?)`);\n                    queryParams.push(region);\n                }\n            }\n            const query = queryParts.join(' ');\n            const result = await this.db.all(query, queryParams);\n            const ICAO24s = result.map((row)=>row.ICAO24.toLowerCase());\n            console.log(`[DB] Retrieved ${ICAO24s.length} ICAO24s for ${manufacturer}${region ? ` in region/state ${region}` : ''}`);\n            this.setInCache(cacheKey, ICAO24s, 300);\n            return ICAO24s;\n        } catch (error) {\n            console.error(`[DB] Error retrieving ICAO24s for manufacturer ${manufacturer}${region ? ` in region/state ${region}` : ''}:`, error);\n            return [];\n        }\n    }\n    /**\r\n   * Get aircraft by ICAO24 codes\r\n   */ async getAircraftByIcao24s(ICAO24s) {\n        if (!Array.isArray(ICAO24s) || ICAO24s.length === 0) {\n            return [];\n        }\n        // Get individual aircraft from cache if possible\n        const result = [];\n        const missingIcao24s = [];\n        for (const icao of ICAO24s){\n            const cachedAircraft = this.getFromCache(`aircraft-${icao}`);\n            if (cachedAircraft) {\n                result.push(cachedAircraft);\n            } else {\n                missingIcao24s.push(icao);\n            }\n        }\n        // Fetch any missing aircraft\n        if (missingIcao24s.length > 0) {\n            const placeholders = missingIcao24s.map(()=>'?').join(',');\n            const query = `\n        SELECT *\n        FROM aircraft\n        WHERE ICAO24 IN (${placeholders})\n      `;\n            const fetchedAircraft = await this.query(`aircraft-batch-${Date.now()}`, query, missingIcao24s, 0 // Don't cache the batch query result\n            );\n            // Cache individual results\n            for (const aircraft of fetchedAircraft){\n                this.setInCache(`aircraft-${aircraft.ICAO24}`, aircraft, 300);\n                result.push(aircraft);\n            }\n        }\n        return result;\n    }\n    /**\r\n   * Get models by MANUFACTURER\r\n   */ async getModelsByManufacturer(MANUFACTURER) {\n        const cacheKey = `models-${MANUFACTURER}`;\n        return this.query(cacheKey, `SELECT \n        MODEL,\n        MANUFACTURER,\n        COUNT(DISTINCT ICAO24) as total_count,\n        MAX(NAME) as NAME,\n        MAX(CITY) as CITY,\n        MAX(STATE) as STATE,\n        MAX(TYPE_REGISTRANT) as TYPE_REGISTRANT\n      FROM aircraft\n      WHERE MANUFACTURER = ?\n      GROUP BY MODEL, MANUFACTURER\n      ORDER BY total_count DESC`, [\n            MANUFACTURER\n        ], 300 // 5 minute cache\n        );\n    }\n    /**\r\n   * Store data in cache\r\n   */ setInCache(key, data, ttl) {\n        this.cache[key] = {\n            data,\n            timestamp: Date.now(),\n            ttl: ttl * 1000\n        };\n    }\n    /**\r\n   * Get data from cache if valid\r\n   */ getFromCache(key) {\n        const entry = this.cache[key];\n        if (!entry) return undefined;\n        // Check if cache entry is still valid\n        const age = Date.now() - entry.timestamp;\n        if (age > entry.ttl) {\n            // Cache expired\n            delete this.cache[key];\n            return undefined;\n        }\n        return entry.data;\n    }\n    /**\r\n   * Clear entire cache or specific keys\r\n   */ clearCache(key) {\n        if (key) {\n            delete this.cache[key];\n            console.log(`[DB] Cleared cache for: ${key}`);\n        } else {\n            this.cache = {};\n            console.log('[DB] Cleared entire cache');\n        }\n    }\n    /**\r\n   * Close database connection\r\n   */ async close() {\n        if (this.db) {\n            await this.db.close();\n            this.db = null;\n            this.isInitialized = false;\n            console.log('[DB] Database connection closed');\n        }\n    }\n}\n// Export a singleton instance\nconst dbManager = DatabaseManager.getInstance();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dbManager);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/db/DatabaseManager.ts\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftracking%2Flive&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ctracking%5Clive.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftracking%2Flive&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ctracking%5Clive.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_tracking_live_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\tracking\\live.ts */ \"(api-node)/./pages/api/tracking/live.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_tracking_live_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_tracking_live_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_tracking_live_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_tracking_live_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/tracking/live\",\n        pathname: \"/api/tracking/live\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_tracking_live_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGdHJhY2tpbmclMkZsaXZlJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUN0cmFja2luZyU1Q2xpdmUudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDNEQ7QUFDNUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHdEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx3REFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFx0cmFja2luZ1xcXFxsaXZlLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90cmFja2luZy9saXZlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdHJhY2tpbmcvbGl2ZVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftracking%2Flive&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ctracking%5Clive.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/tracking/live.ts":
/*!************************************!*\
  !*** ./pages/api/tracking/live.ts ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_db_DatabaseManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/db/DatabaseManager */ \"(api-node)/./lib/db/DatabaseManager.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db_DatabaseManager__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_db_DatabaseManager__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// pages/api/tracking/live.ts\n\n// Cache for API responses\nconst TRACKING_CACHE = new Map();\nconst CACHE_TTL = 15000; // 15 seconds\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    const { ICAO24s, MANUFACTURER, includeStatic = false, activeOnly = false } = req.body;\n    console.log(`[API] Received request for ${ICAO24s?.length || 0} aircraft from ${MANUFACTURER || 'unknown MANUFACTURER'}`);\n    console.log(`[API] Static data inclusion: ${includeStatic ? 'Yes' : 'No'}`);\n    if (!ICAO24s || !Array.isArray(ICAO24s) || ICAO24s.length === 0) {\n        console.log('[API] Invalid request: Missing or empty ICAO24s array');\n        return res.status(400).json({\n            error: 'Valid ICAO24s array required'\n        });\n    }\n    // Show a sample of 5 ICAOs in the request\n    const sampleIcaos = ICAO24s.slice(0, 5);\n    console.log(`[API] Sample ICAOs in request: ${sampleIcaos.join(', ')}${ICAO24s.length > 5 ? '...' : ''}`);\n    try {\n        // Get live data using the proxy API\n        const liveData = await fetchLiveAircraftData(ICAO24s);\n        console.log(`[API] Received ${liveData.length} aircraft with position data`);\n        // If static data is requested, fetch it from the database\n        let staticAircraft = {};\n        if (includeStatic && liveData.length > 0) {\n            // Get ICAO24s that have position data\n            const liveIcao24s = liveData.map((a)=>a.ICAO24);\n            console.log(`[API] Fetching static data for ${liveIcao24s.length} aircraft`);\n            const staticData = await _lib_db_DatabaseManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getAircraftByIcao24s(liveIcao24s);\n            console.log(`[API] Retrieved static data for ${staticData.length} aircraft`);\n            const { batchIndex, totalBatches } = req.body;\n            // Then modify your logging to include this information\n            if (batchIndex && totalBatches) {\n                console.log(`[API] Processing batch ${batchIndex}/${totalBatches} (${ICAO24s.length} ICAOs)`);\n            } else {\n                // Fall back to the existing logging\n                console.log(`[API] Processing batch 1/1 (${ICAO24s.length} ICAOs)`);\n            }\n            // Create a lookup map for faster merging\n            staticAircraft = staticData.reduce((map, aircraft)=>{\n                if (aircraft.ICAO24) {\n                    map[aircraft.ICAO24.toLowerCase()] = aircraft;\n                }\n                return map;\n            }, {});\n        }\n        // Merge live and static data\n        const mergedAircraft = liveData.map((liveAircraft)=>{\n            const icao = liveAircraft.ICAO24.toLowerCase();\n            const staticData = staticAircraft[icao] || {};\n            if (activeOnly) {\n                // Only return aircraft with position data\n                const mergedAircraft = liveData.map((liveAircraft)=>{\n                    const icao = liveAircraft.ICAO24.toLowerCase();\n                    const staticData = staticAircraft[icao] || {};\n                    return {\n                        ...staticData,\n                        ...liveAircraft,\n                        ICAO24: icao,\n                        _tracking: {\n                            MANUFACTURER,\n                            lastSeen: Date.now()\n                        }\n                    };\n                });\n                const activeAircraft = mergedAircraft.filter((aircraft)=>aircraft.latitude && aircraft.longitude);\n                console.log(`[API] Filtering to ${activeAircraft.length} active aircraft out of ${mergedAircraft.length} total`);\n            }\n            return {\n                ...staticData,\n                ...liveAircraft,\n                // Ensure consistent ICAO24 format\n                ICAO24: icao,\n                // Add tracking metadata\n                _tracking: {\n                    MANUFACTURER,\n                    lastSeen: Date.now()\n                }\n            };\n        });\n        console.log(`[API] Returning ${mergedAircraft.length} merged aircraft records`);\n        return res.status(200).json({\n            aircraft: mergedAircraft,\n            count: mergedAircraft.length,\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error('[API] Error fetching tracking data:', error);\n        // Return empty result to prevent frontend errors\n        return res.status(500).json({\n            error: 'Failed to fetch tracking data',\n            message: error instanceof Error ? error.message : 'Unknown error',\n            aircraft: [],\n            count: 0,\n            timestamp: new Date().toISOString()\n        });\n    }\n}\n/**\r\n * Fetch live aircraft data using the OpenSky proxy\r\n * Handles batching and rate limits through the proxy\r\n */ async function fetchLiveAircraftData(ICAO24s) {\n    // Generate a cache key based on ICAO24s\n    const cacheKey = ICAO24s.sort().join(',');\n    // Check cache first\n    const cached = TRACKING_CACHE.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {\n        console.log('[API] Using cached tracking data from', new Date(cached.timestamp).toLocaleTimeString());\n        return cached.data;\n    }\n    // Prepare batches (100 ICAOs per batch as per the proxy's limit)\n    const BATCH_SIZE = 100;\n    const batches = [];\n    for(let i = 0; i < ICAO24s.length; i += BATCH_SIZE){\n        batches.push(ICAO24s.slice(i, i + BATCH_SIZE));\n    }\n    console.log(`[API] Processing ${ICAO24s.length} ICAOs in ${batches.length} batches`);\n    // Process batches sequentially to respect rate limits\n    const results = [];\n    for(let i = 0; i < batches.length; i++){\n        const batch = batches[i];\n        try {\n            console.log(`[API] Processing batch ${i + 1}/${batches.length} (${batch.length} ICAOs)`);\n            // Sample of ICAOs in this batch\n            const sampleIcaos = batch.slice(0, 5);\n            console.log(`[API] Sample ICAOs in batch: ${sampleIcaos.join(', ')}${batch.length > 5 ? '...' : ''}`);\n            // Call the proxy endpoint\n            const batchResults = await fetchAircraftBatch(batch);\n            // Add to overall results\n            results.push(...batchResults);\n            // Log results\n            console.log(`[API] Batch ${i + 1} returned ${batchResults.length} aircraft with position data`);\n            // Add a small delay between batches to be nice to the proxy\n            if (i < batches.length - 1) {\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n            }\n        } catch (error) {\n            console.error(`[API] Error processing batch ${i + 1}:`, error);\n        // Continue with the next batch instead of failing completely\n        }\n    }\n    // Cache the combined results\n    TRACKING_CACHE.set(cacheKey, {\n        data: results,\n        timestamp: Date.now()\n    });\n    return results;\n}\n/**\r\n * Fetch a single batch of aircraft data using the proxy API\r\n */ async function fetchAircraftBatch(ICAO24Batch) {\n    // Get base URL from environment variable or use a default\n    const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3001';\n    // Call our proxy API with absolute URL\n    const response = await fetch(`${baseUrl}/api/proxy/opensky`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            ICAO24s: ICAO24Batch\n        })\n    });\n    if (!response.ok) {\n        // If we hit a rate limit, handle it gracefully\n        if (response.status === 429) {\n            const data = await response.json();\n            const retryAfter = data.retryAfter || 60;\n            console.log(`[API] Rate limited by proxy. Retry after ${retryAfter}s`);\n            // If we're dealing with a rate limit, wait and retry once\n            await new Promise((resolve)=>setTimeout(resolve, retryAfter * 1000));\n            // Retry the request\n            const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3001';\n            const retryResponse = await fetch(`${baseUrl}/api/proxy/opensky`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    ICAO24s: ICAO24Batch\n                })\n            });\n            if (!retryResponse.ok) {\n                console.error(`[API] Retry failed with status: ${retryResponse.status}`);\n                return []; // Return empty array on retry failure\n            }\n            const retryData = await retryResponse.json();\n            return processProxyResponse(retryData);\n        }\n        // For other errors, log and return empty array\n        console.error(`[API] Proxy API error: ${response.status} ${response.statusText}`);\n        return [];\n    }\n    const data = await response.json();\n    return processProxyResponse(data);\n}\n/**\r\n * Process the response from the OpenSky proxy API\r\n */ function processProxyResponse(response) {\n    if (!response.success || !response.data || !Array.isArray(response.data.states)) {\n        console.warn('[API] Invalid response format from proxy:', response);\n        return [];\n    }\n    // The proxy already formats the data, so we can use it directly\n    return response.data.states.filter((state)=>{\n        // Ensure we only return aircraft with valid position data\n        return state && typeof state.latitude === 'number' && typeof state.longitude === 'number';\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/tracking/live.ts\n");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "sqlite":
/*!*************************!*\
  !*** external "sqlite" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("sqlite");;

/***/ }),

/***/ "sqlite3":
/*!**************************!*\
  !*** external "sqlite3" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("sqlite3");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftracking%2Flive&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ctracking%5Clive.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();