"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_components_tracking_map_AircraftTrackingMap_tsx",{

/***/ "(pages-dir-browser)/./components/tracking/hooks/useFilterLogic.ts":
/*!*****************************************************!*\
  !*** ./components/tracking/hooks/useFilterLogic.ts ***!
  \*****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFilterLogic: () => (/* binding */ useFilterLogic)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types/base */ \"(pages-dir-browser)/./types/base.ts\");\n/* harmony import */ var _context_EnhancedMapContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/EnhancedMapContext */ \"(pages-dir-browser)/./components/tracking/context/EnhancedMapContext.tsx\");\n/* harmony import */ var _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/services/openSkyTrackingService */ \"(pages-dir-browser)/./lib/services/openSkyTrackingService.ts\");\n/* harmony import */ var _lib_services_MapboxService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/services/MapboxService */ \"(pages-dir-browser)/./lib/services/MapboxService.ts\");\n/* harmony import */ var _lib_utils_geofenceAdapter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/utils/geofenceAdapter */ \"(pages-dir-browser)/./lib/utils/geofenceAdapter.ts\");\n/* harmony import */ var _lib_utils_geofenceEnricher__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/utils/geofenceEnricher */ \"(pages-dir-browser)/./lib/utils/geofenceEnricher.ts\");\n/* harmony import */ var _hooks_useGeolocationServices__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../hooks/useGeolocationServices */ \"(pages-dir-browser)/./components/tracking/hooks/useGeolocationServices.ts\");\n/* harmony import */ var _lib_services_geofencing__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../lib/services/geofencing */ \"(pages-dir-browser)/./lib/services/geofencing.ts\");\n/* harmony import */ var _hooks_useGeolocation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../hooks/useGeolocation */ \"(pages-dir-browser)/./components/tracking/hooks/useGeolocation.ts\");\n/* harmony import */ var _config_map__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../config/map */ \"(pages-dir-browser)/./config/map.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction useFilterLogic() {\n    // Get context state and functions\n    const { selectedManufacturer, selectedModel, totalActive, selectManufacturer, selectModel, reset, fullRefresh, refreshPositions, mapInstance, updateAircraftData, clearGeofenceData, updateGeofenceAircraft, blockManufacturerApiCalls, setBlockManufacturerApiCalls, isManufacturerApiBlocked, setIsManufacturerApiBlocked, geofenceCenter, setGeofenceCenter, toggleGeofence, clearGeofence, displayedAircraft } = (0,_context_EnhancedMapContext__WEBPACK_IMPORTED_MODULE_2__.useEnhancedMapContext)();\n    // Use our combined geolocation services hook\n    const geolocationServices = (0,_hooks_useGeolocationServices__WEBPACK_IMPORTED_MODULE_7__.useGeolocationServices)();\n    // Local state\n    const [localLoading, setLocalLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [filterMode, setFilterMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [activeDropdown, setActiveDropdown] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [manufacturerSearchTerm, setManufacturerSearchTerm] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const [isRefreshing, setIsRefreshing] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isRateLimited, setIsRateLimited] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [rateLimitTimer, setRateLimitTimer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Geofence state\n    const [isGettingLocation, setIsGettingLocation] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [geofenceLocation, setGeofenceLocation] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const [geofenceRadius, setGeofenceRadius] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(25);\n    const [geofenceCoordinates, setGeofenceCoordinates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [geofenceAircraft, setGeofenceAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [geofenceEnabled, setGeofenceEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isGeofenceActive, setIsGeofenceActive] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isSearchReady, setIsSearchReady] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(false);\n    // Region state\n    const [activeRegion, setActiveRegion] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [regionOutline, setRegionOutline] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [selectedRegion, setSelectedRegion] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_types_base__WEBPACK_IMPORTED_MODULE_1__.RegionCode.GLOBAL);\n    // Combined mode state\n    const [combinedModeReady, setCombinedModeReady] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Owner filter state\n    const allOwnerTypes = [\n        'individual',\n        'partnership',\n        'corp-owner',\n        'co-owned',\n        'llc',\n        'non-citizen-corp',\n        'airline',\n        'freight',\n        'medical',\n        'media',\n        'historical',\n        'flying-club',\n        'emergency',\n        'local-govt',\n        'education',\n        'federal-govt',\n        'flight-school',\n        'leasing-corp',\n        'military',\n        'unknown'\n    ];\n    const [ownerFilters, setOwnerFilters] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([\n        ...allOwnerTypes\n    ]);\n    // Refs for dropdown handling\n    const dropdownRefs = {\n        filter: (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),\n        manufacturer: (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),\n        model: (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),\n        location: (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),\n        region: (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),\n        owner: (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),\n        actions: (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null)\n    };\n    // Get geolocation hook - use the entire hook instance\n    const geolocation = (0,_hooks_useGeolocation__WEBPACK_IMPORTED_MODULE_9__.useGeolocation)(null);\n    // Geofence methods\n    // Fixed getUserLocation function\n    const getUserLocation = async ()=>{\n        if (isRateLimited) {\n            alert(\"Rate limited. Please wait \".concat(rateLimitTimer || 30, \" seconds before trying to get location.\"));\n            return;\n        }\n        const getUserLocation = async ()=>{\n            if (isRateLimited) {\n                alert(\"Rate limited. Please wait \".concat(rateLimitTimer || 30, \" seconds before trying to get location.\"));\n                return;\n            }\n            setIsGettingLocation(true);\n            try {\n                // Use the getCurrentPosition from our combined hook\n                const position = await geolocationServices.getCurrentPosition();\n                if (position) {\n                    const { latitude, longitude } = position.coords;\n                    // Update state with coordinates\n                    setGeofenceCoordinates({\n                        lat: latitude,\n                        lng: longitude\n                    });\n                    setGeofenceCenter({\n                        lat: latitude,\n                        lng: longitude\n                    });\n                    // Update the location display with coordinates\n                    setGeofenceLocation(\"\".concat(latitude.toFixed(6), \", \").concat(longitude.toFixed(6)));\n                    // Automatically trigger the geofence search\n                    try {\n                        const fetchedAircraft = await (0,_lib_services_geofencing__WEBPACK_IMPORTED_MODULE_8__.getAircraftNearLocation)(latitude, longitude, geofenceRadius);\n                        if (fetchedAircraft.length === 0) {\n                            alert(\"No aircraft found near your current location. Try increasing the radius.\");\n                            setIsGettingLocation(false);\n                            return;\n                        }\n                        // Process the aircraft data\n                        const adaptedAircraft = (0,_lib_utils_geofenceAdapter__WEBPACK_IMPORTED_MODULE_5__.adaptGeofenceAircraft)(fetchedAircraft);\n                        const enrichedAircraft = await (0,_lib_utils_geofenceEnricher__WEBPACK_IMPORTED_MODULE_6__.enrichGeofenceAircraft)(adaptedAircraft);\n                        // Save to local state\n                        setGeofenceAircraft(enrichedAircraft);\n                        // Clear existing aircraft data\n                        if (clearGeofenceData) {\n                            clearGeofenceData();\n                        }\n                        // Update the map with new aircraft\n                        updateGeofenceAircraft(enrichedAircraft);\n                        setIsGeofenceActive(true);\n                        // Center the map on user's location - SIMPLIFIED ZOOM LOGIC\n                        if (mapInstance) {\n                            // Don't modify zoom if it's already at an appropriate level\n                            const currentZoom = mapInstance.getZoom();\n                            const targetZoom = currentZoom <= 7 ? 9 : currentZoom;\n                            // Set the view directly to the user's location\n                            mapInstance.setView([\n                                latitude,\n                                longitude\n                            ], targetZoom);\n                            // Make sure the map reflects changes\n                            mapInstance.invalidateSize();\n                        }\n                        // If in geofence mode, ensure the filter mode is set correctly\n                        if (filterMode !== 'geofence' && filterMode !== 'both') {\n                            setFilterMode('geofence');\n                        }\n                    } catch (error) {\n                        var _error_message;\n                        if (((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('rate limit')) || error.status === 429) {\n                            handleRateLimit(30);\n                            // Still update the location even if we couldn't get aircraft\n                            if (mapInstance) {\n                                mapInstance.setView([\n                                    latitude,\n                                    longitude\n                                ], 9);\n                                mapInstance.invalidateSize();\n                            }\n                        } else {\n                            throw error;\n                        }\n                    }\n                    // Close the dropdown after selection\n                    setActiveDropdown(null);\n                }\n            } catch (error) {\n                console.error('Error getting user location:', error);\n                alert('Unable to access your location. Please make sure location services are enabled in your browser.');\n            } finally{\n                setIsGettingLocation(false);\n            }\n        };\n        // Effects\n        react__WEBPACK_IMPORTED_MODULE_0___default().useEffect({\n            \"useFilterLogic.getUserLocation.useEffect\": ()=>{\n                if (geofenceCoordinates) {\n                    setIsSearchReady(true);\n                }\n            }\n        }[\"useFilterLogic.getUserLocation.useEffect\"], [\n            geofenceCoordinates\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n            \"useFilterLogic.getUserLocation.useEffect\": ()=>{\n                if (isRateLimited && rateLimitTimer) {\n                    const timer = setTimeout({\n                        \"useFilterLogic.getUserLocation.useEffect.timer\": ()=>{\n                            setIsRateLimited(false);\n                            setRateLimitTimer(null);\n                            console.log('Rate limit timer expired, resuming API calls');\n                        }\n                    }[\"useFilterLogic.getUserLocation.useEffect.timer\"], rateLimitTimer * 1000);\n                    return ({\n                        \"useFilterLogic.getUserLocation.useEffect\": ()=>clearTimeout(timer)\n                    })[\"useFilterLogic.getUserLocation.useEffect\"];\n                }\n            }\n        }[\"useFilterLogic.getUserLocation.useEffect\"], [\n            isRateLimited,\n            rateLimitTimer\n        ]);\n        // Effect to sync geofence state\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n            \"useFilterLogic.getUserLocation.useEffect\": ()=>{\n                // Update internal state when geofence is toggled externally\n                if (isGeofenceActive !== geofenceEnabled) {\n                    setGeofenceEnabled(isGeofenceActive);\n                }\n            }\n        }[\"useFilterLogic.getUserLocation.useEffect\"], [\n            isGeofenceActive\n        ]);\n        // Close dropdown when clicking outside\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n            \"useFilterLogic.getUserLocation.useEffect\": ()=>{\n                const handleClickOutside = {\n                    \"useFilterLogic.getUserLocation.useEffect.handleClickOutside\": (event)=>{\n                        // Check if click is outside of all dropdowns\n                        const isOutsideAll = Object.values(dropdownRefs).every({\n                            \"useFilterLogic.getUserLocation.useEffect.handleClickOutside.isOutsideAll\": (ref)=>!ref.current || !ref.current.contains(event.target)\n                        }[\"useFilterLogic.getUserLocation.useEffect.handleClickOutside.isOutsideAll\"]);\n                        if (isOutsideAll) {\n                            setActiveDropdown(null);\n                        }\n                    }\n                }[\"useFilterLogic.getUserLocation.useEffect.handleClickOutside\"];\n                document.addEventListener('mousedown', handleClickOutside);\n                return ({\n                    \"useFilterLogic.getUserLocation.useEffect\": ()=>{\n                        document.removeEventListener('mousedown', handleClickOutside);\n                    }\n                })[\"useFilterLogic.getUserLocation.useEffect\"];\n            }\n        }[\"useFilterLogic.getUserLocation.useEffect\"], []);\n        // Clean up region outline when component unmounts\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n            \"useFilterLogic.getUserLocation.useEffect\": ()=>{\n                return ({\n                    \"useFilterLogic.getUserLocation.useEffect\": ()=>{\n                        if (regionOutline) {\n                            regionOutline.remove();\n                        }\n                    }\n                })[\"useFilterLogic.getUserLocation.useEffect\"];\n            }\n        }[\"useFilterLogic.getUserLocation.useEffect\"], [\n            regionOutline\n        ]);\n        // Effect to handle map click for geofence\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n            \"useFilterLogic.getUserLocation.useEffect\": ()=>{\n                const handleMapGeofenceClick = {\n                    \"useFilterLogic.getUserLocation.useEffect.handleMapGeofenceClick\": async (event)=>{\n                        try {\n                            // Cast the event to the proper type\n                            const customEvent = event;\n                            const { lat, lng } = customEvent.detail;\n                            // First update coordinates immediately\n                            setGeofenceCoordinates({\n                                lat,\n                                lng\n                            });\n                            // Then start an async operation to get the location name\n                            console.log(\"Getting location name for: \".concat(lat, \", \").concat(lng));\n                            // Temporarily show coordinates while fetching the name\n                            setGeofenceLocation(\"\".concat(lat.toFixed(6), \", \").concat(lng.toFixed(6)));\n                            // Get the friendly name asynchronously\n                            const locationName = await _lib_services_MapboxService__WEBPACK_IMPORTED_MODULE_4__.MapboxService.getLocationNameFromCoordinates(lat, lng);\n                            console.log(\"Got location name: \".concat(locationName));\n                            // Update with the friendly name once we have it\n                            if (locationName !== null) {\n                                setGeofenceLocation(locationName);\n                            }\n                            // Open the location dropdown if needed\n                            if (activeDropdown !== 'location') {\n                                setActiveDropdown('location');\n                            }\n                        } catch (error) {\n                            console.error('Error handling map click:', error);\n                        // Keep the coordinates display if there was an error\n                        }\n                    }\n                }[\"useFilterLogic.getUserLocation.useEffect.handleMapGeofenceClick\"];\n                // Add the event listener - use the standard event listener pattern\n                document.addEventListener('map-geofence-click', handleMapGeofenceClick);\n                // Clean up\n                return ({\n                    \"useFilterLogic.getUserLocation.useEffect\": ()=>{\n                        document.removeEventListener('map-geofence-click', handleMapGeofenceClick);\n                    }\n                })[\"useFilterLogic.getUserLocation.useEffect\"];\n            }\n        }[\"useFilterLogic.getUserLocation.useEffect\"], [\n            setGeofenceLocation,\n            setGeofenceCoordinates,\n            setActiveDropdown,\n            activeDropdown\n        ]);\n        // Main methods\n        const toggleDropdown = (dropdown, event)=>{\n            if (activeDropdown === dropdown) {\n                setActiveDropdown(null);\n            } else {\n                setActiveDropdown(dropdown);\n            }\n            // Prevent events from bubbling up\n            event.stopPropagation();\n        };\n        const handleRateLimit = function() {\n            let retryAfter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30;\n            setIsRateLimited(true);\n            setRateLimitTimer(retryAfter);\n            console.log(\"Rate limited by API. Retry after \".concat(retryAfter, \"s\"));\n            // Block all API calls\n            _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setBlockAllApiCalls(true);\n            setBlockManufacturerApiCalls(true);\n            // Show notification to user\n            if (retryAfter > 0) {\n                alert(\"Aircraft data refresh rate limited. Please wait \".concat(retryAfter, \" seconds before trying again.\"));\n            }\n        };\n        /**\r\n     * Toggle filter mode\r\n     */ const toggleFilterMode = (mode)=>{\n            setFilterMode(mode);\n            setActiveDropdown(null);\n            // Apply appropriate filters based on new mode\n            if (mode === 'region') {\n                // Block API calls in region mode\n                _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setBlockAllApiCalls(true);\n                // Apply region filtering if we already have data\n                if (displayedAircraft && displayedAircraft.length > 0) {\n                    filterAircraftByRegion(selectedRegion.toString());\n                }\n                // Clear manufacturer selection from the UI\n                selectManufacturer(null);\n                selectModel(null);\n                // If geofence is active, restore the full geofence data\n                if (geofenceCoordinates && geofenceAircraft.length > 0) {\n                    updateGeofenceAircraft(geofenceAircraft);\n                }\n            } else if (mode === 'owner') {\n                // Filter displayed aircraft by owner type\n                if (displayedAircraft && displayedAircraft.length > 0) {\n                    // First filter for valid coordinates\n                    const aircraftWithValidCoords = displayedAircraft.filter((plane)=>typeof plane.latitude === 'number' && typeof plane.longitude === 'number' && !isNaN(plane.latitude) && !isNaN(plane.longitude));\n                    // Apply owner type filter\n                    let filteredByOwner = ownerFilters.length === 0 ? aircraftWithValidCoords : aircraftWithValidCoords.filter((aircraft)=>ownerFilters.includes(getAircraftOwnerType(aircraft)));\n                    // Update display with filtered aircraft\n                    if (clearGeofenceData) {\n                        clearGeofenceData();\n                    }\n                    updateGeofenceAircraft(filteredByOwner);\n                }\n            } else if (mode === 'both') {\n                // Both mode - BLOCK API CALLS\n                _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setBlockAllApiCalls(true);\n                if (selectedManufacturer && isGeofenceActive && geofenceAircraft.length > 0) {\n                    applyCombinedFilters();\n                } else {\n                    // If one is missing, prompt the user\n                    if (!selectedManufacturer && isGeofenceActive) {\n                        alert('Please select a manufacturer to use combined filter mode');\n                    } else if (selectedManufacturer && !isGeofenceActive) {\n                        alert('Please set a location to use combined filter mode');\n                    } else {\n                        alert('Please select both a manufacturer and location to use combined filter mode');\n                    }\n                }\n            }\n        };\n        // Owner filter methods\n        const getAircraftOwnerType = (aircraft)=>{\n            const ownerType = aircraft.TYPE_REGISTRANT || 0;\n            return ownerTypeToString(ownerType);\n        };\n        const ownerTypeToString = (type)=>{\n            const typeNum = typeof type === 'string' ? parseInt(type, 10) : type;\n            const ownerTypeMap = {\n                1: 'individual',\n                2: 'partnership',\n                3: 'corp-owner',\n                4: 'co-owned',\n                7: 'llc',\n                8: 'non-citizen-corp',\n                9: 'airline',\n                10: 'freight',\n                11: 'medical',\n                12: 'media',\n                13: 'historical',\n                14: 'flying-club',\n                15: 'emergency',\n                16: 'local-govt',\n                17: 'education',\n                18: 'federal-govt',\n                19: 'flight-school',\n                20: 'leasing-corp',\n                21: 'military'\n            };\n            return ownerTypeMap[typeNum] || 'unknown';\n        };\n        const applyOwnerTypeFilter = (filters)=>{\n            // Skip filtering if all types are selected or none are selected\n            if (filters.length === 0 || filters.length === allOwnerTypes.length) {\n                return;\n            }\n            // Filter the aircraft based on selected owner types\n            if (displayedAircraft && displayedAircraft.length > 0) {\n                const filteredAircraft = displayedAircraft.filter((aircraft)=>{\n                    const ownerType = getAircraftOwnerType(aircraft);\n                    return filters.includes(ownerType);\n                });\n                // Update the displayed aircraft\n                if (clearGeofenceData) {\n                    clearGeofenceData();\n                }\n                updateGeofenceAircraft(filteredAircraft);\n            }\n        };\n        const handleOwnerFilterChange = (updatedFilters)=>{\n            setOwnerFilters(updatedFilters);\n            // Apply the filter to your aircraft data\n            applyOwnerTypeFilter(updatedFilters);\n        };\n        const resetOwnerFilters = ()=>{\n            setOwnerFilters([\n                ...allOwnerTypes\n            ]);\n        };\n        // Region filter methods\n        const filterAircraftByRegion = (region)=>{\n            if (!displayedAircraft || displayedAircraft.length === 0) return;\n            setLocalLoading(true);\n            try {\n                // Get the bounds for the selected region\n                const boundsExpression = (0,_config_map__WEBPACK_IMPORTED_MODULE_10__.getBoundsByRegion)(region);\n                // Ensure bounds is in the correct format\n                if (!Array.isArray(boundsExpression) || boundsExpression.length !== 2) {\n                    console.error(\"Invalid bounds format for region: \".concat(region), boundsExpression);\n                    setLocalLoading(false);\n                    return;\n                }\n                // Extract coordinates - Leaflet uses [lat, lng] format\n                const [[minLat, minLng], [maxLat, maxLng]] = boundsExpression;\n                console.log(\"Filtering by region: \".concat(region, \" with bounds:\"), {\n                    minLat,\n                    minLng,\n                    maxLat,\n                    maxLng\n                });\n                // Filter aircraft based on coordinates within the bounds\n                const filteredAircraft = displayedAircraft.filter((aircraft)=>{\n                    // Check if aircraft has valid coordinates\n                    if (typeof aircraft.latitude !== 'number' || typeof aircraft.longitude !== 'number' || isNaN(aircraft.latitude) || isNaN(aircraft.longitude)) {\n                        return false;\n                    }\n                    // Check if coordinates are within the bounds\n                    return aircraft.latitude >= minLat && aircraft.latitude <= maxLat && aircraft.longitude >= minLng && aircraft.longitude <= maxLng;\n                });\n                // Update the display with filtered aircraft\n                if (clearGeofenceData) {\n                    clearGeofenceData();\n                }\n                updateGeofenceAircraft(filteredAircraft);\n                console.log(\"Filtered to \".concat(filteredAircraft.length, \" aircraft in \").concat(region, \" region (out of \").concat(displayedAircraft.length, \" total)\"));\n            } catch (error) {\n                console.error('Error filtering aircraft by region:', error);\n            } finally{\n                setLocalLoading(false);\n            }\n        };\n        const handleRegionSelect = async (region)=>{\n            setActiveRegion(region);\n            setSelectedRegion(region);\n            setLocalLoading(true);\n            try {\n                // Set map bounds based on region\n                if (mapInstance) {\n                    const bounds = (0,_config_map__WEBPACK_IMPORTED_MODULE_10__.getBoundsByRegion)(region);\n                    // Get the appropriate zoom level for this region from your config\n                    const zoomLevel = (0,_config_map__WEBPACK_IMPORTED_MODULE_10__.getZoomLevelForRegion)(region);\n                    // First, set the appropriate zoom level\n                    mapInstance.setZoom(zoomLevel);\n                    // Then fit bounds with padding\n                    const options = {\n                        padding: _config_map__WEBPACK_IMPORTED_MODULE_10__.MAP_CONFIG.PADDING.DEFAULT\n                    };\n                    mapInstance.fitBounds(bounds, options);\n                    mapInstance.invalidateSize();\n                    drawRegionOutline(region);\n                }\n                // Instead of immediately fetching aircraft data,\n                // just store the region selection for later use\n                console.log(\"Region selected. Waiting for manufacturer selection...\");\n                // Optionally, you could fetch just the count of aircraft in this region\n                // to give the user an idea of the data volume\n                const countResponse = await fetch(\"/api/tracking/region-count?region=\".concat(region));\n                if (countResponse.ok) {\n                    const countData = await countResponse.json();\n                    console.log(\"\".concat(countData.count, \" aircraft available in this region\"));\n                }\n                // Clear any previous aircraft data\n                if (clearGeofenceData) {\n                    clearGeofenceData();\n                }\n            } catch (error) {\n                console.error('Error in region selection:', error);\n            } finally{\n                setLocalLoading(false);\n                setActiveDropdown(null);\n            }\n        };\n        const drawRegionOutline = (region)=>{\n            if (!mapInstance) return;\n            // Clear any existing outline\n            if (regionOutline) {\n                regionOutline.remove();\n            }\n            // Get the bounds for the selected region\n            const bounds = (0,_config_map__WEBPACK_IMPORTED_MODULE_10__.getBoundsByRegion)(region);\n            // Create a polygon from the bounds\n            const L = __webpack_require__(/*! leaflet */ \"(pages-dir-browser)/./node_modules/leaflet/dist/leaflet-src.js\");\n            const rectangle = L.rectangle(bounds, {\n                color: '#4f46e5',\n                weight: 3,\n                opacity: 0.7,\n                fill: true,\n                fillColor: '#4f46e5',\n                fillOpacity: 0.1,\n                dashArray: '5, 10',\n                interactive: false\n            });\n            // Add to map\n            rectangle.addTo(mapInstance);\n            // Update the state to include both the rectangle and the label\n            setRegionOutline({\n                remove: ()=>{\n                    rectangle.remove();\n                }\n            });\n        };\n        const processGeofenceSearch = async ()=>{\n            if (!geofenceLocation) return;\n            // Check if rate limited\n            if (isRateLimited) {\n                alert(\"Rate limited. Please wait \".concat(rateLimitTimer || 30, \" seconds before searching again.\"));\n                return;\n            }\n            // Block API calls while doing geofence search in combined mode\n            if (filterMode === 'both') {\n                _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setBlockAllApiCalls(true);\n                setBlockManufacturerApiCalls(true);\n            }\n            // Set loading state\n            setLocalLoading(true);\n            try {\n                console.log('Searching for aircraft near location: \"'.concat(geofenceLocation, '\"'));\n                // This will handle Postal codes, place names, addresses, POIs, etc.\n                let fetchedAircraft;\n                try {\n                    fetchedAircraft = await (0,_lib_services_geofencing__WEBPACK_IMPORTED_MODULE_8__.getAircraftNearSearchedLocation)(geofenceLocation, geofenceRadius);\n                } catch (error) {\n                    var _error_message;\n                    if (((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('rate limit')) || error.status === 429) {\n                        const retryAfter = 30; // Default to 30 seconds if not specified\n                        handleRateLimit(retryAfter);\n                        setLocalLoading(false);\n                        return;\n                    }\n                    throw error;\n                }\n                // Get coordinates for the map\n                let locations;\n                try {\n                    locations = await _lib_services_MapboxService__WEBPACK_IMPORTED_MODULE_4__.MapboxService.searchLocationWithMapbox(geofenceLocation, 1);\n                } catch (error) {\n                    console.error('Error searching location with Mapbox:', error);\n                    // Continue with aircraft data if available\n                    locations = [];\n                }\n                let coordinates = null;\n                if (locations.length > 0) {\n                    coordinates = {\n                        lat: locations[0].lat,\n                        lng: locations[0].lng\n                    };\n                    // Save the formatted location name\n                    setGeofenceLocation(locations[0].name);\n                } else if (fetchedAircraft.length > 0 && fetchedAircraft[0].latitude && fetchedAircraft[0].longitude) {\n                    // Fallback to first aircraft position\n                    coordinates = {\n                        lat: fetchedAircraft[0].latitude,\n                        lng: fetchedAircraft[0].longitude\n                    };\n                }\n                if (fetchedAircraft.length === 0) {\n                    alert(\"No aircraft found near \".concat(geofenceLocation, \". Try increasing the radius or searching in a different area.\"));\n                    setLocalLoading(false);\n                    return;\n                }\n                // Update state with the coordinates\n                if (coordinates) {\n                    setGeofenceCoordinates(coordinates);\n                    setGeofenceCenter(coordinates);\n                    setGeofenceRadius(geofenceRadius);\n                }\n                if (!isGeofenceActive) {\n                    toggleGeofence();\n                } else if (!coordinates) {\n                    throw new Error('Could not determine coordinates for the location');\n                }\n                console.log(\"Found \".concat(fetchedAircraft.length, \" aircraft in the area, preparing for display...\"));\n                // Ensure the data is in the right format\n                const adaptedAircraft = fetchedAircraft[0].MANUFACTURER !== undefined ? fetchedAircraft // Already in the right format\n                 : (0,_lib_utils_geofenceAdapter__WEBPACK_IMPORTED_MODULE_5__.adaptGeofenceAircraft)(fetchedAircraft); // Needs adaptation\n                // Enrich with static data\n                console.log('Enriching geofence aircraft with static data...');\n                const enrichedAircraft = await (0,_lib_utils_geofenceEnricher__WEBPACK_IMPORTED_MODULE_6__.enrichGeofenceAircraft)(adaptedAircraft);\n                // Save the FULL set to local state\n                setGeofenceAircraft(enrichedAircraft);\n                setIsGeofenceActive(true);\n                // Clear existing aircraft data\n                if (clearGeofenceData) {\n                    clearGeofenceData();\n                }\n                // If we're in combined mode and have a manufacturer, apply the combined filter\n                if (filterMode === 'both' && selectedManufacturer) {\n                    // Make sure API calls remain blocked\n                    _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setBlockAllApiCalls(true);\n                    setBlockManufacturerApiCalls(true);\n                    setTimeout(()=>{\n                        applyCombinedFilters();\n                    }, 100);\n                } else {\n                    // Just show all aircraft in the geofence\n                    updateGeofenceAircraft(enrichedAircraft);\n                    // Center the map - SIMPLIFIED ZOOM LOGIC\n                    if (mapInstance && coordinates) {\n                        // Get current zoom level\n                        const currentZoom = mapInstance.getZoom();\n                        // Use appropriate zoom level based on current view\n                        const targetZoom = currentZoom <= 7 ? 9 : currentZoom;\n                        // Set view to the coordinates\n                        mapInstance.setView([\n                            coordinates.lat,\n                            coordinates.lng\n                        ], targetZoom);\n                        // Ensure map is updated\n                        mapInstance.invalidateSize();\n                    }\n                }\n                // Close dropdown after search\n                setActiveDropdown(null);\n            } catch (error) {\n                var _error_message1;\n                console.error('Error in geofence search:', error);\n                if (((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes('rate limit')) || error.status === 429) {\n                    handleRateLimit(30);\n                } else {\n                    alert(\"Error: \".concat(error instanceof Error ? error.message : 'Unknown error occurred'));\n                }\n            } finally{\n                setLocalLoading(false);\n            }\n        };\n        /**\r\n     * STEP 3: Fix toggleGeofenceState to better handle manually clicking the button\r\n     */ const toggleGeofenceState = (enabled)=>{\n            console.log('toggleGeofenceState called with:', enabled);\n            console.log('Current geofenceCoordinates:', geofenceCoordinates);\n            if (enabled) {\n                // Check if we have valid coordinates\n                if (geofenceCoordinates && typeof geofenceCoordinates.lat === 'number' && typeof geofenceCoordinates.lng === 'number' && !isNaN(geofenceCoordinates.lat) && !isNaN(geofenceCoordinates.lng)) {\n                    console.log('Valid coordinates found, enabling geofence');\n                    // Set flags first\n                    setGeofenceEnabled(true);\n                    setIsGeofenceActive(true);\n                    // Call context toggle function if available\n                    if (typeof toggleGeofence === 'function') {\n                        toggleGeofence();\n                    }\n                    // Display aircraft if we have them\n                    if (geofenceAircraft && geofenceAircraft.length > 0) {\n                        console.log(\"Showing \".concat(geofenceAircraft.length, \" aircraft in geofence\"));\n                        updateGeofenceAircraft(geofenceAircraft);\n                    } else {\n                        // No aircraft data yet, trigger a search\n                        console.log('No aircraft data yet, triggering search');\n                        setTimeout(()=>{\n                            processGeofenceSearch();\n                        }, 100);\n                    }\n                } else {\n                    // No valid coordinates\n                    console.warn('No valid coordinates, showing alert');\n                    alert('Please set a location before enabling geofence.\\n\\nClick anywhere on the map to set a location.');\n                    setGeofenceEnabled(false);\n                    setIsGeofenceActive(false);\n                }\n            } else {\n                // Disabling geofence\n                console.log('Disabling geofence');\n                setGeofenceEnabled(false);\n                setIsGeofenceActive(false);\n                // Clear geofence data if function available\n                if (typeof clearGeofenceData === 'function') {\n                    clearGeofenceData();\n                }\n            }\n        };\n        // Manufacturer filter methods\n        const selectManufacturerAndClose = (value)=>{\n            // Close dropdown\n            setActiveDropdown(null);\n            setManufacturerSearchTerm('');\n            // If clearing the selection\n            if (value === '') {\n                selectManufacturer(null);\n                return;\n            }\n            // Set the manufacturer selection\n            selectManufacturer(value);\n            // If region is already selected, fetch filtered data\n            if (activeRegion !== null) {\n                fetchAircraftByRegionAndManufacturer(activeRegion, value);\n            } else {\n                // Otherwise, just proceed with manufacturer-only filtering as before\n                fetchManufacturerData(value);\n            }\n        };\n        const fetchManufacturerData = (manufacturer)=>{\n            if (isRateLimited) {\n                console.log(\"Skipping data fetch - rate limited for \".concat(rateLimitTimer, \"s\"));\n                return;\n            }\n            console.log(\"Fetching data for manufacturer: \".concat(manufacturer));\n            try {\n                // If you have a context function for this, call it after a slight delay\n                if (typeof refreshPositions === 'function') {\n                    // Apply a small delay to prevent overwhelming the API\n                    setTimeout(()=>{\n                        refreshPositions().catch((error)=>{\n                            var _error_message;\n                            if (((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('rate limit')) || error.status === 429) {\n                                handleRateLimit(30);\n                            } else {\n                                console.error('Error fetching manufacturer data:', error);\n                            }\n                        });\n                    }, 200);\n                }\n            } catch (error) {\n                var _error_message;\n                if (((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('rate limit')) || error.status === 429) {\n                    handleRateLimit(30);\n                } else {\n                    console.error('Error scheduling manufacturer data fetch:', error);\n                }\n            }\n        };\n        const fetchAircraftByRegionAndManufacturer = async function(region, manufacturer) {\n            let page = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, limit = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 500;\n            if (!region || !manufacturer) {\n                console.log('Both region and manufacturer must be selected');\n                return;\n            }\n            setLocalLoading(true);\n            try {\n                const response = await fetch(\"/api/tracking/filtered-aircraft?region=\".concat(region, \"&manufacturer=\").concat(encodeURIComponent(manufacturer), \"&page=\").concat(page, \"&limit=\").concat(limit));\n                const data = await response.json();\n                const aircraftData = data.aircraft || [];\n                if (!response.ok) {\n                    throw new Error(\"API error: \".concat(response.statusText));\n                }\n                // Process the filtered aircraft data\n                if (aircraftData.length > 0) {\n                    const extendedAircraft = aircraftData.map((aircraft)=>{\n                        var _aircraft_OPERATOR;\n                        var _aircraft_OPERATOR_toLowerCase_includes;\n                        return {\n                            ...aircraft,\n                            type: aircraft.TYPE_AIRCRAFT || 'Unknown',\n                            isGovernment: (_aircraft_OPERATOR_toLowerCase_includes = (_aircraft_OPERATOR = aircraft.OPERATOR) === null || _aircraft_OPERATOR === void 0 ? void 0 : _aircraft_OPERATOR.toLowerCase().includes('government')) !== null && _aircraft_OPERATOR_toLowerCase_includes !== void 0 ? _aircraft_OPERATOR_toLowerCase_includes : false,\n                            REGION: aircraft.REGION,\n                            zoomLevel: undefined\n                        };\n                    });\n                    // Update the map\n                    updateGeofenceAircraft(extendedAircraft);\n                } else {\n                    console.log(\"No aircraft found for manufacturer \".concat(manufacturer, \" in region \").concat(region));\n                }\n            } catch (error) {\n                console.error('Error fetching filtered aircraft:', error);\n            } finally{\n                setLocalLoading(false);\n            }\n        };\n        // Model selection methods\n        const handleModelSelect = (value)=>{\n            selectModel(value === '' ? null : value);\n            setActiveDropdown(null);\n            // If in combined mode, reapply the filter\n            if (filterMode === 'both' && isGeofenceActive && selectedManufacturer) {\n                setTimeout(()=>{\n                    applyCombinedFilters();\n                }, 100);\n            }\n        };\n        // Combined filter methods\n        const applyCombinedFilters = ()=>{\n            if (!selectedManufacturer || !isGeofenceActive || geofenceAircraft.length === 0) {\n                return;\n            }\n            setLocalLoading(true);\n            try {\n                console.log(\"Filtering \".concat(geofenceAircraft.length, \" aircraft by \").concat(selectedManufacturer));\n                // Filter the aircraft by manufacturer\n                let filteredAircraft = geofenceAircraft.filter((aircraft)=>{\n                    var _aircraft_MANUFACTURER;\n                    return ((_aircraft_MANUFACTURER = aircraft.MANUFACTURER) === null || _aircraft_MANUFACTURER === void 0 ? void 0 : _aircraft_MANUFACTURER.toLowerCase()) === selectedManufacturer.toLowerCase();\n                });\n                // Further filter by model if selected\n                if (selectedModel) {\n                    filteredAircraft = filteredAircraft.filter((aircraft)=>{\n                        var _aircraft_MODEL;\n                        return ((_aircraft_MODEL = aircraft.MODEL) === null || _aircraft_MODEL === void 0 ? void 0 : _aircraft_MODEL.toLowerCase()) === selectedModel.toLowerCase();\n                    });\n                }\n                console.log(\"Found \".concat(filteredAircraft.length, \" matching aircraft\"));\n                if (filteredAircraft.length === 0) {\n                    alert(\"No \".concat(selectedManufacturer, \" aircraft found in this area.\"));\n                    return;\n                }\n                // Clear display data\n                if (clearGeofenceData) {\n                    clearGeofenceData();\n                }\n                // Update the display\n                updateGeofenceAircraft(filteredAircraft);\n            } catch (error) {\n                console.error('Error filtering aircraft:', error);\n            } finally{\n                setLocalLoading(false);\n            }\n        };\n        // Reset all filters\n        const clearAllFilters = ()=>{\n            console.log('Clearing all filters...');\n            // 1. Reset filter mode\n            setFilterMode('manufacturer');\n            // 2. Unblock API calls that might have been blocked\n            _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setBlockAllApiCalls(false);\n            setBlockManufacturerApiCalls(false);\n            setIsManufacturerApiBlocked(false);\n            // 3. Clear manufacturer selection\n            selectManufacturer(null);\n            selectModel(null);\n            // 4. Clear geofence\n            setGeofenceLocation('');\n            setGeofenceCoordinates(null);\n            setGeofenceAircraft([]);\n            setGeofenceEnabled(false);\n            setIsGeofenceActive(false);\n            if (typeof clearGeofence === 'function') {\n                clearGeofence();\n            }\n            if (typeof clearGeofenceData === 'function') {\n                clearGeofenceData();\n            }\n            // 5. Reset owner filters to select all\n            setOwnerFilters([\n                ...allOwnerTypes\n            ]);\n            // 6. Clear region filter properly\n            setActiveRegion(null);\n            setSelectedRegion(_types_base__WEBPACK_IMPORTED_MODULE_1__.RegionCode.GLOBAL);\n            // Clear region outline from map\n            if (regionOutline) {\n                try {\n                    // Handle different possible object structures\n                    if (typeof regionOutline.remove === 'function') {\n                        regionOutline.remove();\n                    } else if (regionOutline.rectangle && typeof regionOutline.rectangle.remove === 'function') {\n                        regionOutline.rectangle.remove();\n                    }\n                    // Clear any labels associated with the region\n                    if (regionOutline.label && typeof regionOutline.label.remove === 'function') {\n                        regionOutline.label.remove();\n                    }\n                } catch (error) {\n                    console.error('Error removing region outline:', error);\n                }\n                // Always reset the region outline state\n                setRegionOutline(null);\n            }\n            // 7. Reset map view to global\n            if (mapInstance) {\n                // Use the predefined center and zoom level from your map config\n                mapInstance.setView(_config_map__WEBPACK_IMPORTED_MODULE_10__.MAP_CONFIG.CENTER, _config_map__WEBPACK_IMPORTED_MODULE_10__.MAP_CONFIG.DEFAULT_ZOOM);\n                mapInstance.invalidateSize();\n            }\n            // 8. Reset to initial aircraft data\n            if (typeof reset === 'function') {\n                reset();\n            } else if (typeof fullRefresh === 'function') {\n                fullRefresh();\n            }\n            // 9. Close any open dropdown\n            setActiveDropdown(null);\n            // 10. Reset rate limiting states\n            setIsRateLimited(false);\n            setRateLimitTimer(null);\n            // 11. Clear combined mode state\n            setCombinedModeReady(false);\n            // 12. Reset search terms\n            setManufacturerSearchTerm('');\n            // 13. Dispatch a custom event that other components can listen for\n            const clearEvent = new CustomEvent('ribbon-filters-cleared');\n            document.dispatchEvent(clearEvent);\n            console.log('All filters cleared successfully');\n        };\n        // Calculate combined loading state\n        const combinedLoading = localLoading;\n        return {\n            // State\n            filterMode,\n            activeDropdown,\n            selectedManufacturer,\n            selectedModel,\n            geofenceLocation,\n            geofenceRadius,\n            isGeofenceActive,\n            geofenceCoordinates,\n            getUserLocation,\n            activeRegion,\n            ownerFilters,\n            allOwnerTypes,\n            manufacturerSearchTerm,\n            combinedLoading,\n            isGettingLocation,\n            dropdownRefs,\n            localLoading,\n            isRateLimited,\n            selectedRegion,\n            isRefreshing,\n            isGeofencePlacementMode: false,\n            // Methods\n            toggleDropdown,\n            toggleFilterMode,\n            selectManufacturerAndClose,\n            handleModelSelect,\n            processGeofenceSearch,\n            handleOwnerFilterChange,\n            handleRegionSelect,\n            setManufacturerSearchTerm,\n            setGeofenceLocation,\n            setGeofenceRadius,\n            toggleGeofenceState,\n            clearAllFilters,\n            applyCombinedFilters,\n            getAircraftOwnerType,\n            setGeofenceCoordinates,\n            setGeofenceCenter,\n            updateGeofenceAircraft,\n            refreshWithFilters: ()=>{\n                // Implement refresh logic here\n                if (typeof refreshPositions === 'function') {\n                    refreshPositions().catch((error)=>{\n                        console.error('Error refreshing positions:', error);\n                    });\n                }\n            },\n            setActiveDropdown\n        };\n    };\n}\nfunction applyCombinedFilters() {\n    throw new Error('Function not implemented.');\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/tracking/hooks/useFilterLogic.ts\n"));

/***/ })

});