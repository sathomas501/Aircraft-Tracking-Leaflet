"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_components_tracking_map_AircraftTrackingMap_tsx",{

/***/ "(pages-dir-browser)/./lib/services/MapboxService.ts":
/*!***************************************!*\
  !*** ./lib/services/MapboxService.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapboxService: () => (/* binding */ MapboxService)\n/* harmony export */ });\n/* harmony import */ var _utils_getFlagImage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/getFlagImage */ \"(pages-dir-browser)/./utils/getFlagImage.ts\");\n\nclass MapboxService {\n    static formatCityCountry(locationString, isDetailed) {\n        if (!locationString) return '';\n        const parts = locationString.split(',').map((p)=>p.trim());\n        if (parts.length >= 2) {\n            const country = parts[parts.length - 1];\n            let city = parts[0];\n            if (parts.length >= 3 && parts[0] === parts[1]) city = parts[0];\n            return \"\".concat(city, \", \").concat(country);\n        }\n        return locationString;\n    }\n    static extractCountry(locationString) {\n        if (!locationString) return '';\n        const parts = locationString.split(',').map((p)=>p.trim());\n        return parts.length ? parts[parts.length - 1] : locationString;\n    }\n    static getLocationFlagUrl(locationString) {\n        if (!locationString) return null;\n        const country = this.extractCountry(locationString);\n        return (0,_utils_getFlagImage__WEBPACK_IMPORTED_MODULE_0__.getFlagImageUrl)(country);\n    }\n    static validateCoordinates(lat, lng) {\n        if (isNaN(lat) || isNaN(lng)) {\n            console.error(\"Invalid coordinates: lat=\".concat(lat, \", lng=\").concat(lng));\n            return false;\n        }\n        const isValidLat = lat >= -90 && lat <= 90;\n        const isValidLng = lng >= -180 && lng <= 180;\n        if (!isValidLat || !isValidLng) {\n            console.error(\"Invalid coordinates detected: lat=\".concat(lat, \", lng=\").concat(lng));\n            return false;\n        }\n        return true;\n    }\n    static async searchLocationWithMapbox(query) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, types = arguments.length > 2 ? arguments[2] : void 0, countryCode = arguments.length > 3 ? arguments[3] : void 0;\n        try {\n            var _data_features;\n            const params = new URLSearchParams({\n                query,\n                limit: limit.toString()\n            });\n            if (types) params.append('types', types);\n            if (countryCode) params.append('country', countryCode);\n            const response = await fetch(\"/api/proxy/mapbox-geocode?\".concat(params.toString()), {\n                headers: {\n                    'Cache-Control': 'max-age=86400'\n                }\n            });\n            if (!response.ok) throw new Error(\"Mapbox geocoding API error: \".concat(response.status));\n            const data = await response.json();\n            if (!((_data_features = data.features) === null || _data_features === void 0 ? void 0 : _data_features.length)) return [];\n            return data.features.map((feature)=>{\n                const [lng, lat] = feature.center;\n                this.validateCoordinates(lat, lng);\n                return {\n                    lat,\n                    lng,\n                    name: feature.place_name,\n                    bbox: feature.bbox\n                };\n            });\n        } catch (error) {\n            console.error(\"Mapbox location search failed:\", error);\n            throw error;\n        }\n    }\n    static async getCoordinatesFromQuery(query) {\n        const coordsMatch = query.match(/^(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)$/);\n        if (coordsMatch) {\n            const lat = parseFloat(coordsMatch[1]);\n            const lng = parseFloat(coordsMatch[3]);\n            return {\n                lat,\n                lng,\n                name: \"\".concat(lat, \", \").concat(lng)\n            };\n        }\n        const results = await this.searchLocationWithMapbox(query, 1, 'place,postcode,address,poi,neighborhood,region,locality');\n        return results.length ? {\n            ...results[0],\n            name: results[0].name\n        } : null;\n    }\n    static async getLocationSuggestions(query) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;\n        if (!query || query.trim().length < 2) return [];\n        const locations = await this.searchLocationWithMapbox(query, Math.max(5, limit), 'place,postcode,address,poi,neighborhood,region,locality');\n        return locations.slice(0, limit).map((loc)=>({\n                name: loc.name,\n                lat: loc.lat,\n                lng: loc.lng,\n                placeType: loc.name.split(',')[0]\n            }));\n    }\n    static async getLocationNameFromCoordinates(lat, lng) {\n        if (isNaN(lat) || isNaN(lng)) return \"\".concat(lat.toFixed(4), \", \").concat(lng.toFixed(4));\n        const coords = \"\".concat(lng, \",\").concat(lat);\n        try {\n            var _data_features, _feature_context, _feature_context1;\n            const response = await fetch(\"/api/proxy/mapbox-geocode?query=\".concat(encodeURIComponent(coords)));\n            if (!response.ok) throw new Error(\"Geocoding error: \".concat(response.status));\n            const data = await response.json();\n            const feature = (_data_features = data.features) === null || _data_features === void 0 ? void 0 : _data_features[0];\n            if (!feature) return \"\".concat(lat.toFixed(4), \", \").concat(lng.toFixed(4));\n            const placeItem = (_feature_context = feature.context) === null || _feature_context === void 0 ? void 0 : _feature_context.find((item)=>item.id.startsWith('place.'));\n            const regionItem = (_feature_context1 = feature.context) === null || _feature_context1 === void 0 ? void 0 : _feature_context1.find((item)=>item.id.startsWith('region.'));\n            if (placeItem && regionItem) return \"\".concat(placeItem.text, \", \").concat(regionItem.text);\n            if (placeItem) return placeItem.text;\n            if (regionItem) return regionItem.text;\n            return feature.place_name || feature.text;\n        } catch (error) {\n            console.error(\"Reverse geocoding failed:\", error);\n            return \"\".concat(lat.toFixed(4), \", \").concat(lng.toFixed(4));\n        }\n    }\n    static async postalCodeToCoordinates(postalCode) {\n        let countryCode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'us';\n        try {\n            var _data_result_addressMatches_, _data_result_addressMatches, _data_result;\n            const response = await fetch(\"/api/proxy/geocode?zip=\".concat(postalCode, \"&country=\").concat(countryCode), {\n                headers: {\n                    'Cache-Control': 'no-cache, no-store'\n                }\n            });\n            if (!response.ok) {\n                const errText = await response.text();\n                console.error(\"Postal geocode error (\".concat(response.status, \"): \").concat(errText));\n                return null;\n            }\n            const data = await response.json();\n            const match = (_data_result = data.result) === null || _data_result === void 0 ? void 0 : (_data_result_addressMatches = _data_result.addressMatches) === null || _data_result_addressMatches === void 0 ? void 0 : (_data_result_addressMatches_ = _data_result_addressMatches[0]) === null || _data_result_addressMatches_ === void 0 ? void 0 : _data_result_addressMatches_.coordinates;\n            if (match) return {\n                lat: match.y,\n                lng: match.x\n            };\n            console.warn(\"No coordinates found for postal code: \".concat(postalCode));\n            return null;\n        } catch (error) {\n            console.error(\"Postal code geocoding failed:\", error);\n            return null;\n        }\n    }\n    constructor(){\n        this.extractCountryFromFeature = (feature)=>{\n            var _feature_context;\n            if (!feature) return '';\n            const countryContext = (_feature_context = feature.context) === null || _feature_context === void 0 ? void 0 : _feature_context.find((c)=>c.id.startsWith('country.'));\n            if (countryContext) {\n                return countryContext.text;\n            }\n            if (feature.id.startsWith('country.')) {\n                return feature.text;\n            }\n            // Fallback to parsing place_name (your original logic)\n            if (feature.place_name) {\n                const parts = feature.place_name.split(',').map((p)=>p.trim());\n                return parts.length ? parts[parts.length - 1] : '';\n            }\n            return '';\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./lib/services/MapboxService.ts\n"));

/***/ })

});