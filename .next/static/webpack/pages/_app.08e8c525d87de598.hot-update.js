"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./components/tracking/context/EnhancedMapContext.tsx":
/*!************************************************************!*\
  !*** ./components/tracking/context/EnhancedMapContext.tsx ***!
  \************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnhancedMapProvider: () => (/* binding */ EnhancedMapProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useEnhancedMapContext: () => (/* binding */ useEnhancedMapContext)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types/base */ \"(pages-dir-browser)/./types/base.ts\");\n/* harmony import */ var _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/services/openSkyTrackingService */ \"(pages-dir-browser)/./lib/services/openSkyTrackingService.ts\");\n/* harmony import */ var _persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../persistence/AircraftDataPersistence */ \"(pages-dir-browser)/./components/tracking/persistence/AircraftDataPersistence.ts\");\n/* harmony import */ var _config_map__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../config/map */ \"(pages-dir-browser)/./config/map.ts\");\n// components/tracking/context/EnhancedMapContext.tsx\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n// Create context with default values\nconst EnhancedMapContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    mapInstance: null,\n    setMapInstance: ()=>{},\n    zoomLevel: 6,\n    setZoomLevel: ()=>{},\n    displayedAircraft: [],\n    selectedAircraft: null,\n    selectAircraft: ()=>{},\n    // Data persistence defaults\n    cachedAircraftData: {},\n    updateAircraftData: ()=>{},\n    lastPersistenceUpdate: null,\n    selectedManufacturer: null,\n    selectedModel: null,\n    activeModels: [],\n    totalActive: 0,\n    isLoading: false,\n    isRefreshing: false,\n    trackingStatus: '',\n    lastRefreshed: null,\n    selectManufacturer: async ()=>{},\n    selectModel: ()=>{},\n    reset: async ()=>{},\n    refreshPositions: async ()=>{},\n    fullRefresh: async ()=>{},\n    clearCache: ()=>{},\n    clearGeofenceData: ()=>{},\n    // Add default for new function\n    updateGeofenceAircraft: ()=>{},\n    filterMode: 'manufacturer',\n    setFilterMode: ()=>{},\n    blockManufacturerApiCalls: false,\n    setBlockManufacturerApiCalls: ()=>{},\n    isManufacturerApiBlocked: false,\n    setIsManufacturerApiBlocked: ()=>{},\n    // Geofencing properties\n    geofenceCenter: null,\n    geofenceRadius: 25,\n    isGeofenceActive: false,\n    setGeofenceCenter: ()=>{},\n    setGeofenceRadius: ()=>{},\n    geofenceCoordinates: null,\n    toggleGeofence: ()=>{},\n    clearGeofence: ()=>({}),\n    filteredAircraft: [],\n    selectedRegion: _types_base__WEBPACK_IMPORTED_MODULE_2__.RegionCode.GLOBAL,\n    setSelectedRegion: (region)=>{},\n    getBoundsByRegion: (region)=>(0,_config_map__WEBPACK_IMPORTED_MODULE_5__.getBoundsByRegion)('GLOBAL'),\n    isGeofencePlacementMode: false,\n    setIsGeofencePlacementMode: ()=>{},\n    setPanelPosition: ()=>{}\n});\n// Enhanced Map Provider component\nconst EnhancedMapProvider = (param)=>{\n    let { children, manufacturers, onError } = param;\n    _s();\n    // Map state\n    const [mapInstance, setMapInstance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [zoomLevel, setZoomLevel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(6);\n    // Aircraft state\n    const [displayedAircraft, setDisplayedAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedAircraft, setSelectedAircraft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Data persistence state\n    const [cachedAircraftData, setCachedAircraftData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [lastPersistenceUpdate, setLastPersistenceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [geofenceCenter, setGeofenceCenter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [selectedRegion, setSelectedRegion] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_types_base__WEBPACK_IMPORTED_MODULE_2__.RegionCode.GLOBAL);\n    // Derived state for geofence coordinates\n    const geofenceCoordinates = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"EnhancedMapProvider.useMemo[geofenceCoordinates]\": ()=>geofenceCenter\n    }[\"EnhancedMapProvider.useMemo[geofenceCoordinates]\"], [\n        geofenceCenter\n    ]);\n    const [geofenceRadius, setGeofenceRadius] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(25); // Default 25km radius\n    const [isGeofenceActive, setIsGeofenceActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isGeofencePlacementMode, setIsGeofencePlacementMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Add this to your state declarations\n    const [aircraftPositions, setAircraftPositions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Toggle geofence activation\n    const toggleGeofence = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[toggleGeofence]\": ()=>{\n            setIsGeofenceActive({\n                \"EnhancedMapProvider.useCallback[toggleGeofence]\": (prev)=>!prev\n            }[\"EnhancedMapProvider.useCallback[toggleGeofence]\"]);\n        }\n    }[\"EnhancedMapProvider.useCallback[toggleGeofence]\"], []);\n    // Clear geofence\n    const clearGeofence = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[clearGeofence]\": ()=>{\n            setGeofenceCenter(null);\n            setIsGeofenceActive(false);\n            return {}; // Return an empty object to match the expected type\n        }\n    }[\"EnhancedMapProvider.useCallback[clearGeofence]\"], []);\n    // Selection state\n    const [selectedManufacturer, setSelectedManufacturer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [selectedModel, setSelectedModel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [activeModels, setActiveModels] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [totalActive, setTotalActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Loading state\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isRefreshing, setIsRefreshing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [trackingStatus, setTrackingStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [lastRefreshed, setLastRefreshed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Add this with your other state variables\n    const [lastFullRefreshTime, setLastFullRefreshTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isManufacturerApiBlocked, setIsManufacturerApiBlocked] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [filterMode, setFilterMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('manufacturer');\n    const [blockManufacturerApiCalls, setBlockManufacturerApiCalls] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Flag to track if we're in geofence mode\n    const [isGeofenceMode, setIsGeofenceMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Define the filter function correctly\n    const filterAircraftByGeofence = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\": ()=>{\n            if (!geofenceCenter || !isGeofenceActive) {\n                return displayedAircraft;\n            }\n            // Helper function to calculate distance between two points\n            const calculateDistance = {\n                \"EnhancedMapProvider.useCallback[filterAircraftByGeofence].calculateDistance\": (lat1, lon1, lat2, lon2)=>{\n                    const R = 6371; // Radius of the earth in km\n                    const dLat = deg2rad(lat2 - lat1);\n                    const dLon = deg2rad(lon2 - lon1);\n                    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n                    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n                    const distance = R * c; // Distance in km\n                    return distance;\n                }\n            }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence].calculateDistance\"];\n            const deg2rad = {\n                \"EnhancedMapProvider.useCallback[filterAircraftByGeofence].deg2rad\": (deg)=>{\n                    return deg * (Math.PI / 180);\n                }\n            }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence].deg2rad\"];\n            // Filter aircraft within the radius\n            return displayedAircraft.filter({\n                \"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\": (aircraft)=>{\n                    if (!aircraft.latitude || !aircraft.longitude) return false;\n                    // Calculate distance between aircraft and geofence center\n                    const distance = calculateDistance(geofenceCenter.lat, geofenceCenter.lng, aircraft.latitude, aircraft.longitude);\n                    // Return true if aircraft is within radius\n                    return geofenceRadius !== null && distance <= geofenceRadius;\n                }\n            }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\"]);\n        }\n    }[\"EnhancedMapProvider.useCallback[filterAircraftByGeofence]\"], [\n        displayedAircraft,\n        geofenceCenter,\n        geofenceRadius,\n        isGeofenceActive\n    ]);\n    // Then separately, define filteredAircraft - don't try to do both in the same function\n    const filteredAircraft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"EnhancedMapProvider.useMemo[filteredAircraft]\": ()=>{\n            return isGeofenceActive && geofenceCenter ? filterAircraftByGeofence() : displayedAircraft;\n        }\n    }[\"EnhancedMapProvider.useMemo[filteredAircraft]\"], [\n        isGeofenceActive,\n        geofenceCenter,\n        filterAircraftByGeofence,\n        displayedAircraft\n    ]);\n    // Refs for tracking subscriptions\n    const unsubscribeAircraftRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const unsubscribeStatusRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Load persisted aircraft data on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            const savedData = (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.loadAircraftData)();\n            if (savedData) {\n                console.log(\"[EnhancedMapContext] Loaded \".concat(Object.keys(savedData).length, \" aircraft from persistence\"));\n                setCachedAircraftData(savedData);\n                setLastPersistenceUpdate(Date.now());\n            }\n        }\n    }[\"EnhancedMapProvider.useEffect\"], []);\n    // Save aircraft data when cachedAircraftData changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            if (Object.keys(cachedAircraftData).length > 0) {\n                console.log(\"[EnhancedMapContext] Saving \".concat(Object.keys(cachedAircraftData).length, \" aircraft to persistence\"));\n                (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.saveAircraftData)(cachedAircraftData);\n            }\n        }\n    }[\"EnhancedMapProvider.useEffect\"], [\n        cachedAircraftData\n    ]);\n    // Initialize tracking service and subscriptions\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            // Subscribe to tracking updates that include trail data\n            const handleTrackingUpdate = {\n                \"EnhancedMapProvider.useEffect.handleTrackingUpdate\": (data)=>{\n                    // Only update displayed aircraft if we're not in geofence mode\n                    if (!isGeofenceMode) {\n                        updateAircraftDisplay();\n                    }\n                }\n            }[\"EnhancedMapProvider.useEffect.handleTrackingUpdate\"];\n            // Subscribe to aircraft updates\n            unsubscribeAircraftRef.current = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].subscribe(handleTrackingUpdate);\n            // Subscribe to status updates\n            unsubscribeStatusRef.current = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].subscribeToStatus({\n                \"EnhancedMapProvider.useEffect\": (status)=>{\n                    setTrackingStatus(status);\n                    setIsLoading(_lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isLoading());\n                }\n            }[\"EnhancedMapProvider.useEffect\"]);\n            // IMPORTANT: Clear any existing tracking when component mounts\n            _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].stopTracking();\n            // Cleanup on unmount\n            return ({\n                \"EnhancedMapProvider.useEffect\": ()=>{\n                    if (unsubscribeAircraftRef.current) {\n                        unsubscribeAircraftRef.current();\n                    }\n                    if (unsubscribeStatusRef.current) {\n                        unsubscribeStatusRef.current();\n                    }\n                }\n            })[\"EnhancedMapProvider.useEffect\"];\n        }\n    }[\"EnhancedMapProvider.useEffect\"], [\n        isGeofenceMode\n    ]);\n    // Update aircraft data with persistence\n    const updateAircraftData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[updateAircraftData]\": (newAircraftArray)=>{\n            // Convert to a map for easier processing\n            const newAircraftMap = {};\n            newAircraftArray.forEach({\n                \"EnhancedMapProvider.useCallback[updateAircraftData]\": (aircraft)=>{\n                    if (aircraft.ICAO24) {\n                        newAircraftMap[aircraft.ICAO24] = {\n                            ...aircraft,\n                            // Ensure required fields for CachedAircraftData are present\n                            ICAO24: aircraft.ICAO24,\n                            latitude: aircraft.latitude || 0,\n                            longitude: aircraft.longitude || 0,\n                            altitude: aircraft.altitude || 0,\n                            velocity: aircraft.velocity || 0,\n                            heading: aircraft.heading || 0,\n                            on_ground: aircraft.on_ground || false,\n                            last_contact: aircraft.last_contact || Date.now(),\n                            lastSeen: Date.now(),\n                            lastUpdated: Date.now()\n                        };\n                    }\n                }\n            }[\"EnhancedMapProvider.useCallback[updateAircraftData]\"]);\n            // Merge with existing cached data to preserve fields\n            setCachedAircraftData({\n                \"EnhancedMapProvider.useCallback[updateAircraftData]\": (currentCache)=>(0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.mergeAircraftData)(currentCache, newAircraftMap)\n            }[\"EnhancedMapProvider.useCallback[updateAircraftData]\"]);\n            setLastPersistenceUpdate(Date.now());\n            // If the selected aircraft is updated, update the selection\n            if (selectedAircraft && newAircraftMap[selectedAircraft.ICAO24]) {\n                const updatedAircraft = {\n                    ...selectedAircraft,\n                    ...newAircraftMap[selectedAircraft.ICAO24]\n                };\n                setSelectedAircraft(updatedAircraft);\n            }\n        }\n    }[\"EnhancedMapProvider.useCallback[updateAircraftData]\"], [\n        selectedAircraft\n    ]);\n    // Clear persistence cache\n    const clearCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[clearCache]\": ()=>{\n            (0,_persistence_AircraftDataPersistence__WEBPACK_IMPORTED_MODULE_4__.clearAircraftData)();\n            setCachedAircraftData({});\n            setLastPersistenceUpdate(null);\n            setTrackingStatus('Cache cleared');\n        }\n    }[\"EnhancedMapProvider.useCallback[clearCache]\"], []);\n    // Update aircraft display based on selected MODEL\n    const updateAircraftDisplay = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[updateAircraftDisplay]\": ()=>{\n            // Get extended aircraft based on selected MODEL\n            const extendedAircraft = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getExtendedAircraft(selectedModel || undefined);\n            // Get MODEL stats from the service\n            const { models, totalActive: total } = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getModelStats();\n            // Enhance aircraft data with persistence\n            updateAircraftData(extendedAircraft);\n            // Only update displayed aircraft if we're not in geofence mode\n            if (!isGeofenceMode) {\n                setDisplayedAircraft(extendedAircraft);\n                setActiveModels(models);\n                setTotalActive(total);\n            }\n            setIsLoading(_lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isLoading());\n        }\n    }[\"EnhancedMapProvider.useCallback[updateAircraftDisplay]\"], [\n        selectedModel,\n        updateAircraftData,\n        isGeofenceMode\n    ]);\n    // Update display when MODEL selection changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"EnhancedMapProvider.useEffect\": ()=>{\n            updateAircraftDisplay();\n        }\n    }[\"EnhancedMapProvider.useEffect\"], [\n        selectedModel,\n        updateAircraftDisplay\n    ]);\n    // New function to handle geofence aircraft updates\n    const updateGeofenceAircraft = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[updateGeofenceAircraft]\": (geofenceAircraft)=>{\n            // Mark that we're in geofence mode\n            setIsGeofenceMode(true);\n            console.log(\"[EnhancedMapContext] Updating \".concat(geofenceAircraft.length, \" aircraft from geofence\"));\n            // Update the cached data (same as regular updates)\n            updateAircraftData(geofenceAircraft);\n            // Also directly update the displayed aircraft\n            setDisplayedAircraft(geofenceAircraft);\n            // Update stats\n            setTotalActive(geofenceAircraft.length);\n            // Extract MODEL stats for the sidebar\n            const modelCounts = geofenceAircraft.reduce({\n                \"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelCounts\": (acc, aircraft)=>{\n                    const MODEL = aircraft.MODEL || aircraft.TYPE_AIRCRAFT || 'Unknown';\n                    if (!acc[MODEL]) {\n                        acc[MODEL] = {\n                            MODEL,\n                            count: 0,\n                            MANUFACTURER: aircraft.MANUFACTURER || 'Unknown',\n                            // Add required properties for AircraftModel\n                            label: MODEL,\n                            activeCount: 0,\n                            totalCount: 0\n                        };\n                    }\n                    acc[MODEL].count++;\n                    acc[MODEL].activeCount++;\n                    acc[MODEL].totalCount++;\n                    return acc;\n                }\n            }[\"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelCounts\"], {});\n            // Convert to array for the activeModels state\n            const modelArray = Object.values(modelCounts).map({\n                \"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelArray\": (MODEL)=>({\n                        MODEL: MODEL.MODEL,\n                        count: MODEL.count,\n                        MANUFACTURER: MODEL.MANUFACTURER,\n                        // Add required properties for AircraftModel type\n                        label: MODEL.MODEL,\n                        activeCount: MODEL.count,\n                        totalCount: MODEL.count\n                    })\n            }[\"EnhancedMapProvider.useCallback[updateGeofenceAircraft].modelArray\"]);\n            setActiveModels(modelArray);\n            // Update the last refreshed timestamp\n            setLastRefreshed(new Date().toLocaleTimeString());\n        }\n    }[\"EnhancedMapProvider.useCallback[updateGeofenceAircraft]\"], [\n        updateAircraftData\n    ]);\n    // Handle MANUFACTURER selection\n    // In your EnhancedMapContext.tsx - modify the selectManufacturer function\n    const selectManufacturer = async (MANUFACTURER)=>{\n        // Exit geofence mode when selecting a MANUFACTURER\n        setIsGeofenceMode(false);\n        setSelectedManufacturer(MANUFACTURER);\n        setSelectedModel(null);\n        setIsLoading(true);\n        setLastRefreshed(null);\n        // Clear previous data\n        setDisplayedAircraft([]);\n        setActiveModels([]);\n        setTotalActive(0);\n        // If null, just exit\n        if (MANUFACTURER === null) {\n            setIsLoading(false);\n            return;\n        }\n        // If we're blocking API calls, exit early\n        if (isManufacturerApiBlocked) {\n            console.log(\"[EnhancedMapContext] API calls blocked for manufacturer: \".concat(MANUFACTURER));\n            setIsLoading(false);\n            return;\n        }\n        try {\n            // Start tracking with a progress handler\n            setTrackingStatus(\"Loading aircraft for \".concat(MANUFACTURER, \"...\"));\n            // Use the existing service but with a progress callback\n            // In EnhancedMapContext.tsx, modify your callback to handle both types:\n            await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].trackManufacturerWithProgress(MANUFACTURER, (progress)=>{\n                // Update the tracking status message\n                if (progress.message) {\n                    setTrackingStatus(progress.message);\n                }\n                // Update displayed aircraft as they're loaded\n                if (progress.aircraft) {\n                    // Cast the aircraft array to ExtendedAircraft[] since our context uses that type\n                    setDisplayedAircraft(progress.aircraft);\n                }\n                // Update model stats\n                if (progress.models) {\n                    setActiveModels(progress.models);\n                }\n                // Update total count\n                if (progress.total !== undefined) {\n                    setTotalActive(progress.total);\n                }\n            });\n            setLastRefreshed(new Date().toLocaleTimeString());\n        } catch (error) {\n            onError(\"Error tracking manufacturer: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n            setTrackingStatus('Error loading aircraft data');\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    // Handle MODEL selection\n    const selectModel = (MODEL)=>{\n        setSelectedModel(MODEL);\n    };\n    // Handle aircraft selection\n    const selectAircraft = (aircraft)=>{\n        setSelectedAircraft(aircraft);\n        // If selecting an aircraft, check if we have cached data to enhance it\n        if (aircraft && aircraft.ICAO24 && cachedAircraftData[aircraft.ICAO24]) {\n            const enhancedAircraft = {\n                ...aircraft,\n                ...cachedAircraftData[aircraft.ICAO24]\n            };\n            setSelectedAircraft(enhancedAircraft);\n        }\n    };\n    // If you don't already have it, add this function to expose the map's getBoundsByRegion function\n    // Create a wrapped function that calls your map config function\n    const handleGetBoundsByRegion = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[handleGetBoundsByRegion]\": (region)=>{\n            return (0,_config_map__WEBPACK_IMPORTED_MODULE_5__.getBoundsByRegion)(region);\n        }\n    }[\"EnhancedMapProvider.useCallback[handleGetBoundsByRegion]\"], []);\n    // Reset all selections\n    const reset = async ()=>{\n        await selectManufacturer(null);\n    };\n    // Method to refresh only the positions of active aircraft\n    const refreshPositions = async ()=>{\n        if (isRefreshing || !selectedManufacturer && !isGeofenceMode) return;\n        setIsRefreshing(true);\n        setTrackingStatus('Updating aircraft positions...');\n        try {\n            // Call the service\n            await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshPositionsOnly();\n            setLastRefreshed(new Date().toLocaleTimeString());\n            setTrackingStatus(\"Positions updated for \".concat(displayedAircraft.length, \" aircraft\"));\n        } catch (error) {\n            onError(\"Error refreshing positions: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        } finally{\n            setTimeout(()=>{\n                setIsRefreshing(false);\n            }, 500);\n        }\n    };\n    // Method for full tracking refresh\n    const fullRefresh = async ()=>{\n        if (!selectedManufacturer && !isGeofenceMode || isRefreshing) return;\n        // Set a timeout to force exit from loading state after 10 seconds\n        // This is a safety mechanism\n        const safetyTimeout = setTimeout(()=>{\n            setIsRefreshing(false);\n            setTrackingStatus('Refresh timed out');\n        }, 10000);\n        setIsRefreshing(true);\n        try {\n            // Get currently tracked aircraft\n            const allTrackedAircraft = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTrackedAircraft();\n            // Get active aircraft (those with position data)\n            const activeAircraft = allTrackedAircraft.filter((aircraft)=>aircraft.ICAO24 && aircraft.latitude && aircraft.longitude);\n            const needsFullRefresh = !lastFullRefreshTime || Date.now() - lastFullRefreshTime > 3600000;\n            let success = false;\n            if (activeAircraft.length === 0 || needsFullRefresh) {\n                // Do a full refresh\n                setTrackingStatus('Performing full refresh...');\n                try {\n                    await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshNow();\n                    setLastFullRefreshTime(Date.now());\n                    success = true;\n                } catch (error) {\n                    // Silently handle this error\n                    console.warn('Full refresh failed');\n                }\n            } else {\n                // Do an optimized refresh\n                const activeIcaos = activeAircraft.map((aircraft)=>aircraft.ICAO24).filter(Boolean);\n                if (activeIcaos.length > 0) {\n                    setTrackingStatus(\"Refreshing \".concat(activeIcaos.length, \" active aircraft...\"));\n                    try {\n                        await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshSpecificAircraft(activeIcaos);\n                        success = true;\n                    } catch (error) {\n                        // Try falling back to a full refresh\n                        console.warn('Optimized refresh failed, trying full refresh');\n                        try {\n                            await _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].refreshNow();\n                            setLastFullRefreshTime(Date.now());\n                            success = true;\n                        } catch (fallbackError) {\n                            // Silently handle this error\n                            console.warn('Fallback refresh failed');\n                        }\n                    }\n                }\n            }\n            clearTimeout(safetyTimeout);\n            // Only update if the refresh was successful\n            if (success) {\n                const currentCount = _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTrackedAircraft().length;\n                setTrackingStatus(\"Refresh completed with \".concat(currentCount, \" aircraft\"));\n                setLastRefreshed(new Date().toLocaleTimeString());\n            } else {\n                setTrackingStatus('Refresh failed');\n            }\n        } catch (error) {\n            clearTimeout(safetyTimeout);\n            // Only show errors to the user if they appear to be significant\n            if (error instanceof Error && error.message !== 'aborted') {\n                onError(\"Error during refresh: \".concat(error.message || 'Unknown error'));\n            }\n            setTrackingStatus('Error during refresh');\n        } finally{\n            clearTimeout(safetyTimeout);\n            setIsRefreshing(false);\n        }\n    };\n    const clearGeofenceData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"EnhancedMapProvider.useCallback[clearGeofenceData]\": ()=>{\n            // Reset geofence mode flag\n            setIsGeofenceMode(false);\n            // Clear displayed aircraft\n            setDisplayedAircraft([]);\n            setActiveModels([]);\n            setTotalActive(0);\n            // If there was a previously selected MANUFACTURER, we can restore it\n            if (selectedManufacturer) {\n                // Small delay to ensure state updates properly\n                setTimeout({\n                    \"EnhancedMapProvider.useCallback[clearGeofenceData]\": ()=>{\n                        _lib_services_openSkyTrackingService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].trackManufacturer(selectedManufacturer);\n                    }\n                }[\"EnhancedMapProvider.useCallback[clearGeofenceData]\"], 100);\n            }\n        }\n    }[\"EnhancedMapProvider.useCallback[clearGeofenceData]\"], [\n        selectedManufacturer\n    ]);\n    // Create context value\n    const contextValue = {\n        mapInstance,\n        setMapInstance,\n        zoomLevel,\n        setZoomLevel,\n        displayedAircraft,\n        selectedAircraft,\n        selectAircraft,\n        // Data persistence\n        cachedAircraftData,\n        updateAircraftData,\n        lastPersistenceUpdate,\n        selectedManufacturer,\n        selectedModel,\n        activeModels,\n        totalActive,\n        isLoading,\n        isRefreshing,\n        trackingStatus,\n        lastRefreshed,\n        selectManufacturer,\n        selectModel,\n        reset,\n        refreshPositions,\n        fullRefresh,\n        clearCache,\n        clearGeofenceData,\n        updateGeofenceAircraft,\n        filteredAircraft,\n        filterMode,\n        setFilterMode,\n        blockManufacturerApiCalls,\n        setBlockManufacturerApiCalls,\n        isManufacturerApiBlocked,\n        setIsManufacturerApiBlocked,\n        // Geofencing properties\n        geofenceCenter,\n        geofenceRadius,\n        isGeofenceActive,\n        geofenceCoordinates,\n        setGeofenceCenter,\n        setGeofenceRadius,\n        toggleGeofence,\n        clearGeofence,\n        isGeofencePlacementMode,\n        setIsGeofencePlacementMode,\n        // Region selection\n        selectedRegion,\n        setSelectedRegion,\n        getBoundsByRegion: handleGetBoundsByRegion\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(EnhancedMapContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\satho\\\\Documents\\\\Projects\\\\aircraft-tracking\\\\components\\\\tracking\\\\context\\\\EnhancedMapContext.tsx\",\n        lineNumber: 827,\n        columnNumber: 5\n    }, undefined);\n};\n_s(EnhancedMapProvider, \"ft4R0gMInmgVu/GQ1zBkgSrD/lQ=\");\n_c = EnhancedMapProvider;\n// Custom hook to use the context\nconst useEnhancedMapContext = ()=>{\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EnhancedMapContext);\n};\n_s1(useEnhancedMapContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EnhancedMapContext);\nvar _c;\n$RefreshReg$(_c, \"EnhancedMapProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/tracking/context/EnhancedMapContext.tsx\n"));

/***/ })

});